# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import akeyless
from akeyless.models.list_items_output import ListItemsOutput  # noqa: E501
from akeyless.rest import ApiException

class TestListItemsOutput(unittest.TestCase):
    """ListItemsOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ListItemsOutput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = akeyless.models.list_items_output.ListItemsOutput()  # noqa: E501
        if include_optional :
            return ListItemsOutput(
                items = [
                    akeyless.models.item_describes_any_item_in_akeyless/.Item describes any item in AKEYLESS.(
                        access_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        access_request_status = '0', 
                        auto_rotate = True, 
                        bastion_details = akeyless.models.bastions_list.BastionsList(
                            clusters = [
                                akeyless.models.bastion_list_entry.BastionListEntry(
                                    access_id = '0', 
                                    allowed_access_ids = [
                                        '0'
                                        ], 
                                    allowed_urls = [
                                        '0'
                                        ], 
                                    allowed_urls_per_instance = {
                                        'key' : [
                                            '0'
                                            ]
                                        }, 
                                    cluster_name = '0', 
                                    display_name = '0', 
                                    last_report = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], ), 
                        cert_issuer_signer_key_name = '0', 
                        certificate_issue_details = akeyless.models.certificate_issue_info_defines_certificate_issuer_info/.CertificateIssueInfo defines Certificate Issuer info.(
                            cert_issuer_type = '0', 
                            max_ttl = 56, 
                            pki_cert_issuer_details = akeyless.models.pki_certificate_issue_details_defines_pki_certificate_details/.PKICertificateIssueDetails defines PKI certificate details.(
                                allow_any_name = True, 
                                allow_subdomains = True, 
                                allowed_domains_list = [
                                    '0'
                                    ], 
                                allowed_uri_sans = [
                                    '0'
                                    ], 
                                basic_constraints_valid_for_non_ca = True, 
                                certificate_authority_mode = '0', 
                                client_flag = True, 
                                code_signing_flag = True, 
                                country = [
                                    '0'
                                    ], 
                                destination_path = '0', 
                                enforce_hostnames = True, 
                                expiration_events = [
                                    akeyless.models.certificate_expiration_event.CertificateExpirationEvent(
                                        seconds_before = 56, )
                                    ], 
                                gw_cluster_url = '0', 
                                is_ca = True, 
                                key_bits = 56, 
                                key_type = '0', 
                                key_usage_list = [
                                    '0'
                                    ], 
                                locality = [
                                    '0'
                                    ], 
                                not_before_duration = 56, 
                                organization_list = [
                                    '0'
                                    ], 
                                organization_unit_list = [
                                    '0'
                                    ], 
                                postal_code = [
                                    '0'
                                    ], 
                                protect_generated_certificates = True, 
                                province = [
                                    '0'
                                    ], 
                                require_cn = True, 
                                server_flag = True, 
                                street_address = [
                                    '0'
                                    ], ), 
                            ssh_cert_issuer_details = akeyless.models.ssh_certificate_issue_details_defines_ssh_certificate_details/.SSHCertificateIssueDetails defines SSH certificate details.(
                                allowed_domains = [
                                    '0'
                                    ], 
                                allowed_user_key_lengths = {
                                    'key' : 56
                                    }, 
                                allowed_users = [
                                    '0'
                                    ], 
                                cert_type = 56, 
                                critical_options = {
                                    'key' : '0'
                                    }, 
                                extensions = {
                                    'key' : '0'
                                    }, 
                                principals = [
                                    '0'
                                    ], 
                                static_key_id = '0', ), ), 
                        certificates = '0', 
                        client_permissions = [
                            '0'
                            ], 
                        creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        customer_fragment_id = '0', 
                        delete_protection = True, 
                        deletion_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        display_id = '0', 
                        gateway_details = [
                            akeyless.models.gateway_basic_info.GatewayBasicInfo(
                                cluster_display_name = '0', 
                                cluster_id = 56, 
                                cluster_name = '0', 
                                cluster_url = '0', )
                            ], 
                        is_access_request_enabled = True, 
                        is_enabled = True, 
                        item_accessibility = 56, 
                        item_general_info = akeyless.models.item_general_info_defines_item_general_info/.ItemGeneralInfo defines item general info.(
                            cert_issue_details = akeyless.models.certificate_issue_info_defines_certificate_issuer_info/.CertificateIssueInfo defines Certificate Issuer info.(
                                cert_issuer_type = '0', 
                                max_ttl = 56, ), 
                            certificate_chain_info = akeyless.models.certificate_chain_info.CertificateChainInfo(
                                certificate_chain = [
                                    akeyless.models.certificate_info.CertificateInfo(
                                        ext_key_usage = [
                                            56
                                            ], 
                                        key_usage = 56, 
                                        dns_names = [
                                            '0'
                                            ], 
                                        email_addresses = [
                                            '0'
                                            ], 
                                        ip_addresses = [
                                            '0'
                                            ], 
                                        is_ca = True, 
                                        issuer = akeyless.models.name.Name(
                                            country = [
                                                '0'
                                                ], 
                                            extra_names = [
                                                akeyless.models.attribute_type_and_value.AttributeTypeAndValue(
                                                    type = [
                                                        56
                                                        ], 
                                                    value = akeyless.models.value.Value(), )
                                                ], 
                                            locality = [
                                                '0'
                                                ], 
                                            names = [
                                                akeyless.models.attribute_type_and_value.AttributeTypeAndValue(
                                                    type = [
                                                        56
                                                        ], 
                                                    value = akeyless.models.value.Value(), )
                                                ], 
                                            serial_number = '0', 
                                            street_address = [
                                                '0'
                                                ], ), 
                                        issuing_certificate_url = [
                                            '0'
                                            ], 
                                        key_size = 56, 
                                        not_after = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        not_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        ocsp_server = [
                                            '0'
                                            ], 
                                        public_key_algorithm_name = '0', 
                                        serial_number = '0', 
                                        sha_1_fingerprint = '0', 
                                        sha_256_fingerprint = '0', 
                                        signature = '0', 
                                        signature_algorithm_name = '0', 
                                        subject = akeyless.models.name.Name(
                                            serial_number = '0', ), 
                                        subject_public_key = '0', 
                                        uris = [
                                            '0'
                                            ], 
                                        version = 56, )
                                    ], 
                                certificate_format = '0', 
                                certificate_issuer_name = '0', 
                                certificate_pem = '0', 
                                certificate_status = '0', ), 
                            classic_key_details = akeyless.models.classic_key_details_info.ClassicKeyDetailsInfo(
                                classic_key_attributes = {
                                    'key' : [
                                        '0'
                                        ]
                                    }, 
                                classic_key_id = '0', 
                                gw_cluster_id = 56, 
                                is_provided_by_user = True, 
                                is_unexportable = True, 
                                key_state = '0', 
                                key_type = '0', 
                                last_error = '0', 
                                public_key = '0', 
                                target_alias_helper = '0', 
                                target_types = [
                                    '0'
                                    ], 
                                targets = [
                                    akeyless.models.classic_key_target_info.ClassicKeyTargetInfo(
                                        external_kms_id = akeyless.models.external_kms_key_id.ExternalKMSKeyId(
                                            key_id = '0', 
                                            key_reference = '0', ), 
                                        key_purpose = [
                                            '0'
                                            ], 
                                        key_status = akeyless.models.classic_key_status_info.ClassicKeyStatusInfo(
                                            error_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            last_error = '0', 
                                            last_status = '0', 
                                            version = 56, ), 
                                        target_assoc_id = '0', 
                                        target_type = '0', )
                                    ], ), 
                            cluster_gw_url = '0', 
                            display_metadata = '0', 
                            dynamic_secret_producer_details = akeyless.models.dynamic_secret_producer_info.DynamicSecretProducerInfo(
                                failure_message = '0', 
                                gw_cluster_id = 56, 
                                k8s_allowed_namespaces = '0', 
                                k8s_dynamic_mode = True, 
                                producer_last_keep_alive = '0', 
                                producer_metadata = '0', 
                                producer_status = '0', 
                                producer_type = '0', ), 
                            importer_info = akeyless.models.importer_info.ImporterInfo(
                                external_item_id = '0', 
                                version = 56, ), 
                            password_policy = akeyless.models.password_policy_info.PasswordPolicyInfo(
                                password_length = 56, 
                                use_capital_letters = True, 
                                use_lower_letters = True, 
                                use_numbers = True, 
                                use_special_characters = True, ), 
                            rotated_secret_details = akeyless.models.rotated_secret_details_info.RotatedSecretDetailsInfo(
                                delete_previous_version_in_days = 56, 
                                gw_cluster_id = 56, 
                                last_rotation_error = '0', 
                                number_of_versions_to_save = 56, 
                                rotation_hour = 56, 
                                rotation_interval_min = True, 
                                rotation_statement = '0', 
                                rotator_creds_type = '0', 
                                rotator_status = '0', 
                                rotator_type = '0', ), 
                            secure_remote_access_details = akeyless.models.secure_remote_access.SecureRemoteAccess(
                                account_id = '0', 
                                allow_port_forwarding = True, 
                                allow_providing_external_username = True, 
                                bastion_api = '0', 
                                bastion_issuer = '0', 
                                bastion_issuer_id = 56, 
                                bastion_ssh = '0', 
                                category = '0', 
                                dashboard_url = '0', 
                                db_name = '0', 
                                domain = '0', 
                                enable = True, 
                                endpoint = '0', 
                                host = [
                                    '0'
                                    ], 
                                is_cli = True, 
                                is_web = True, 
                                isolated = True, 
                                native = True, 
                                rdp_user = '0', 
                                region = '0', 
                                rotate_after_disconnect = True, 
                                schema = '0', 
                                ssh_password = True, 
                                ssh_private_key = True, 
                                ssh_user = '0', 
                                url = '0', 
                                use_internal_bastion = True, 
                                web_proxy = True, ), 
                            static_secret_info = akeyless.models.static_secret_details_info.StaticSecretDetailsInfo(
                                username = '0', 
                                website = '0', 
                                websites = [
                                    '0'
                                    ], ), 
                            tokenizer_info = akeyless.models.tokenizer_info.TokenizerInfo(
                                vaultless_tokenizer_info = akeyless.models.vaultless_tokenizer_info.VaultlessTokenizerInfo(
                                    email_tokenizer_info = akeyless.models.email_tokenizer_info.EmailTokenizerInfo(
                                        domain_suffix_length = 56, 
                                        fixed_domain_suffix = '0', 
                                        keep_prefix_length = 56, ), 
                                    key_name = '0', 
                                    regexp_tokenizer_info = akeyless.models.regexp_tokenizer_info.RegexpTokenizerInfo(
                                        alphabet = '0', 
                                        decoding_template = '0', 
                                        encoding_template = '0', 
                                        pattern = '0', ), 
                                    template_type = '0', 
                                    tweak = '0', 
                                    tweak_type = '0', ), ), ), 
                        item_id = 56, 
                        item_metadata = '0', 
                        item_name = '0', 
                        item_size = 56, 
                        item_state = '0', 
                        item_sub_type = '0', 
                        item_tags = [
                            '0'
                            ], 
                        item_targets_assoc = [
                            akeyless.models.item_target_association_includes_details_of_an_association_between_an_item.ItemTargetAssociation includes details of an association between an item(
                                assoc_id = '0', 
                                attributes = {
                                    'key' : '0'
                                    }, 
                                target_id = 56, 
                                target_name = '0', 
                                target_type = '0', )
                            ], 
                        item_type = '0', 
                        item_versions = [
                            akeyless.models.item_version_describes_an_item_version_in_akeyless/.ItemVersion describes an item version in AKEYLESS.(
                                access_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                customer_fragment_id = '0', 
                                deletion_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                item_version_state = '0', 
                                modification_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                protection_key_name = '0', 
                                version = 56, 
                                with_customer_fragment = True, )
                            ], 
                        last_version = 56, 
                        linked_details = akeyless.models.linked_details.LinkedDetails(
                            hosts = {
                                'key' : '0'
                                }, ), 
                        modification_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        next_rotation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        protection_key_name = '0', 
                        protection_key_type = '0', 
                        public_value = '0', 
                        rotation_interval = 56, 
                        shared_by = akeyless.models.rule_assigner.RuleAssigner(
                            access_id = '0', 
                            unique_id = '0', ), 
                        target_versions = [
                            akeyless.models.target_item_version_describes_an_item_version_in_akeyless/.TargetItemVersion describes an item version in AKEYLESS.(
                                access_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                customer_fragment_id = '0', 
                                deletion_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                item_version_state = '0', 
                                latest_version = True, 
                                modification_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                protection_key_name = '0', 
                                target_name = '0', 
                                version = 56, 
                                with_customer_fragment = True, )
                            ], 
                        with_customer_fragment = True, )
                    ], 
                next_page = '0'
            )
        else :
            return ListItemsOutput(
        )

    def testListItemsOutput(self):
        """Test ListItemsOutput"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
