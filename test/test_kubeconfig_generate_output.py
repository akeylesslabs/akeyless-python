# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import akeyless
from akeyless.models.kubeconfig_generate_output import KubeconfigGenerateOutput  # noqa: E501
from akeyless.rest import ApiException

class TestKubeconfigGenerateOutput(unittest.TestCase):
    """KubeconfigGenerateOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test KubeconfigGenerateOutput
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = akeyless.models.kubeconfig_generate_output.KubeconfigGenerateOutput()  # noqa: E501
        if include_optional :
            return KubeconfigGenerateOutput(
                conflicted_clusters_names = [
                    '0'
                    ], 
                data = akeyless.models.kube_config_value_represents_the_entire_kubeconfig_structure/.KubeConfigValue represents the entire Kubeconfig structure.(
                    api_version = '0', 
                    clusters = [
                        akeyless.models.kubeconfig_named_cluster_represents_a_named_cluster_in_the_kubeconfig/.KubeconfigNamedCluster represents a named cluster in the Kubeconfig.(
                            cluster = akeyless.models.kubeconfig_cluster_represents_the_cluster_details/.KubeconfigCluster represents the cluster details.(
                                certificate_authority = '0', 
                                certificate_authority_data = '0', 
                                server = '0', ), 
                            name = '0', )
                        ], 
                    contexts = [
                        akeyless.models.kubeconfig_named_context_represents_a_named_context_in_the_kubeconfig/.KubeconfigNamedContext represents a named context in the Kubeconfig.(
                            context = akeyless.models.kubeconfig_context_represents_the_context_details/.KubeconfigContext represents the context details.(
                                namespace = '0', 
                                user = '0', ), 
                            name = '0', )
                        ], 
                    current_context = '0', 
                    kind = '0', 
                    users = [
                        akeyless.models.kubeconfig_user_represents_a_user_entry_in_the_kubeconfig/.KubeconfigUser represents a user entry in the Kubeconfig.(
                            name = '0', 
                            user = akeyless.models.kubeconfig_user_exec_represents_the_exec_configuration_for_a_user/.KubeconfigUserExec represents the exec configuration for a user.(
                                exec = akeyless.models.kubeconfig_exec_represents_the_exec_command_configuration/.KubeconfigExec represents the exec command configuration.(
                                    api_version = '0', 
                                    args = [
                                        '0'
                                        ], 
                                    command = '0', 
                                    interactive_mode = '0', ), ), )
                        ], ), 
                errors = [
                    '0'
                    ]
            )
        else :
            return KubeconfigGenerateOutput(
        )

    def testKubeconfigGenerateOutput(self):
        """Test KubeconfigGenerateOutput"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
