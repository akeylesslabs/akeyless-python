# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import akeyless
from akeyless.models.dynamic_secret_create_custom import DynamicSecretCreateCustom  # noqa: E501
from akeyless.rest import ApiException

class TestDynamicSecretCreateCustom(unittest.TestCase):
    """DynamicSecretCreateCustom unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test DynamicSecretCreateCustom
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = akeyless.models.dynamic_secret_create_custom.DynamicSecretCreateCustom()  # noqa: E501
        if include_optional :
            return DynamicSecretCreateCustom(
                admin_rotation_interval_days = 56, 
                create_sync_url = '0', 
                delete_protection = '0', 
                description = '0', 
                enable_admin_rotation = True, 
                json = True, 
                name = '0', 
                payload = '0', 
                producer_encryption_key_name = '0', 
                revoke_sync_url = '0', 
                rotate_sync_url = '0', 
                tags = [
                    '0'
                    ], 
                timeout_sec = 56, 
                token = '0', 
                uid_token = '0', 
                user_ttl = '60m'
            )
        else :
            return DynamicSecretCreateCustom(
                create_sync_url = '0',
                name = '0',
                revoke_sync_url = '0',
        )

    def testDynamicSecretCreateCustom(self):
        """Test DynamicSecretCreateCustom"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
