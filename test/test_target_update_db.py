# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import akeyless
from akeyless.models.target_update_db import TargetUpdateDB  # noqa: E501
from akeyless.rest import ApiException

class TestTargetUpdateDB(unittest.TestCase):
    """TargetUpdateDB unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test TargetUpdateDB
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = akeyless.models.target_update_db.TargetUpdateDB()  # noqa: E501
        if include_optional :
            return TargetUpdateDB(
                db_defined_connection_type = '0', 
                azure_client_id = '0', 
                azure_client_secret = '0', 
                azure_tenant_id = '0', 
                cloud_service_provider = '0', 
                cluster_mode = True, 
                comment = '0', 
                connection_type = 'credentials', 
                db_name = '0', 
                db_server_certificates = '0', 
                db_server_name = '0', 
                db_type = '0', 
                description = '0', 
                host = '0', 
                json = True, 
                keep_prev_version = '0', 
                key = '0', 
                max_versions = '0', 
                mongodb_atlas = True, 
                mongodb_atlas_api_private_key = '0', 
                mongodb_atlas_api_public_key = '0', 
                mongodb_atlas_project_id = '0', 
                mongodb_default_auth_db = '0', 
                mongodb_uri_options = '0', 
                name = '0', 
                new_name = '0', 
                oracle_service_name = '0', 
                port = '0', 
                pwd = '0', 
                snowflake_account = '0', 
                snowflake_api_private_key = '0', 
                snowflake_api_private_key_password = '0', 
                ssl = True, 
                ssl_certificate = '0', 
                token = '0', 
                uid_token = '0', 
                user_name = '0'
            )
        else :
            return TargetUpdateDB(
                connection_type = 'credentials',
                db_type = '0',
                name = '0',
        )

    def testTargetUpdateDB(self):
        """Test TargetUpdateDB"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
