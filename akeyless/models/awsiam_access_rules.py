# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AWSIAMAccessRules(BaseModel):
    """
    AWSIAMAccessRules
    """ # noqa: E501
    account_id: Optional[List[StrictStr]] = Field(default=None, description="The list of account ids that the login is restricted to.")
    arn: Optional[List[StrictStr]] = Field(default=None, description="The list of ARNs that the login is restricted to.")
    resource_id: Optional[List[StrictStr]] = Field(default=None, description="The list of resource ids that the login is restricted to.")
    role_id: Optional[List[StrictStr]] = Field(default=None, description="The list of role ids that the login is restricted to.")
    role_name: Optional[List[StrictStr]] = Field(default=None, description="The list of role names that the login is restricted to.")
    sts_endpoint: Optional[StrictStr] = Field(default=None, description="The sts URL.")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="A unique identifier to distinguish different users")
    user_id: Optional[List[StrictStr]] = Field(default=None, description="The list of user ids that the login is restricted to.")
    user_name: Optional[List[StrictStr]] = Field(default=None, description="The list of user names that the login is restricted to.")
    __properties: ClassVar[List[str]] = ["account_id", "arn", "resource_id", "role_id", "role_name", "sts_endpoint", "unique_identifier", "user_id", "user_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AWSIAMAccessRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AWSIAMAccessRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "arn": obj.get("arn"),
            "resource_id": obj.get("resource_id"),
            "role_id": obj.get("role_id"),
            "role_name": obj.get("role_name"),
            "sts_endpoint": obj.get("sts_endpoint"),
            "unique_identifier": obj.get("unique_identifier"),
            "user_id": obj.get("user_id"),
            "user_name": obj.get("user_name")
        })
        return _obj


