# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.account_general_settings import AccountGeneralSettings
from akeyless.models.account_object_version_settings_output import AccountObjectVersionSettingsOutput
from akeyless.models.customer_full_address import CustomerFullAddress
from akeyless.models.sm_info import SmInfo
from akeyless.models.sra_info import SraInfo
from akeyless.models.system_access_creds_settings import SystemAccessCredsSettings
from typing import Optional, Set
from typing_extensions import Self

class GetAccountSettingsCommandOutput(BaseModel):
    """
    GetAccountSettingsCommandOutput
    """ # noqa: E501
    account_id: Optional[StrictStr] = None
    address: Optional[CustomerFullAddress] = None
    company_name: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    general_settings: Optional[AccountGeneralSettings] = None
    object_version_settings: Optional[AccountObjectVersionSettingsOutput] = None
    phone: Optional[StrictStr] = None
    secret_management: Optional[SmInfo] = None
    secure_remote_access: Optional[SraInfo] = None
    system_access_creds_settings: Optional[SystemAccessCredsSettings] = None
    __properties: ClassVar[List[str]] = ["account_id", "address", "company_name", "email", "general_settings", "object_version_settings", "phone", "secret_management", "secure_remote_access", "system_access_creds_settings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetAccountSettingsCommandOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of general_settings
        if self.general_settings:
            _dict['general_settings'] = self.general_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_version_settings
        if self.object_version_settings:
            _dict['object_version_settings'] = self.object_version_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secret_management
        if self.secret_management:
            _dict['secret_management'] = self.secret_management.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secure_remote_access
        if self.secure_remote_access:
            _dict['secure_remote_access'] = self.secure_remote_access.to_dict()
        # override the default output from pydantic by calling `to_dict()` of system_access_creds_settings
        if self.system_access_creds_settings:
            _dict['system_access_creds_settings'] = self.system_access_creds_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetAccountSettingsCommandOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "address": CustomerFullAddress.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "company_name": obj.get("company_name"),
            "email": obj.get("email"),
            "general_settings": AccountGeneralSettings.from_dict(obj["general_settings"]) if obj.get("general_settings") is not None else None,
            "object_version_settings": AccountObjectVersionSettingsOutput.from_dict(obj["object_version_settings"]) if obj.get("object_version_settings") is not None else None,
            "phone": obj.get("phone"),
            "secret_management": SmInfo.from_dict(obj["secret_management"]) if obj.get("secret_management") is not None else None,
            "secure_remote_access": SraInfo.from_dict(obj["secure_remote_access"]) if obj.get("secure_remote_access") is not None else None,
            "system_access_creds_settings": SystemAccessCredsSettings.from_dict(obj["system_access_creds_settings"]) if obj.get("system_access_creds_settings") is not None else None
        })
        return _obj


