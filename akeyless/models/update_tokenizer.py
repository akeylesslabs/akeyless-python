# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class UpdateTokenizer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'add_tag': 'list[str]',
        'alphabet': 'str',
        'decryption_template': 'str',
        'encryption_key_name': 'str',
        'encryption_template': 'str',
        'name': 'str',
        'new_metadata': 'str',
        'new_name': 'str',
        'pattern': 'str',
        'rm_tag': 'list[str]',
        'template_type': 'str',
        'token': 'str',
        'tokenizer_type': 'str',
        'tweak_type': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'add_tag': 'add-tag',
        'alphabet': 'alphabet',
        'decryption_template': 'decryption-template',
        'encryption_key_name': 'encryption-key-name',
        'encryption_template': 'encryption-template',
        'name': 'name',
        'new_metadata': 'new-metadata',
        'new_name': 'new-name',
        'pattern': 'pattern',
        'rm_tag': 'rm-tag',
        'template_type': 'template-type',
        'token': 'token',
        'tokenizer_type': 'tokenizer-type',
        'tweak_type': 'tweak-type',
        'uid_token': 'uid-token'
    }

    def __init__(self, add_tag=None, alphabet=None, decryption_template=None, encryption_key_name=None, encryption_template=None, name=None, new_metadata='default_metadata', new_name=None, pattern=None, rm_tag=None, template_type=None, token=None, tokenizer_type=None, tweak_type=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """UpdateTokenizer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._add_tag = None
        self._alphabet = None
        self._decryption_template = None
        self._encryption_key_name = None
        self._encryption_template = None
        self._name = None
        self._new_metadata = None
        self._new_name = None
        self._pattern = None
        self._rm_tag = None
        self._template_type = None
        self._token = None
        self._tokenizer_type = None
        self._tweak_type = None
        self._uid_token = None
        self.discriminator = None

        if add_tag is not None:
            self.add_tag = add_tag
        if alphabet is not None:
            self.alphabet = alphabet
        if decryption_template is not None:
            self.decryption_template = decryption_template
        if encryption_key_name is not None:
            self.encryption_key_name = encryption_key_name
        if encryption_template is not None:
            self.encryption_template = encryption_template
        self.name = name
        if new_metadata is not None:
            self.new_metadata = new_metadata
        if new_name is not None:
            self.new_name = new_name
        if pattern is not None:
            self.pattern = pattern
        if rm_tag is not None:
            self.rm_tag = rm_tag
        self.template_type = template_type
        if token is not None:
            self.token = token
        self.tokenizer_type = tokenizer_type
        if tweak_type is not None:
            self.tweak_type = tweak_type
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def add_tag(self):
        """Gets the add_tag of this UpdateTokenizer.  # noqa: E501

        List of the new tags that will be attached to this item  # noqa: E501

        :return: The add_tag of this UpdateTokenizer.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_tag

    @add_tag.setter
    def add_tag(self, add_tag):
        """Sets the add_tag of this UpdateTokenizer.

        List of the new tags that will be attached to this item  # noqa: E501

        :param add_tag: The add_tag of this UpdateTokenizer.  # noqa: E501
        :type: list[str]
        """

        self._add_tag = add_tag

    @property
    def alphabet(self):
        """Gets the alphabet of this UpdateTokenizer.  # noqa: E501

        Alphabet to use in regexp vaultless tokenization  # noqa: E501

        :return: The alphabet of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._alphabet

    @alphabet.setter
    def alphabet(self, alphabet):
        """Sets the alphabet of this UpdateTokenizer.

        Alphabet to use in regexp vaultless tokenization  # noqa: E501

        :param alphabet: The alphabet of this UpdateTokenizer.  # noqa: E501
        :type: str
        """

        self._alphabet = alphabet

    @property
    def decryption_template(self):
        """Gets the decryption_template of this UpdateTokenizer.  # noqa: E501

        The Decryption output template to use in regexp vaultless tokenization  # noqa: E501

        :return: The decryption_template of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._decryption_template

    @decryption_template.setter
    def decryption_template(self, decryption_template):
        """Sets the decryption_template of this UpdateTokenizer.

        The Decryption output template to use in regexp vaultless tokenization  # noqa: E501

        :param decryption_template: The decryption_template of this UpdateTokenizer.  # noqa: E501
        :type: str
        """

        self._decryption_template = decryption_template

    @property
    def encryption_key_name(self):
        """Gets the encryption_key_name of this UpdateTokenizer.  # noqa: E501

        AES key name to use in vaultless tokenization  # noqa: E501

        :return: The encryption_key_name of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._encryption_key_name

    @encryption_key_name.setter
    def encryption_key_name(self, encryption_key_name):
        """Sets the encryption_key_name of this UpdateTokenizer.

        AES key name to use in vaultless tokenization  # noqa: E501

        :param encryption_key_name: The encryption_key_name of this UpdateTokenizer.  # noqa: E501
        :type: str
        """

        self._encryption_key_name = encryption_key_name

    @property
    def encryption_template(self):
        """Gets the encryption_template of this UpdateTokenizer.  # noqa: E501

        The Encryption output template to use in regexp vaultless tokenization  # noqa: E501

        :return: The encryption_template of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._encryption_template

    @encryption_template.setter
    def encryption_template(self, encryption_template):
        """Sets the encryption_template of this UpdateTokenizer.

        The Encryption output template to use in regexp vaultless tokenization  # noqa: E501

        :param encryption_template: The encryption_template of this UpdateTokenizer.  # noqa: E501
        :type: str
        """

        self._encryption_template = encryption_template

    @property
    def name(self):
        """Gets the name of this UpdateTokenizer.  # noqa: E501

        Current item name  # noqa: E501

        :return: The name of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateTokenizer.

        Current item name  # noqa: E501

        :param name: The name of this UpdateTokenizer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def new_metadata(self):
        """Gets the new_metadata of this UpdateTokenizer.  # noqa: E501

        New item metadata  # noqa: E501

        :return: The new_metadata of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._new_metadata

    @new_metadata.setter
    def new_metadata(self, new_metadata):
        """Sets the new_metadata of this UpdateTokenizer.

        New item metadata  # noqa: E501

        :param new_metadata: The new_metadata of this UpdateTokenizer.  # noqa: E501
        :type: str
        """

        self._new_metadata = new_metadata

    @property
    def new_name(self):
        """Gets the new_name of this UpdateTokenizer.  # noqa: E501

        New item name  # noqa: E501

        :return: The new_name of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._new_name

    @new_name.setter
    def new_name(self, new_name):
        """Sets the new_name of this UpdateTokenizer.

        New item name  # noqa: E501

        :param new_name: The new_name of this UpdateTokenizer.  # noqa: E501
        :type: str
        """

        self._new_name = new_name

    @property
    def pattern(self):
        """Gets the pattern of this UpdateTokenizer.  # noqa: E501

        Pattern to use in regexp vaultless tokenization  # noqa: E501

        :return: The pattern of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this UpdateTokenizer.

        Pattern to use in regexp vaultless tokenization  # noqa: E501

        :param pattern: The pattern of this UpdateTokenizer.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def rm_tag(self):
        """Gets the rm_tag of this UpdateTokenizer.  # noqa: E501

        List of the existent tags that will be removed from this item  # noqa: E501

        :return: The rm_tag of this UpdateTokenizer.  # noqa: E501
        :rtype: list[str]
        """
        return self._rm_tag

    @rm_tag.setter
    def rm_tag(self, rm_tag):
        """Sets the rm_tag of this UpdateTokenizer.

        List of the existent tags that will be removed from this item  # noqa: E501

        :param rm_tag: The rm_tag of this UpdateTokenizer.  # noqa: E501
        :type: list[str]
        """

        self._rm_tag = rm_tag

    @property
    def template_type(self):
        """Gets the template_type of this UpdateTokenizer.  # noqa: E501

        Which template type this tokenizer is used for [SSN,CreditCard,USPhoneNumber,Email,Regexp]  # noqa: E501

        :return: The template_type of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this UpdateTokenizer.

        Which template type this tokenizer is used for [SSN,CreditCard,USPhoneNumber,Email,Regexp]  # noqa: E501

        :param template_type: The template_type of this UpdateTokenizer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and template_type is None:  # noqa: E501
            raise ValueError("Invalid value for `template_type`, must not be `None`")  # noqa: E501

        self._template_type = template_type

    @property
    def token(self):
        """Gets the token of this UpdateTokenizer.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this UpdateTokenizer.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this UpdateTokenizer.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def tokenizer_type(self):
        """Gets the tokenizer_type of this UpdateTokenizer.  # noqa: E501

        Tokenizer type  # noqa: E501

        :return: The tokenizer_type of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._tokenizer_type

    @tokenizer_type.setter
    def tokenizer_type(self, tokenizer_type):
        """Sets the tokenizer_type of this UpdateTokenizer.

        Tokenizer type  # noqa: E501

        :param tokenizer_type: The tokenizer_type of this UpdateTokenizer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tokenizer_type is None:  # noqa: E501
            raise ValueError("Invalid value for `tokenizer_type`, must not be `None`")  # noqa: E501

        self._tokenizer_type = tokenizer_type

    @property
    def tweak_type(self):
        """Gets the tweak_type of this UpdateTokenizer.  # noqa: E501

        The tweak type to use in vaultless tokenization [Supplied, Generated, Internal, Masking]  # noqa: E501

        :return: The tweak_type of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._tweak_type

    @tweak_type.setter
    def tweak_type(self, tweak_type):
        """Sets the tweak_type of this UpdateTokenizer.

        The tweak type to use in vaultless tokenization [Supplied, Generated, Internal, Masking]  # noqa: E501

        :param tweak_type: The tweak_type of this UpdateTokenizer.  # noqa: E501
        :type: str
        """

        self._tweak_type = tweak_type

    @property
    def uid_token(self):
        """Gets the uid_token of this UpdateTokenizer.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this UpdateTokenizer.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this UpdateTokenizer.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this UpdateTokenizer.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateTokenizer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateTokenizer):
            return True

        return self.to_dict() != other.to_dict()
