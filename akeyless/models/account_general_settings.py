# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class AccountGeneralSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'data_protection_section': 'DataProtectionSection',
        'enable_request_for_access': 'bool',
        'password_policy': 'PasswordPolicyInfo'
    }

    attribute_map = {
        'data_protection_section': 'data_protection_section',
        'enable_request_for_access': 'enable_request_for_access',
        'password_policy': 'password_policy'
    }

    def __init__(self, data_protection_section=None, enable_request_for_access=None, password_policy=None, local_vars_configuration=None):  # noqa: E501
        """AccountGeneralSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._data_protection_section = None
        self._enable_request_for_access = None
        self._password_policy = None
        self.discriminator = None

        if data_protection_section is not None:
            self.data_protection_section = data_protection_section
        if enable_request_for_access is not None:
            self.enable_request_for_access = enable_request_for_access
        if password_policy is not None:
            self.password_policy = password_policy

    @property
    def data_protection_section(self):
        """Gets the data_protection_section of this AccountGeneralSettings.  # noqa: E501


        :return: The data_protection_section of this AccountGeneralSettings.  # noqa: E501
        :rtype: DataProtectionSection
        """
        return self._data_protection_section

    @data_protection_section.setter
    def data_protection_section(self, data_protection_section):
        """Sets the data_protection_section of this AccountGeneralSettings.


        :param data_protection_section: The data_protection_section of this AccountGeneralSettings.  # noqa: E501
        :type: DataProtectionSection
        """

        self._data_protection_section = data_protection_section

    @property
    def enable_request_for_access(self):
        """Gets the enable_request_for_access of this AccountGeneralSettings.  # noqa: E501


        :return: The enable_request_for_access of this AccountGeneralSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_request_for_access

    @enable_request_for_access.setter
    def enable_request_for_access(self, enable_request_for_access):
        """Sets the enable_request_for_access of this AccountGeneralSettings.


        :param enable_request_for_access: The enable_request_for_access of this AccountGeneralSettings.  # noqa: E501
        :type: bool
        """

        self._enable_request_for_access = enable_request_for_access

    @property
    def password_policy(self):
        """Gets the password_policy of this AccountGeneralSettings.  # noqa: E501


        :return: The password_policy of this AccountGeneralSettings.  # noqa: E501
        :rtype: PasswordPolicyInfo
        """
        return self._password_policy

    @password_policy.setter
    def password_policy(self, password_policy):
        """Sets the password_policy of this AccountGeneralSettings.


        :param password_policy: The password_policy of this AccountGeneralSettings.  # noqa: E501
        :type: PasswordPolicyInfo
        """

        self._password_policy = password_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountGeneralSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountGeneralSettings):
            return True

        return self.to_dict() != other.to_dict()
