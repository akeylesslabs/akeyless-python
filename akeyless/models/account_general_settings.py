# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.allowed_ip_settings import AllowedIpSettings
from akeyless.models.data_protection_section import DataProtectionSection
from akeyless.models.default_home_page import DefaultHomePage
from akeyless.models.dynamic_secret_max_ttl import DynamicSecretMaxTtl
from akeyless.models.password_expiration_info import PasswordExpirationInfo
from akeyless.models.password_policy_info import PasswordPolicyInfo
from akeyless.models.password_score_setting import PasswordScoreSetting
from akeyless.models.rotation_secret_max_interval import RotationSecretMaxInterval
from akeyless.models.sharing_policy_info import SharingPolicyInfo
from akeyless.models.usage_event_setting import UsageEventSetting
from typing import Optional, Set
from typing_extensions import Self

class AccountGeneralSettings(BaseModel):
    """
    AccountGeneralSettings describes general settings for an account
    """ # noqa: E501
    account_default_key_item_id: Optional[StrictInt] = Field(default=None, description="AccountDefaultKeyItemID is the item ID of the DFC key item configured as the default protection key")
    account_default_key_name: Optional[StrictStr] = Field(default=None, description="AccountDefaultKeyName is the name of the DFC key item configured as the default key This is here simply for the response to include the item name in addition to the display ID so the client can properly show this to the user. It will not be saved to the DB, only the AccountDefaultKeyItemID will.")
    allowed_clients_ips: Optional[AllowedIpSettings] = None
    allowed_gateways_ips: Optional[AllowedIpSettings] = None
    auth_usage_event: Optional[UsageEventSetting] = None
    data_protection_section: Optional[DataProtectionSection] = None
    default_home_page: Optional[DefaultHomePage] = None
    dynamic_secret_max_ttl: Optional[DynamicSecretMaxTtl] = None
    enable_request_for_access: Optional[StrictBool] = None
    invalid_characters: Optional[StrictStr] = Field(default=None, description="InvalidCharacters is the invalid characters for items/targets/roles/auths/notifier_forwarder naming convention")
    item_usage_event: Optional[UsageEventSetting] = None
    lock_default_key: Optional[StrictBool] = Field(default=None, description="LockDefaultKey determines whether the configured default key can be updated by end-users on a per-request basis true - all requests use the configured default key false - every request can determine its protection key (default) nil - change nothing (every request can determine its protection key (default)) This parameter is only relevant if AccountDefaultKeyItemID is not empty")
    password_expiration_info: Optional[PasswordExpirationInfo] = None
    password_policy: Optional[PasswordPolicyInfo] = None
    password_score: Optional[PasswordScoreSetting] = None
    protect_items_by_default: Optional[StrictBool] = None
    rotation_secret_max_interval: Optional[RotationSecretMaxInterval] = None
    sharing_policy: Optional[SharingPolicyInfo] = None
    __properties: ClassVar[List[str]] = ["account_default_key_item_id", "account_default_key_name", "allowed_clients_ips", "allowed_gateways_ips", "auth_usage_event", "data_protection_section", "default_home_page", "dynamic_secret_max_ttl", "enable_request_for_access", "invalid_characters", "item_usage_event", "lock_default_key", "password_expiration_info", "password_policy", "password_score", "protect_items_by_default", "rotation_secret_max_interval", "sharing_policy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccountGeneralSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of allowed_clients_ips
        if self.allowed_clients_ips:
            _dict['allowed_clients_ips'] = self.allowed_clients_ips.to_dict()
        # override the default output from pydantic by calling `to_dict()` of allowed_gateways_ips
        if self.allowed_gateways_ips:
            _dict['allowed_gateways_ips'] = self.allowed_gateways_ips.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auth_usage_event
        if self.auth_usage_event:
            _dict['auth_usage_event'] = self.auth_usage_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data_protection_section
        if self.data_protection_section:
            _dict['data_protection_section'] = self.data_protection_section.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_home_page
        if self.default_home_page:
            _dict['default_home_page'] = self.default_home_page.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dynamic_secret_max_ttl
        if self.dynamic_secret_max_ttl:
            _dict['dynamic_secret_max_ttl'] = self.dynamic_secret_max_ttl.to_dict()
        # override the default output from pydantic by calling `to_dict()` of item_usage_event
        if self.item_usage_event:
            _dict['item_usage_event'] = self.item_usage_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of password_expiration_info
        if self.password_expiration_info:
            _dict['password_expiration_info'] = self.password_expiration_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of password_policy
        if self.password_policy:
            _dict['password_policy'] = self.password_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of password_score
        if self.password_score:
            _dict['password_score'] = self.password_score.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rotation_secret_max_interval
        if self.rotation_secret_max_interval:
            _dict['rotation_secret_max_interval'] = self.rotation_secret_max_interval.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sharing_policy
        if self.sharing_policy:
            _dict['sharing_policy'] = self.sharing_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccountGeneralSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_default_key_item_id": obj.get("account_default_key_item_id"),
            "account_default_key_name": obj.get("account_default_key_name"),
            "allowed_clients_ips": AllowedIpSettings.from_dict(obj["allowed_clients_ips"]) if obj.get("allowed_clients_ips") is not None else None,
            "allowed_gateways_ips": AllowedIpSettings.from_dict(obj["allowed_gateways_ips"]) if obj.get("allowed_gateways_ips") is not None else None,
            "auth_usage_event": UsageEventSetting.from_dict(obj["auth_usage_event"]) if obj.get("auth_usage_event") is not None else None,
            "data_protection_section": DataProtectionSection.from_dict(obj["data_protection_section"]) if obj.get("data_protection_section") is not None else None,
            "default_home_page": DefaultHomePage.from_dict(obj["default_home_page"]) if obj.get("default_home_page") is not None else None,
            "dynamic_secret_max_ttl": DynamicSecretMaxTtl.from_dict(obj["dynamic_secret_max_ttl"]) if obj.get("dynamic_secret_max_ttl") is not None else None,
            "enable_request_for_access": obj.get("enable_request_for_access"),
            "invalid_characters": obj.get("invalid_characters"),
            "item_usage_event": UsageEventSetting.from_dict(obj["item_usage_event"]) if obj.get("item_usage_event") is not None else None,
            "lock_default_key": obj.get("lock_default_key"),
            "password_expiration_info": PasswordExpirationInfo.from_dict(obj["password_expiration_info"]) if obj.get("password_expiration_info") is not None else None,
            "password_policy": PasswordPolicyInfo.from_dict(obj["password_policy"]) if obj.get("password_policy") is not None else None,
            "password_score": PasswordScoreSetting.from_dict(obj["password_score"]) if obj.get("password_score") is not None else None,
            "protect_items_by_default": obj.get("protect_items_by_default"),
            "rotation_secret_max_interval": RotationSecretMaxInterval.from_dict(obj["rotation_secret_max_interval"]) if obj.get("rotation_secret_max_interval") is not None else None,
            "sharing_policy": SharingPolicyInfo.from_dict(obj["sharing_policy"]) if obj.get("sharing_policy") is not None else None
        })
        return _obj


