# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class AccountGeneralSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_default_key_item_id': 'int',
        'account_default_key_name': 'str',
        'data_protection_section': 'DataProtectionSection',
        'enable_request_for_access': 'bool',
        'invalid_characters': 'str',
        'lock_default_key': 'bool',
        'password_policy': 'PasswordPolicyInfo',
        'protect_items_by_default': 'bool',
        'sharing_policy': 'SharingPolicyInfo'
    }

    attribute_map = {
        'account_default_key_item_id': 'account_default_key_item_id',
        'account_default_key_name': 'account_default_key_name',
        'data_protection_section': 'data_protection_section',
        'enable_request_for_access': 'enable_request_for_access',
        'invalid_characters': 'invalid_characters',
        'lock_default_key': 'lock_default_key',
        'password_policy': 'password_policy',
        'protect_items_by_default': 'protect_items_by_default',
        'sharing_policy': 'sharing_policy'
    }

    def __init__(self, account_default_key_item_id=None, account_default_key_name=None, data_protection_section=None, enable_request_for_access=None, invalid_characters=None, lock_default_key=None, password_policy=None, protect_items_by_default=None, sharing_policy=None, local_vars_configuration=None):  # noqa: E501
        """AccountGeneralSettings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_default_key_item_id = None
        self._account_default_key_name = None
        self._data_protection_section = None
        self._enable_request_for_access = None
        self._invalid_characters = None
        self._lock_default_key = None
        self._password_policy = None
        self._protect_items_by_default = None
        self._sharing_policy = None
        self.discriminator = None

        if account_default_key_item_id is not None:
            self.account_default_key_item_id = account_default_key_item_id
        if account_default_key_name is not None:
            self.account_default_key_name = account_default_key_name
        if data_protection_section is not None:
            self.data_protection_section = data_protection_section
        if enable_request_for_access is not None:
            self.enable_request_for_access = enable_request_for_access
        if invalid_characters is not None:
            self.invalid_characters = invalid_characters
        if lock_default_key is not None:
            self.lock_default_key = lock_default_key
        if password_policy is not None:
            self.password_policy = password_policy
        if protect_items_by_default is not None:
            self.protect_items_by_default = protect_items_by_default
        if sharing_policy is not None:
            self.sharing_policy = sharing_policy

    @property
    def account_default_key_item_id(self):
        """Gets the account_default_key_item_id of this AccountGeneralSettings.  # noqa: E501

        AccountDefaultKeyItemID is the item ID of the DFC key item configured as the default protection key  # noqa: E501

        :return: The account_default_key_item_id of this AccountGeneralSettings.  # noqa: E501
        :rtype: int
        """
        return self._account_default_key_item_id

    @account_default_key_item_id.setter
    def account_default_key_item_id(self, account_default_key_item_id):
        """Sets the account_default_key_item_id of this AccountGeneralSettings.

        AccountDefaultKeyItemID is the item ID of the DFC key item configured as the default protection key  # noqa: E501

        :param account_default_key_item_id: The account_default_key_item_id of this AccountGeneralSettings.  # noqa: E501
        :type: int
        """

        self._account_default_key_item_id = account_default_key_item_id

    @property
    def account_default_key_name(self):
        """Gets the account_default_key_name of this AccountGeneralSettings.  # noqa: E501

        AccountDefaultKeyName is the name of the DFC key item configured as the default key This is here simply for the response to include the item name in addition to the display ID so the client can properly show this to the user. It will not be saved to the DB, only the AccountDefaultKeyItemID will.  # noqa: E501

        :return: The account_default_key_name of this AccountGeneralSettings.  # noqa: E501
        :rtype: str
        """
        return self._account_default_key_name

    @account_default_key_name.setter
    def account_default_key_name(self, account_default_key_name):
        """Sets the account_default_key_name of this AccountGeneralSettings.

        AccountDefaultKeyName is the name of the DFC key item configured as the default key This is here simply for the response to include the item name in addition to the display ID so the client can properly show this to the user. It will not be saved to the DB, only the AccountDefaultKeyItemID will.  # noqa: E501

        :param account_default_key_name: The account_default_key_name of this AccountGeneralSettings.  # noqa: E501
        :type: str
        """

        self._account_default_key_name = account_default_key_name

    @property
    def data_protection_section(self):
        """Gets the data_protection_section of this AccountGeneralSettings.  # noqa: E501


        :return: The data_protection_section of this AccountGeneralSettings.  # noqa: E501
        :rtype: DataProtectionSection
        """
        return self._data_protection_section

    @data_protection_section.setter
    def data_protection_section(self, data_protection_section):
        """Sets the data_protection_section of this AccountGeneralSettings.


        :param data_protection_section: The data_protection_section of this AccountGeneralSettings.  # noqa: E501
        :type: DataProtectionSection
        """

        self._data_protection_section = data_protection_section

    @property
    def enable_request_for_access(self):
        """Gets the enable_request_for_access of this AccountGeneralSettings.  # noqa: E501


        :return: The enable_request_for_access of this AccountGeneralSettings.  # noqa: E501
        :rtype: bool
        """
        return self._enable_request_for_access

    @enable_request_for_access.setter
    def enable_request_for_access(self, enable_request_for_access):
        """Sets the enable_request_for_access of this AccountGeneralSettings.


        :param enable_request_for_access: The enable_request_for_access of this AccountGeneralSettings.  # noqa: E501
        :type: bool
        """

        self._enable_request_for_access = enable_request_for_access

    @property
    def invalid_characters(self):
        """Gets the invalid_characters of this AccountGeneralSettings.  # noqa: E501

        InvalidCharacters is the invalid characters for items/targets/roles/auths/notifier_forwarder naming convention  # noqa: E501

        :return: The invalid_characters of this AccountGeneralSettings.  # noqa: E501
        :rtype: str
        """
        return self._invalid_characters

    @invalid_characters.setter
    def invalid_characters(self, invalid_characters):
        """Sets the invalid_characters of this AccountGeneralSettings.

        InvalidCharacters is the invalid characters for items/targets/roles/auths/notifier_forwarder naming convention  # noqa: E501

        :param invalid_characters: The invalid_characters of this AccountGeneralSettings.  # noqa: E501
        :type: str
        """

        self._invalid_characters = invalid_characters

    @property
    def lock_default_key(self):
        """Gets the lock_default_key of this AccountGeneralSettings.  # noqa: E501

        LockDefaultKey determines whether the configured default key can be updated by end-users on a per-request basis true - all requests use the configured default key false - every request can determine its protection key (default) nil - change nothing (every request can determine its protection key (default)) This parameter is only relevant if AccountDefaultKeyItemID is not empty  # noqa: E501

        :return: The lock_default_key of this AccountGeneralSettings.  # noqa: E501
        :rtype: bool
        """
        return self._lock_default_key

    @lock_default_key.setter
    def lock_default_key(self, lock_default_key):
        """Sets the lock_default_key of this AccountGeneralSettings.

        LockDefaultKey determines whether the configured default key can be updated by end-users on a per-request basis true - all requests use the configured default key false - every request can determine its protection key (default) nil - change nothing (every request can determine its protection key (default)) This parameter is only relevant if AccountDefaultKeyItemID is not empty  # noqa: E501

        :param lock_default_key: The lock_default_key of this AccountGeneralSettings.  # noqa: E501
        :type: bool
        """

        self._lock_default_key = lock_default_key

    @property
    def password_policy(self):
        """Gets the password_policy of this AccountGeneralSettings.  # noqa: E501


        :return: The password_policy of this AccountGeneralSettings.  # noqa: E501
        :rtype: PasswordPolicyInfo
        """
        return self._password_policy

    @password_policy.setter
    def password_policy(self, password_policy):
        """Sets the password_policy of this AccountGeneralSettings.


        :param password_policy: The password_policy of this AccountGeneralSettings.  # noqa: E501
        :type: PasswordPolicyInfo
        """

        self._password_policy = password_policy

    @property
    def protect_items_by_default(self):
        """Gets the protect_items_by_default of this AccountGeneralSettings.  # noqa: E501


        :return: The protect_items_by_default of this AccountGeneralSettings.  # noqa: E501
        :rtype: bool
        """
        return self._protect_items_by_default

    @protect_items_by_default.setter
    def protect_items_by_default(self, protect_items_by_default):
        """Sets the protect_items_by_default of this AccountGeneralSettings.


        :param protect_items_by_default: The protect_items_by_default of this AccountGeneralSettings.  # noqa: E501
        :type: bool
        """

        self._protect_items_by_default = protect_items_by_default

    @property
    def sharing_policy(self):
        """Gets the sharing_policy of this AccountGeneralSettings.  # noqa: E501


        :return: The sharing_policy of this AccountGeneralSettings.  # noqa: E501
        :rtype: SharingPolicyInfo
        """
        return self._sharing_policy

    @sharing_policy.setter
    def sharing_policy(self, sharing_policy):
        """Sets the sharing_policy of this AccountGeneralSettings.


        :param sharing_policy: The sharing_policy of this AccountGeneralSettings.  # noqa: E501
        :type: SharingPolicyInfo
        """

        self._sharing_policy = sharing_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountGeneralSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountGeneralSettings):
            return True

        return self.to_dict() != other.to_dict()
