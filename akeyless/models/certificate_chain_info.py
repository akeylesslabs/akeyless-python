# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.certificate_expiration_event import CertificateExpirationEvent
from akeyless.models.certificate_info import CertificateInfo
from typing import Optional, Set
from typing_extensions import Self

class CertificateChainInfo(BaseModel):
    """
    CertificateChainInfo
    """ # noqa: E501
    auto_renew_certificate: Optional[StrictBool] = None
    certificate_chain: Optional[List[CertificateInfo]] = None
    certificate_format: Optional[StrictStr] = None
    certificate_has_private_key: Optional[StrictBool] = None
    certificate_issuer_gw_cluster_id: Optional[StrictInt] = None
    certificate_issuer_gw_cluster_url: Optional[StrictStr] = None
    certificate_issuer_item_id: Optional[StrictInt] = None
    certificate_issuer_name: Optional[StrictStr] = None
    certificate_pem: Optional[StrictStr] = None
    certificate_status: Optional[StrictStr] = None
    error_message: Optional[StrictStr] = None
    expiration_events: Optional[List[CertificateExpirationEvent]] = None
    renew_before_expiration_in_days: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["auto_renew_certificate", "certificate_chain", "certificate_format", "certificate_has_private_key", "certificate_issuer_gw_cluster_id", "certificate_issuer_gw_cluster_url", "certificate_issuer_item_id", "certificate_issuer_name", "certificate_pem", "certificate_status", "error_message", "expiration_events", "renew_before_expiration_in_days"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateChainInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in certificate_chain (list)
        _items = []
        if self.certificate_chain:
            for _item_certificate_chain in self.certificate_chain:
                if _item_certificate_chain:
                    _items.append(_item_certificate_chain.to_dict())
            _dict['certificate_chain'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in expiration_events (list)
        _items = []
        if self.expiration_events:
            for _item_expiration_events in self.expiration_events:
                if _item_expiration_events:
                    _items.append(_item_expiration_events.to_dict())
            _dict['expiration_events'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateChainInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auto_renew_certificate": obj.get("auto_renew_certificate"),
            "certificate_chain": [CertificateInfo.from_dict(_item) for _item in obj["certificate_chain"]] if obj.get("certificate_chain") is not None else None,
            "certificate_format": obj.get("certificate_format"),
            "certificate_has_private_key": obj.get("certificate_has_private_key"),
            "certificate_issuer_gw_cluster_id": obj.get("certificate_issuer_gw_cluster_id"),
            "certificate_issuer_gw_cluster_url": obj.get("certificate_issuer_gw_cluster_url"),
            "certificate_issuer_item_id": obj.get("certificate_issuer_item_id"),
            "certificate_issuer_name": obj.get("certificate_issuer_name"),
            "certificate_pem": obj.get("certificate_pem"),
            "certificate_status": obj.get("certificate_status"),
            "error_message": obj.get("error_message"),
            "expiration_events": [CertificateExpirationEvent.from_dict(_item) for _item in obj["expiration_events"]] if obj.get("expiration_events") is not None else None,
            "renew_before_expiration_in_days": obj.get("renew_before_expiration_in_days")
        })
        return _obj


