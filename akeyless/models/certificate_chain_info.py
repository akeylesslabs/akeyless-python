# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class CertificateChainInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto_renew_certificate': 'bool',
        'certificate_chain': 'list[CertificateInfo]',
        'certificate_format': 'str',
        'certificate_has_private_key': 'bool',
        'certificate_issuer_gw_cluster_id': 'int',
        'certificate_issuer_gw_cluster_url': 'str',
        'certificate_issuer_item_id': 'int',
        'certificate_issuer_name': 'str',
        'certificate_pem': 'str',
        'certificate_status': 'str',
        'common_name': 'str',
        'error_message': 'str',
        'expiration_date': 'datetime',
        'expiration_events': 'list[CertificateExpirationEvent]',
        'external_ca_id': 'NullString',
        'issuance_status': 'str',
        'not_before': 'datetime',
        'renew_before_expiration_in_days': 'int'
    }

    attribute_map = {
        'auto_renew_certificate': 'auto_renew_certificate',
        'certificate_chain': 'certificate_chain',
        'certificate_format': 'certificate_format',
        'certificate_has_private_key': 'certificate_has_private_key',
        'certificate_issuer_gw_cluster_id': 'certificate_issuer_gw_cluster_id',
        'certificate_issuer_gw_cluster_url': 'certificate_issuer_gw_cluster_url',
        'certificate_issuer_item_id': 'certificate_issuer_item_id',
        'certificate_issuer_name': 'certificate_issuer_name',
        'certificate_pem': 'certificate_pem',
        'certificate_status': 'certificate_status',
        'common_name': 'common_name',
        'error_message': 'error_message',
        'expiration_date': 'expiration_date',
        'expiration_events': 'expiration_events',
        'external_ca_id': 'external_ca_id',
        'issuance_status': 'issuance_status',
        'not_before': 'not_before',
        'renew_before_expiration_in_days': 'renew_before_expiration_in_days'
    }

    def __init__(self, auto_renew_certificate=None, certificate_chain=None, certificate_format=None, certificate_has_private_key=None, certificate_issuer_gw_cluster_id=None, certificate_issuer_gw_cluster_url=None, certificate_issuer_item_id=None, certificate_issuer_name=None, certificate_pem=None, certificate_status=None, common_name=None, error_message=None, expiration_date=None, expiration_events=None, external_ca_id=None, issuance_status=None, not_before=None, renew_before_expiration_in_days=None, local_vars_configuration=None):  # noqa: E501
        """CertificateChainInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auto_renew_certificate = None
        self._certificate_chain = None
        self._certificate_format = None
        self._certificate_has_private_key = None
        self._certificate_issuer_gw_cluster_id = None
        self._certificate_issuer_gw_cluster_url = None
        self._certificate_issuer_item_id = None
        self._certificate_issuer_name = None
        self._certificate_pem = None
        self._certificate_status = None
        self._common_name = None
        self._error_message = None
        self._expiration_date = None
        self._expiration_events = None
        self._external_ca_id = None
        self._issuance_status = None
        self._not_before = None
        self._renew_before_expiration_in_days = None
        self.discriminator = None

        if auto_renew_certificate is not None:
            self.auto_renew_certificate = auto_renew_certificate
        if certificate_chain is not None:
            self.certificate_chain = certificate_chain
        if certificate_format is not None:
            self.certificate_format = certificate_format
        if certificate_has_private_key is not None:
            self.certificate_has_private_key = certificate_has_private_key
        if certificate_issuer_gw_cluster_id is not None:
            self.certificate_issuer_gw_cluster_id = certificate_issuer_gw_cluster_id
        if certificate_issuer_gw_cluster_url is not None:
            self.certificate_issuer_gw_cluster_url = certificate_issuer_gw_cluster_url
        if certificate_issuer_item_id is not None:
            self.certificate_issuer_item_id = certificate_issuer_item_id
        if certificate_issuer_name is not None:
            self.certificate_issuer_name = certificate_issuer_name
        if certificate_pem is not None:
            self.certificate_pem = certificate_pem
        if certificate_status is not None:
            self.certificate_status = certificate_status
        if common_name is not None:
            self.common_name = common_name
        if error_message is not None:
            self.error_message = error_message
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if expiration_events is not None:
            self.expiration_events = expiration_events
        if external_ca_id is not None:
            self.external_ca_id = external_ca_id
        if issuance_status is not None:
            self.issuance_status = issuance_status
        if not_before is not None:
            self.not_before = not_before
        if renew_before_expiration_in_days is not None:
            self.renew_before_expiration_in_days = renew_before_expiration_in_days

    @property
    def auto_renew_certificate(self):
        """Gets the auto_renew_certificate of this CertificateChainInfo.  # noqa: E501


        :return: The auto_renew_certificate of this CertificateChainInfo.  # noqa: E501
        :rtype: bool
        """
        return self._auto_renew_certificate

    @auto_renew_certificate.setter
    def auto_renew_certificate(self, auto_renew_certificate):
        """Sets the auto_renew_certificate of this CertificateChainInfo.


        :param auto_renew_certificate: The auto_renew_certificate of this CertificateChainInfo.  # noqa: E501
        :type: bool
        """

        self._auto_renew_certificate = auto_renew_certificate

    @property
    def certificate_chain(self):
        """Gets the certificate_chain of this CertificateChainInfo.  # noqa: E501


        :return: The certificate_chain of this CertificateChainInfo.  # noqa: E501
        :rtype: list[CertificateInfo]
        """
        return self._certificate_chain

    @certificate_chain.setter
    def certificate_chain(self, certificate_chain):
        """Sets the certificate_chain of this CertificateChainInfo.


        :param certificate_chain: The certificate_chain of this CertificateChainInfo.  # noqa: E501
        :type: list[CertificateInfo]
        """

        self._certificate_chain = certificate_chain

    @property
    def certificate_format(self):
        """Gets the certificate_format of this CertificateChainInfo.  # noqa: E501


        :return: The certificate_format of this CertificateChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._certificate_format

    @certificate_format.setter
    def certificate_format(self, certificate_format):
        """Sets the certificate_format of this CertificateChainInfo.


        :param certificate_format: The certificate_format of this CertificateChainInfo.  # noqa: E501
        :type: str
        """

        self._certificate_format = certificate_format

    @property
    def certificate_has_private_key(self):
        """Gets the certificate_has_private_key of this CertificateChainInfo.  # noqa: E501


        :return: The certificate_has_private_key of this CertificateChainInfo.  # noqa: E501
        :rtype: bool
        """
        return self._certificate_has_private_key

    @certificate_has_private_key.setter
    def certificate_has_private_key(self, certificate_has_private_key):
        """Sets the certificate_has_private_key of this CertificateChainInfo.


        :param certificate_has_private_key: The certificate_has_private_key of this CertificateChainInfo.  # noqa: E501
        :type: bool
        """

        self._certificate_has_private_key = certificate_has_private_key

    @property
    def certificate_issuer_gw_cluster_id(self):
        """Gets the certificate_issuer_gw_cluster_id of this CertificateChainInfo.  # noqa: E501


        :return: The certificate_issuer_gw_cluster_id of this CertificateChainInfo.  # noqa: E501
        :rtype: int
        """
        return self._certificate_issuer_gw_cluster_id

    @certificate_issuer_gw_cluster_id.setter
    def certificate_issuer_gw_cluster_id(self, certificate_issuer_gw_cluster_id):
        """Sets the certificate_issuer_gw_cluster_id of this CertificateChainInfo.


        :param certificate_issuer_gw_cluster_id: The certificate_issuer_gw_cluster_id of this CertificateChainInfo.  # noqa: E501
        :type: int
        """

        self._certificate_issuer_gw_cluster_id = certificate_issuer_gw_cluster_id

    @property
    def certificate_issuer_gw_cluster_url(self):
        """Gets the certificate_issuer_gw_cluster_url of this CertificateChainInfo.  # noqa: E501


        :return: The certificate_issuer_gw_cluster_url of this CertificateChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._certificate_issuer_gw_cluster_url

    @certificate_issuer_gw_cluster_url.setter
    def certificate_issuer_gw_cluster_url(self, certificate_issuer_gw_cluster_url):
        """Sets the certificate_issuer_gw_cluster_url of this CertificateChainInfo.


        :param certificate_issuer_gw_cluster_url: The certificate_issuer_gw_cluster_url of this CertificateChainInfo.  # noqa: E501
        :type: str
        """

        self._certificate_issuer_gw_cluster_url = certificate_issuer_gw_cluster_url

    @property
    def certificate_issuer_item_id(self):
        """Gets the certificate_issuer_item_id of this CertificateChainInfo.  # noqa: E501


        :return: The certificate_issuer_item_id of this CertificateChainInfo.  # noqa: E501
        :rtype: int
        """
        return self._certificate_issuer_item_id

    @certificate_issuer_item_id.setter
    def certificate_issuer_item_id(self, certificate_issuer_item_id):
        """Sets the certificate_issuer_item_id of this CertificateChainInfo.


        :param certificate_issuer_item_id: The certificate_issuer_item_id of this CertificateChainInfo.  # noqa: E501
        :type: int
        """

        self._certificate_issuer_item_id = certificate_issuer_item_id

    @property
    def certificate_issuer_name(self):
        """Gets the certificate_issuer_name of this CertificateChainInfo.  # noqa: E501


        :return: The certificate_issuer_name of this CertificateChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._certificate_issuer_name

    @certificate_issuer_name.setter
    def certificate_issuer_name(self, certificate_issuer_name):
        """Sets the certificate_issuer_name of this CertificateChainInfo.


        :param certificate_issuer_name: The certificate_issuer_name of this CertificateChainInfo.  # noqa: E501
        :type: str
        """

        self._certificate_issuer_name = certificate_issuer_name

    @property
    def certificate_pem(self):
        """Gets the certificate_pem of this CertificateChainInfo.  # noqa: E501


        :return: The certificate_pem of this CertificateChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._certificate_pem

    @certificate_pem.setter
    def certificate_pem(self, certificate_pem):
        """Sets the certificate_pem of this CertificateChainInfo.


        :param certificate_pem: The certificate_pem of this CertificateChainInfo.  # noqa: E501
        :type: str
        """

        self._certificate_pem = certificate_pem

    @property
    def certificate_status(self):
        """Gets the certificate_status of this CertificateChainInfo.  # noqa: E501


        :return: The certificate_status of this CertificateChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._certificate_status

    @certificate_status.setter
    def certificate_status(self, certificate_status):
        """Sets the certificate_status of this CertificateChainInfo.


        :param certificate_status: The certificate_status of this CertificateChainInfo.  # noqa: E501
        :type: str
        """

        self._certificate_status = certificate_status

    @property
    def common_name(self):
        """Gets the common_name of this CertificateChainInfo.  # noqa: E501


        :return: The common_name of this CertificateChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this CertificateChainInfo.


        :param common_name: The common_name of this CertificateChainInfo.  # noqa: E501
        :type: str
        """

        self._common_name = common_name

    @property
    def error_message(self):
        """Gets the error_message of this CertificateChainInfo.  # noqa: E501


        :return: The error_message of this CertificateChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CertificateChainInfo.


        :param error_message: The error_message of this CertificateChainInfo.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def expiration_date(self):
        """Gets the expiration_date of this CertificateChainInfo.  # noqa: E501


        :return: The expiration_date of this CertificateChainInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this CertificateChainInfo.


        :param expiration_date: The expiration_date of this CertificateChainInfo.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def expiration_events(self):
        """Gets the expiration_events of this CertificateChainInfo.  # noqa: E501


        :return: The expiration_events of this CertificateChainInfo.  # noqa: E501
        :rtype: list[CertificateExpirationEvent]
        """
        return self._expiration_events

    @expiration_events.setter
    def expiration_events(self, expiration_events):
        """Sets the expiration_events of this CertificateChainInfo.


        :param expiration_events: The expiration_events of this CertificateChainInfo.  # noqa: E501
        :type: list[CertificateExpirationEvent]
        """

        self._expiration_events = expiration_events

    @property
    def external_ca_id(self):
        """Gets the external_ca_id of this CertificateChainInfo.  # noqa: E501


        :return: The external_ca_id of this CertificateChainInfo.  # noqa: E501
        :rtype: NullString
        """
        return self._external_ca_id

    @external_ca_id.setter
    def external_ca_id(self, external_ca_id):
        """Sets the external_ca_id of this CertificateChainInfo.


        :param external_ca_id: The external_ca_id of this CertificateChainInfo.  # noqa: E501
        :type: NullString
        """

        self._external_ca_id = external_ca_id

    @property
    def issuance_status(self):
        """Gets the issuance_status of this CertificateChainInfo.  # noqa: E501


        :return: The issuance_status of this CertificateChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._issuance_status

    @issuance_status.setter
    def issuance_status(self, issuance_status):
        """Sets the issuance_status of this CertificateChainInfo.


        :param issuance_status: The issuance_status of this CertificateChainInfo.  # noqa: E501
        :type: str
        """

        self._issuance_status = issuance_status

    @property
    def not_before(self):
        """Gets the not_before of this CertificateChainInfo.  # noqa: E501


        :return: The not_before of this CertificateChainInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this CertificateChainInfo.


        :param not_before: The not_before of this CertificateChainInfo.  # noqa: E501
        :type: datetime
        """

        self._not_before = not_before

    @property
    def renew_before_expiration_in_days(self):
        """Gets the renew_before_expiration_in_days of this CertificateChainInfo.  # noqa: E501


        :return: The renew_before_expiration_in_days of this CertificateChainInfo.  # noqa: E501
        :rtype: int
        """
        return self._renew_before_expiration_in_days

    @renew_before_expiration_in_days.setter
    def renew_before_expiration_in_days(self, renew_before_expiration_in_days):
        """Sets the renew_before_expiration_in_days of this CertificateChainInfo.


        :param renew_before_expiration_in_days: The renew_before_expiration_in_days of this CertificateChainInfo.  # noqa: E501
        :type: int
        """

        self._renew_before_expiration_in_days = renew_before_expiration_in_days

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateChainInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificateChainInfo):
            return True

        return self.to_dict() != other.to_dict()
