# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class StaticCredsAuth(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_id': 'str',
        'admin_email': 'str',
        'creds': 'str',
        'json': 'bool'
    }

    attribute_map = {
        'access_id': 'access-id',
        'admin_email': 'admin-email',
        'creds': 'creds',
        'json': 'json'
    }

    def __init__(self, access_id=None, admin_email=None, creds=None, json=False, local_vars_configuration=None):  # noqa: E501
        """StaticCredsAuth - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_id = None
        self._admin_email = None
        self._creds = None
        self._json = None
        self.discriminator = None

        if access_id is not None:
            self.access_id = access_id
        if admin_email is not None:
            self.admin_email = admin_email
        if creds is not None:
            self.creds = creds
        if json is not None:
            self.json = json

    @property
    def access_id(self):
        """Gets the access_id of this StaticCredsAuth.  # noqa: E501

        Akeyless JWT token  # noqa: E501

        :return: The access_id of this StaticCredsAuth.  # noqa: E501
        :rtype: str
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """Sets the access_id of this StaticCredsAuth.

        Akeyless JWT token  # noqa: E501

        :param access_id: The access_id of this StaticCredsAuth.  # noqa: E501
        :type: str
        """

        self._access_id = access_id

    @property
    def admin_email(self):
        """Gets the admin_email of this StaticCredsAuth.  # noqa: E501

        Akeyless JWT token  # noqa: E501

        :return: The admin_email of this StaticCredsAuth.  # noqa: E501
        :rtype: str
        """
        return self._admin_email

    @admin_email.setter
    def admin_email(self, admin_email):
        """Sets the admin_email of this StaticCredsAuth.

        Akeyless JWT token  # noqa: E501

        :param admin_email: The admin_email of this StaticCredsAuth.  # noqa: E501
        :type: str
        """

        self._admin_email = admin_email

    @property
    def creds(self):
        """Gets the creds of this StaticCredsAuth.  # noqa: E501

        Akeyless JWT token  # noqa: E501

        :return: The creds of this StaticCredsAuth.  # noqa: E501
        :rtype: str
        """
        return self._creds

    @creds.setter
    def creds(self, creds):
        """Sets the creds of this StaticCredsAuth.

        Akeyless JWT token  # noqa: E501

        :param creds: The creds of this StaticCredsAuth.  # noqa: E501
        :type: str
        """

        self._creds = creds

    @property
    def json(self):
        """Gets the json of this StaticCredsAuth.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this StaticCredsAuth.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this StaticCredsAuth.

        Set output format to JSON  # noqa: E501

        :param json: The json of this StaticCredsAuth.  # noqa: E501
        :type: bool
        """

        self._json = json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StaticCredsAuth):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StaticCredsAuth):
            return True

        return self.to_dict() != other.to_dict()
