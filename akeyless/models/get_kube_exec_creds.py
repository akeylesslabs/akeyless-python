# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetKubeExecCreds(BaseModel):
    """
    getKubeExecCreds is a command that gets credentials for authentication with Kubernetes cluster based on a PKI cert issuer.
    """ # noqa: E501
    alt_names: Optional[StrictStr] = Field(default=None, description="The Subject Alternative Names to be included in the PKI certificate (in a comma-separated list) (if CSR is supplied this flag is ignored and any DNS.* names are taken from it)", alias="alt-names")
    api_version: Optional[StrictStr] = Field(default='v1', description="Client authentication API version", alias="api-version")
    cert_issuer_name: StrictStr = Field(description="The name of the PKI certificate issuer", alias="cert-issuer-name")
    common_name: Optional[StrictStr] = Field(default=None, description="The common name to be included in the PKI certificate (if CSR is supplied this flag is ignored and the CSR subject CN is taken)", alias="common-name")
    csr_data_base64: Optional[StrictStr] = Field(default=None, description="Certificate Signing Request contents encoded in base64 to generate the certificate with", alias="csr-data-base64")
    extended_key_usage: Optional[StrictStr] = Field(default=None, description="A comma-separated list of extended key usage requests which will be used for certificate issuance. Supported values: 'clientauth', 'serverauth'. If critical is present the extension will be marked as critical", alias="extended-key-usage")
    extra_extensions: Optional[StrictStr] = Field(default=None, description="A json string that defines the requested extra extensions for the certificate", alias="extra-extensions")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    key_data_base64: Optional[StrictStr] = Field(default=None, description="PKI key file contents. If this option is used, the certificate will be printed to stdout", alias="key-data-base64")
    max_path_len: Optional[StrictInt] = Field(default=-1, description="The maximum path length for the generated certificate. -1, means unlimited unless the signing certificate has a maximum path length set", alias="max-path-len")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    ttl: Optional[StrictStr] = Field(default=None, description="Updated certificate lifetime in seconds (must be less than the Certificate Issuer default TTL)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    uri_sans: Optional[StrictStr] = Field(default=None, description="The URI Subject Alternative Names to be included in the PKI certificate (in a comma-separated list) (if CSR is supplied this flag is ignored and any URI.* names are taken from it)", alias="uri-sans")
    __properties: ClassVar[List[str]] = ["alt-names", "api-version", "cert-issuer-name", "common-name", "csr-data-base64", "extended-key-usage", "extra-extensions", "json", "key-data-base64", "max-path-len", "token", "ttl", "uid-token", "uri-sans"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetKubeExecCreds from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetKubeExecCreds from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alt-names": obj.get("alt-names"),
            "api-version": obj.get("api-version") if obj.get("api-version") is not None else 'v1',
            "cert-issuer-name": obj.get("cert-issuer-name"),
            "common-name": obj.get("common-name"),
            "csr-data-base64": obj.get("csr-data-base64"),
            "extended-key-usage": obj.get("extended-key-usage"),
            "extra-extensions": obj.get("extra-extensions"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "key-data-base64": obj.get("key-data-base64"),
            "max-path-len": obj.get("max-path-len") if obj.get("max-path-len") is not None else -1,
            "token": obj.get("token"),
            "ttl": obj.get("ttl"),
            "uid-token": obj.get("uid-token"),
            "uri-sans": obj.get("uri-sans")
        })
        return _obj


