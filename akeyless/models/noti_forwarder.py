# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.email_entry import EmailEntry
from akeyless.models.item_version import ItemVersion
from akeyless.models.web_hook_noti_forwarder_public_details import WebHookNotiForwarderPublicDetails
from typing import Optional, Set
from typing_extensions import Self

class NotiForwarder(BaseModel):
    """
    NotiForwarder
    """ # noqa: E501
    auth_type: Optional[StrictStr] = None
    client_id: Optional[StrictStr] = Field(default=None, description="Auth - JWT")
    client_permissions: Optional[List[StrictStr]] = None
    comment: Optional[StrictStr] = None
    creation_date: Optional[datetime] = None
    endpoint: Optional[StrictStr] = None
    event_types: Optional[List[StrictStr]] = None
    gateway_cluster_id: Optional[StrictInt] = None
    include_error: Optional[StrictBool] = None
    is_enabled: Optional[StrictBool] = None
    last_version: Optional[StrictInt] = None
    modification_date: Optional[datetime] = None
    noti_forwarder_id: Optional[StrictInt] = None
    noti_forwarder_name: Optional[StrictStr] = None
    noti_forwarder_type: Optional[StrictStr] = None
    noti_forwarder_versions: Optional[List[ItemVersion]] = None
    override_url: Optional[StrictStr] = None
    paths: Optional[List[StrictStr]] = None
    protection_key: Optional[StrictStr] = None
    runner_type: Optional[StrictStr] = None
    slack_noti_forwarder_public_details: Optional[Dict[str, Any]] = None
    timespan_in_seconds: Optional[StrictInt] = None
    to_emails: Optional[List[EmailEntry]] = None
    user_email: Optional[StrictStr] = None
    username: Optional[StrictStr] = Field(default=None, description="Auth - User Password")
    webhook_noti_forwarder_public_details: Optional[WebHookNotiForwarderPublicDetails] = None
    with_customer_fragment: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["auth_type", "client_id", "client_permissions", "comment", "creation_date", "endpoint", "event_types", "gateway_cluster_id", "include_error", "is_enabled", "last_version", "modification_date", "noti_forwarder_id", "noti_forwarder_name", "noti_forwarder_type", "noti_forwarder_versions", "override_url", "paths", "protection_key", "runner_type", "slack_noti_forwarder_public_details", "timespan_in_seconds", "to_emails", "user_email", "username", "webhook_noti_forwarder_public_details", "with_customer_fragment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NotiForwarder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in noti_forwarder_versions (list)
        _items = []
        if self.noti_forwarder_versions:
            for _item_noti_forwarder_versions in self.noti_forwarder_versions:
                if _item_noti_forwarder_versions:
                    _items.append(_item_noti_forwarder_versions.to_dict())
            _dict['noti_forwarder_versions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in to_emails (list)
        _items = []
        if self.to_emails:
            for _item_to_emails in self.to_emails:
                if _item_to_emails:
                    _items.append(_item_to_emails.to_dict())
            _dict['to_emails'] = _items
        # override the default output from pydantic by calling `to_dict()` of webhook_noti_forwarder_public_details
        if self.webhook_noti_forwarder_public_details:
            _dict['webhook_noti_forwarder_public_details'] = self.webhook_noti_forwarder_public_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NotiForwarder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth_type": obj.get("auth_type"),
            "client_id": obj.get("client_id"),
            "client_permissions": obj.get("client_permissions"),
            "comment": obj.get("comment"),
            "creation_date": obj.get("creation_date"),
            "endpoint": obj.get("endpoint"),
            "event_types": obj.get("event_types"),
            "gateway_cluster_id": obj.get("gateway_cluster_id"),
            "include_error": obj.get("include_error"),
            "is_enabled": obj.get("is_enabled"),
            "last_version": obj.get("last_version"),
            "modification_date": obj.get("modification_date"),
            "noti_forwarder_id": obj.get("noti_forwarder_id"),
            "noti_forwarder_name": obj.get("noti_forwarder_name"),
            "noti_forwarder_type": obj.get("noti_forwarder_type"),
            "noti_forwarder_versions": [ItemVersion.from_dict(_item) for _item in obj["noti_forwarder_versions"]] if obj.get("noti_forwarder_versions") is not None else None,
            "override_url": obj.get("override_url"),
            "paths": obj.get("paths"),
            "protection_key": obj.get("protection_key"),
            "runner_type": obj.get("runner_type"),
            "slack_noti_forwarder_public_details": obj.get("slack_noti_forwarder_public_details"),
            "timespan_in_seconds": obj.get("timespan_in_seconds"),
            "to_emails": [EmailEntry.from_dict(_item) for _item in obj["to_emails"]] if obj.get("to_emails") is not None else None,
            "user_email": obj.get("user_email"),
            "username": obj.get("username"),
            "webhook_noti_forwarder_public_details": WebHookNotiForwarderPublicDetails.from_dict(obj["webhook_noti_forwarder_public_details"]) if obj.get("webhook_noti_forwarder_public_details") is not None else None,
            "with_customer_fragment": obj.get("with_customer_fragment")
        })
        return _obj


