# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class NotiForwarder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'client_permissions': 'list[str]',
        'comment': 'str',
        'creation_date': 'datetime',
        'endpoint': 'str',
        'event_types': 'list[str]',
        'gateway_cluster_id': 'int',
        'is_enabled': 'bool',
        'last_version': 'int',
        'modification_date': 'datetime',
        'noti_forwarder_id': 'int',
        'noti_forwarder_name': 'str',
        'noti_forwarder_type': 'str',
        'noti_forwarder_versions': 'list[ItemVersion]',
        'paths': 'list[str]',
        'protection_key': 'str',
        'runner_type': 'str',
        'timespan_in_seconds': 'int',
        'to_emails': 'list[EmailEntry]',
        'username': 'str',
        'with_customer_fragment': 'bool'
    }

    attribute_map = {
        'client_permissions': 'client_permissions',
        'comment': 'comment',
        'creation_date': 'creation_date',
        'endpoint': 'endpoint',
        'event_types': 'event_types',
        'gateway_cluster_id': 'gateway_cluster_id',
        'is_enabled': 'is_enabled',
        'last_version': 'last_version',
        'modification_date': 'modification_date',
        'noti_forwarder_id': 'noti_forwarder_id',
        'noti_forwarder_name': 'noti_forwarder_name',
        'noti_forwarder_type': 'noti_forwarder_type',
        'noti_forwarder_versions': 'noti_forwarder_versions',
        'paths': 'paths',
        'protection_key': 'protection_key',
        'runner_type': 'runner_type',
        'timespan_in_seconds': 'timespan_in_seconds',
        'to_emails': 'to_emails',
        'username': 'username',
        'with_customer_fragment': 'with_customer_fragment'
    }

    def __init__(self, client_permissions=None, comment=None, creation_date=None, endpoint=None, event_types=None, gateway_cluster_id=None, is_enabled=None, last_version=None, modification_date=None, noti_forwarder_id=None, noti_forwarder_name=None, noti_forwarder_type=None, noti_forwarder_versions=None, paths=None, protection_key=None, runner_type=None, timespan_in_seconds=None, to_emails=None, username=None, with_customer_fragment=None, local_vars_configuration=None):  # noqa: E501
        """NotiForwarder - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._client_permissions = None
        self._comment = None
        self._creation_date = None
        self._endpoint = None
        self._event_types = None
        self._gateway_cluster_id = None
        self._is_enabled = None
        self._last_version = None
        self._modification_date = None
        self._noti_forwarder_id = None
        self._noti_forwarder_name = None
        self._noti_forwarder_type = None
        self._noti_forwarder_versions = None
        self._paths = None
        self._protection_key = None
        self._runner_type = None
        self._timespan_in_seconds = None
        self._to_emails = None
        self._username = None
        self._with_customer_fragment = None
        self.discriminator = None

        if client_permissions is not None:
            self.client_permissions = client_permissions
        if comment is not None:
            self.comment = comment
        if creation_date is not None:
            self.creation_date = creation_date
        if endpoint is not None:
            self.endpoint = endpoint
        if event_types is not None:
            self.event_types = event_types
        if gateway_cluster_id is not None:
            self.gateway_cluster_id = gateway_cluster_id
        if is_enabled is not None:
            self.is_enabled = is_enabled
        if last_version is not None:
            self.last_version = last_version
        if modification_date is not None:
            self.modification_date = modification_date
        if noti_forwarder_id is not None:
            self.noti_forwarder_id = noti_forwarder_id
        if noti_forwarder_name is not None:
            self.noti_forwarder_name = noti_forwarder_name
        if noti_forwarder_type is not None:
            self.noti_forwarder_type = noti_forwarder_type
        if noti_forwarder_versions is not None:
            self.noti_forwarder_versions = noti_forwarder_versions
        if paths is not None:
            self.paths = paths
        if protection_key is not None:
            self.protection_key = protection_key
        if runner_type is not None:
            self.runner_type = runner_type
        if timespan_in_seconds is not None:
            self.timespan_in_seconds = timespan_in_seconds
        if to_emails is not None:
            self.to_emails = to_emails
        if username is not None:
            self.username = username
        if with_customer_fragment is not None:
            self.with_customer_fragment = with_customer_fragment

    @property
    def client_permissions(self):
        """Gets the client_permissions of this NotiForwarder.  # noqa: E501


        :return: The client_permissions of this NotiForwarder.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_permissions

    @client_permissions.setter
    def client_permissions(self, client_permissions):
        """Sets the client_permissions of this NotiForwarder.


        :param client_permissions: The client_permissions of this NotiForwarder.  # noqa: E501
        :type: list[str]
        """

        self._client_permissions = client_permissions

    @property
    def comment(self):
        """Gets the comment of this NotiForwarder.  # noqa: E501


        :return: The comment of this NotiForwarder.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this NotiForwarder.


        :param comment: The comment of this NotiForwarder.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def creation_date(self):
        """Gets the creation_date of this NotiForwarder.  # noqa: E501


        :return: The creation_date of this NotiForwarder.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this NotiForwarder.


        :param creation_date: The creation_date of this NotiForwarder.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def endpoint(self):
        """Gets the endpoint of this NotiForwarder.  # noqa: E501


        :return: The endpoint of this NotiForwarder.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this NotiForwarder.


        :param endpoint: The endpoint of this NotiForwarder.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def event_types(self):
        """Gets the event_types of this NotiForwarder.  # noqa: E501


        :return: The event_types of this NotiForwarder.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_types

    @event_types.setter
    def event_types(self, event_types):
        """Sets the event_types of this NotiForwarder.


        :param event_types: The event_types of this NotiForwarder.  # noqa: E501
        :type: list[str]
        """

        self._event_types = event_types

    @property
    def gateway_cluster_id(self):
        """Gets the gateway_cluster_id of this NotiForwarder.  # noqa: E501


        :return: The gateway_cluster_id of this NotiForwarder.  # noqa: E501
        :rtype: int
        """
        return self._gateway_cluster_id

    @gateway_cluster_id.setter
    def gateway_cluster_id(self, gateway_cluster_id):
        """Sets the gateway_cluster_id of this NotiForwarder.


        :param gateway_cluster_id: The gateway_cluster_id of this NotiForwarder.  # noqa: E501
        :type: int
        """

        self._gateway_cluster_id = gateway_cluster_id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this NotiForwarder.  # noqa: E501


        :return: The is_enabled of this NotiForwarder.  # noqa: E501
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this NotiForwarder.


        :param is_enabled: The is_enabled of this NotiForwarder.  # noqa: E501
        :type: bool
        """

        self._is_enabled = is_enabled

    @property
    def last_version(self):
        """Gets the last_version of this NotiForwarder.  # noqa: E501


        :return: The last_version of this NotiForwarder.  # noqa: E501
        :rtype: int
        """
        return self._last_version

    @last_version.setter
    def last_version(self, last_version):
        """Sets the last_version of this NotiForwarder.


        :param last_version: The last_version of this NotiForwarder.  # noqa: E501
        :type: int
        """

        self._last_version = last_version

    @property
    def modification_date(self):
        """Gets the modification_date of this NotiForwarder.  # noqa: E501


        :return: The modification_date of this NotiForwarder.  # noqa: E501
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this NotiForwarder.


        :param modification_date: The modification_date of this NotiForwarder.  # noqa: E501
        :type: datetime
        """

        self._modification_date = modification_date

    @property
    def noti_forwarder_id(self):
        """Gets the noti_forwarder_id of this NotiForwarder.  # noqa: E501


        :return: The noti_forwarder_id of this NotiForwarder.  # noqa: E501
        :rtype: int
        """
        return self._noti_forwarder_id

    @noti_forwarder_id.setter
    def noti_forwarder_id(self, noti_forwarder_id):
        """Sets the noti_forwarder_id of this NotiForwarder.


        :param noti_forwarder_id: The noti_forwarder_id of this NotiForwarder.  # noqa: E501
        :type: int
        """

        self._noti_forwarder_id = noti_forwarder_id

    @property
    def noti_forwarder_name(self):
        """Gets the noti_forwarder_name of this NotiForwarder.  # noqa: E501


        :return: The noti_forwarder_name of this NotiForwarder.  # noqa: E501
        :rtype: str
        """
        return self._noti_forwarder_name

    @noti_forwarder_name.setter
    def noti_forwarder_name(self, noti_forwarder_name):
        """Sets the noti_forwarder_name of this NotiForwarder.


        :param noti_forwarder_name: The noti_forwarder_name of this NotiForwarder.  # noqa: E501
        :type: str
        """

        self._noti_forwarder_name = noti_forwarder_name

    @property
    def noti_forwarder_type(self):
        """Gets the noti_forwarder_type of this NotiForwarder.  # noqa: E501


        :return: The noti_forwarder_type of this NotiForwarder.  # noqa: E501
        :rtype: str
        """
        return self._noti_forwarder_type

    @noti_forwarder_type.setter
    def noti_forwarder_type(self, noti_forwarder_type):
        """Sets the noti_forwarder_type of this NotiForwarder.


        :param noti_forwarder_type: The noti_forwarder_type of this NotiForwarder.  # noqa: E501
        :type: str
        """

        self._noti_forwarder_type = noti_forwarder_type

    @property
    def noti_forwarder_versions(self):
        """Gets the noti_forwarder_versions of this NotiForwarder.  # noqa: E501


        :return: The noti_forwarder_versions of this NotiForwarder.  # noqa: E501
        :rtype: list[ItemVersion]
        """
        return self._noti_forwarder_versions

    @noti_forwarder_versions.setter
    def noti_forwarder_versions(self, noti_forwarder_versions):
        """Sets the noti_forwarder_versions of this NotiForwarder.


        :param noti_forwarder_versions: The noti_forwarder_versions of this NotiForwarder.  # noqa: E501
        :type: list[ItemVersion]
        """

        self._noti_forwarder_versions = noti_forwarder_versions

    @property
    def paths(self):
        """Gets the paths of this NotiForwarder.  # noqa: E501


        :return: The paths of this NotiForwarder.  # noqa: E501
        :rtype: list[str]
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this NotiForwarder.


        :param paths: The paths of this NotiForwarder.  # noqa: E501
        :type: list[str]
        """

        self._paths = paths

    @property
    def protection_key(self):
        """Gets the protection_key of this NotiForwarder.  # noqa: E501


        :return: The protection_key of this NotiForwarder.  # noqa: E501
        :rtype: str
        """
        return self._protection_key

    @protection_key.setter
    def protection_key(self, protection_key):
        """Sets the protection_key of this NotiForwarder.


        :param protection_key: The protection_key of this NotiForwarder.  # noqa: E501
        :type: str
        """

        self._protection_key = protection_key

    @property
    def runner_type(self):
        """Gets the runner_type of this NotiForwarder.  # noqa: E501


        :return: The runner_type of this NotiForwarder.  # noqa: E501
        :rtype: str
        """
        return self._runner_type

    @runner_type.setter
    def runner_type(self, runner_type):
        """Sets the runner_type of this NotiForwarder.


        :param runner_type: The runner_type of this NotiForwarder.  # noqa: E501
        :type: str
        """

        self._runner_type = runner_type

    @property
    def timespan_in_seconds(self):
        """Gets the timespan_in_seconds of this NotiForwarder.  # noqa: E501


        :return: The timespan_in_seconds of this NotiForwarder.  # noqa: E501
        :rtype: int
        """
        return self._timespan_in_seconds

    @timespan_in_seconds.setter
    def timespan_in_seconds(self, timespan_in_seconds):
        """Sets the timespan_in_seconds of this NotiForwarder.


        :param timespan_in_seconds: The timespan_in_seconds of this NotiForwarder.  # noqa: E501
        :type: int
        """

        self._timespan_in_seconds = timespan_in_seconds

    @property
    def to_emails(self):
        """Gets the to_emails of this NotiForwarder.  # noqa: E501


        :return: The to_emails of this NotiForwarder.  # noqa: E501
        :rtype: list[EmailEntry]
        """
        return self._to_emails

    @to_emails.setter
    def to_emails(self, to_emails):
        """Sets the to_emails of this NotiForwarder.


        :param to_emails: The to_emails of this NotiForwarder.  # noqa: E501
        :type: list[EmailEntry]
        """

        self._to_emails = to_emails

    @property
    def username(self):
        """Gets the username of this NotiForwarder.  # noqa: E501


        :return: The username of this NotiForwarder.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this NotiForwarder.


        :param username: The username of this NotiForwarder.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def with_customer_fragment(self):
        """Gets the with_customer_fragment of this NotiForwarder.  # noqa: E501


        :return: The with_customer_fragment of this NotiForwarder.  # noqa: E501
        :rtype: bool
        """
        return self._with_customer_fragment

    @with_customer_fragment.setter
    def with_customer_fragment(self, with_customer_fragment):
        """Sets the with_customer_fragment of this NotiForwarder.


        :param with_customer_fragment: The with_customer_fragment of this NotiForwarder.  # noqa: E501
        :type: bool
        """

        self._with_customer_fragment = with_customer_fragment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotiForwarder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NotiForwarder):
            return True

        return self.to_dict() != other.to_dict()
