# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AuthMethodCreateCert(BaseModel):
    """
    authMethodCreateCert is a command that creates a new auth method that will be able to authenticate using a client certificate
    """ # noqa: E501
    access_expires: Optional[StrictInt] = Field(default=0, description="Access expiration date in Unix timestamp (select 0 for access without expiry date)", alias="access-expires")
    allowed_cors: Optional[StrictStr] = Field(default=None, description="Comma separated list of allowed CORS domains to be validated as part of the authentication flow.", alias="allowed-cors")
    audit_logs_claims: Optional[List[StrictStr]] = Field(default=None, description="Subclaims to include in audit logs, e.g \"--audit-logs-claims email --audit-logs-claims username\"", alias="audit-logs-claims")
    bound_common_names: Optional[List[StrictStr]] = Field(default=None, description="A list of names. At least one must exist in the Common Name. Supports globbing.", alias="bound-common-names")
    bound_dns_sans: Optional[List[StrictStr]] = Field(default=None, description="A list of DNS names. At least one must exist in the SANs. Supports globbing.", alias="bound-dns-sans")
    bound_email_sans: Optional[List[StrictStr]] = Field(default=None, description="A list of Email Addresses. At least one must exist in the SANs. Supports globbing.", alias="bound-email-sans")
    bound_extensions: Optional[List[StrictStr]] = Field(default=None, description="A list of extensions formatted as \"oid:value\". Expects the extension value to be some type of ASN1 encoded string. All values much match. Supports globbing on \"value\".", alias="bound-extensions")
    bound_ips: Optional[List[StrictStr]] = Field(default=None, description="A CIDR whitelist with the IPs that the access is restricted to", alias="bound-ips")
    bound_organizational_units: Optional[List[StrictStr]] = Field(default=None, description="A list of Organizational Units names. At least one must exist in the OU field.", alias="bound-organizational-units")
    bound_uri_sans: Optional[List[StrictStr]] = Field(default=None, description="A list of URIs. At least one must exist in the SANs. Supports globbing.", alias="bound-uri-sans")
    certificate_data: Optional[StrictStr] = Field(default=None, description="The certificate data in base64, if no file was provided", alias="certificate-data")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default=None, description="Auth Method description")
    expiration_event_in: Optional[List[StrictStr]] = Field(default=None, description="How many days before the expiration of the auth method would you like to be notified.", alias="expiration-event-in")
    force_sub_claims: Optional[StrictBool] = Field(default=None, description="if true: enforce role-association must include sub claims", alias="force-sub-claims")
    gw_bound_ips: Optional[List[StrictStr]] = Field(default=None, description="A CIDR whitelist with the GW IPs that the access is restricted to", alias="gw-bound-ips")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    jwt_ttl: Optional[StrictInt] = Field(default=0, description="Jwt TTL", alias="jwt-ttl")
    name: StrictStr = Field(description="Auth Method name")
    product_type: Optional[List[StrictStr]] = Field(default=None, description="Choose the relevant product type for the auth method [sm, sra, pm, dp, ca]", alias="product-type")
    revoked_cert_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of revoked cert ids", alias="revoked-cert-ids")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    unique_identifier: StrictStr = Field(description="A unique identifier (ID) value should be configured, such as common_name or organizational_unit Whenever a user logs in with a token, these authentication types issue a \"sub claim\" that contains details uniquely identifying that user. This sub claim includes a key containing the ID value that you configured, and is used to distinguish between different users from within the same organization.", alias="unique-identifier")
    __properties: ClassVar[List[str]] = ["access-expires", "allowed-cors", "audit-logs-claims", "bound-common-names", "bound-dns-sans", "bound-email-sans", "bound-extensions", "bound-ips", "bound-organizational-units", "bound-uri-sans", "certificate-data", "delete_protection", "description", "expiration-event-in", "force-sub-claims", "gw-bound-ips", "json", "jwt-ttl", "name", "product-type", "revoked-cert-ids", "token", "uid-token", "unique-identifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthMethodCreateCert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthMethodCreateCert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access-expires": obj.get("access-expires") if obj.get("access-expires") is not None else 0,
            "allowed-cors": obj.get("allowed-cors"),
            "audit-logs-claims": obj.get("audit-logs-claims"),
            "bound-common-names": obj.get("bound-common-names"),
            "bound-dns-sans": obj.get("bound-dns-sans"),
            "bound-email-sans": obj.get("bound-email-sans"),
            "bound-extensions": obj.get("bound-extensions"),
            "bound-ips": obj.get("bound-ips"),
            "bound-organizational-units": obj.get("bound-organizational-units"),
            "bound-uri-sans": obj.get("bound-uri-sans"),
            "certificate-data": obj.get("certificate-data"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "expiration-event-in": obj.get("expiration-event-in"),
            "force-sub-claims": obj.get("force-sub-claims"),
            "gw-bound-ips": obj.get("gw-bound-ips"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "jwt-ttl": obj.get("jwt-ttl") if obj.get("jwt-ttl") is not None else 0,
            "name": obj.get("name"),
            "product-type": obj.get("product-type"),
            "revoked-cert-ids": obj.get("revoked-cert-ids"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "unique-identifier": obj.get("unique-identifier")
        })
        return _obj


