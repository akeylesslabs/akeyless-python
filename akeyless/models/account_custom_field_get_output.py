# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class AccountCustomFieldGetOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'creation_date': 'datetime',
        'deletion_date': 'NullTime',
        'id': 'int',
        'modification_date': 'datetime',
        'name': 'str',
        'object': 'str',
        'object_type': 'str',
        'required': 'bool'
    }

    attribute_map = {
        'account_id': 'account_id',
        'creation_date': 'creation_date',
        'deletion_date': 'deletion_date',
        'id': 'id',
        'modification_date': 'modification_date',
        'name': 'name',
        'object': 'object',
        'object_type': 'object_type',
        'required': 'required'
    }

    def __init__(self, account_id=None, creation_date=None, deletion_date=None, id=None, modification_date=None, name=None, object=None, object_type=None, required=None, local_vars_configuration=None):  # noqa: E501
        """AccountCustomFieldGetOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._creation_date = None
        self._deletion_date = None
        self._id = None
        self._modification_date = None
        self._name = None
        self._object = None
        self._object_type = None
        self._required = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if creation_date is not None:
            self.creation_date = creation_date
        if deletion_date is not None:
            self.deletion_date = deletion_date
        if id is not None:
            self.id = id
        if modification_date is not None:
            self.modification_date = modification_date
        if name is not None:
            self.name = name
        if object is not None:
            self.object = object
        if object_type is not None:
            self.object_type = object_type
        if required is not None:
            self.required = required

    @property
    def account_id(self):
        """Gets the account_id of this AccountCustomFieldGetOutput.  # noqa: E501


        :return: The account_id of this AccountCustomFieldGetOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AccountCustomFieldGetOutput.


        :param account_id: The account_id of this AccountCustomFieldGetOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def creation_date(self):
        """Gets the creation_date of this AccountCustomFieldGetOutput.  # noqa: E501


        :return: The creation_date of this AccountCustomFieldGetOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this AccountCustomFieldGetOutput.


        :param creation_date: The creation_date of this AccountCustomFieldGetOutput.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def deletion_date(self):
        """Gets the deletion_date of this AccountCustomFieldGetOutput.  # noqa: E501


        :return: The deletion_date of this AccountCustomFieldGetOutput.  # noqa: E501
        :rtype: NullTime
        """
        return self._deletion_date

    @deletion_date.setter
    def deletion_date(self, deletion_date):
        """Sets the deletion_date of this AccountCustomFieldGetOutput.


        :param deletion_date: The deletion_date of this AccountCustomFieldGetOutput.  # noqa: E501
        :type: NullTime
        """

        self._deletion_date = deletion_date

    @property
    def id(self):
        """Gets the id of this AccountCustomFieldGetOutput.  # noqa: E501


        :return: The id of this AccountCustomFieldGetOutput.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountCustomFieldGetOutput.


        :param id: The id of this AccountCustomFieldGetOutput.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def modification_date(self):
        """Gets the modification_date of this AccountCustomFieldGetOutput.  # noqa: E501


        :return: The modification_date of this AccountCustomFieldGetOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this AccountCustomFieldGetOutput.


        :param modification_date: The modification_date of this AccountCustomFieldGetOutput.  # noqa: E501
        :type: datetime
        """

        self._modification_date = modification_date

    @property
    def name(self):
        """Gets the name of this AccountCustomFieldGetOutput.  # noqa: E501


        :return: The name of this AccountCustomFieldGetOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountCustomFieldGetOutput.


        :param name: The name of this AccountCustomFieldGetOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def object(self):
        """Gets the object of this AccountCustomFieldGetOutput.  # noqa: E501


        :return: The object of this AccountCustomFieldGetOutput.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this AccountCustomFieldGetOutput.


        :param object: The object of this AccountCustomFieldGetOutput.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def object_type(self):
        """Gets the object_type of this AccountCustomFieldGetOutput.  # noqa: E501


        :return: The object_type of this AccountCustomFieldGetOutput.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this AccountCustomFieldGetOutput.


        :param object_type: The object_type of this AccountCustomFieldGetOutput.  # noqa: E501
        :type: str
        """

        self._object_type = object_type

    @property
    def required(self):
        """Gets the required of this AccountCustomFieldGetOutput.  # noqa: E501


        :return: The required of this AccountCustomFieldGetOutput.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this AccountCustomFieldGetOutput.


        :param required: The required of this AccountCustomFieldGetOutput.  # noqa: E501
        :type: bool
        """

        self._required = required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountCustomFieldGetOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountCustomFieldGetOutput):
            return True

        return self.to_dict() != other.to_dict()
