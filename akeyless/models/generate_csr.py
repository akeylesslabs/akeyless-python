# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GenerateCsr(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alg': 'str',
        'alt_names': 'str',
        'certificate_type': 'str',
        'city': 'str',
        'common_name': 'str',
        'country': 'str',
        'critical': 'bool',
        'dep': 'str',
        'email_addresses': 'str',
        'generate_key': 'bool',
        'ip_addresses': 'str',
        'json': 'bool',
        'name': 'str',
        'org': 'str',
        'state': 'str',
        'token': 'str',
        'uid_token': 'str',
        'uri_sans': 'str'
    }

    attribute_map = {
        'alg': 'alg',
        'alt_names': 'alt-names',
        'certificate_type': 'certificate-type',
        'city': 'city',
        'common_name': 'common-name',
        'country': 'country',
        'critical': 'critical',
        'dep': 'dep',
        'email_addresses': 'email-addresses',
        'generate_key': 'generate-key',
        'ip_addresses': 'ip-addresses',
        'json': 'json',
        'name': 'name',
        'org': 'org',
        'state': 'state',
        'token': 'token',
        'uid_token': 'uid-token',
        'uri_sans': 'uri-sans'
    }

    def __init__(self, alg=None, alt_names=None, certificate_type=None, city=None, common_name=None, country=None, critical=None, dep=None, email_addresses=None, generate_key=None, ip_addresses=None, json=False, name=None, org=None, state=None, token=None, uid_token=None, uri_sans=None, local_vars_configuration=None):  # noqa: E501
        """GenerateCsr - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._alg = None
        self._alt_names = None
        self._certificate_type = None
        self._city = None
        self._common_name = None
        self._country = None
        self._critical = None
        self._dep = None
        self._email_addresses = None
        self._generate_key = None
        self._ip_addresses = None
        self._json = None
        self._name = None
        self._org = None
        self._state = None
        self._token = None
        self._uid_token = None
        self._uri_sans = None
        self.discriminator = None

        if alg is not None:
            self.alg = alg
        if alt_names is not None:
            self.alt_names = alt_names
        if certificate_type is not None:
            self.certificate_type = certificate_type
        if city is not None:
            self.city = city
        self.common_name = common_name
        if country is not None:
            self.country = country
        if critical is not None:
            self.critical = critical
        if dep is not None:
            self.dep = dep
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if generate_key is not None:
            self.generate_key = generate_key
        if ip_addresses is not None:
            self.ip_addresses = ip_addresses
        if json is not None:
            self.json = json
        self.name = name
        if org is not None:
            self.org = org
        if state is not None:
            self.state = state
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token
        if uri_sans is not None:
            self.uri_sans = uri_sans

    @property
    def alg(self):
        """Gets the alg of this GenerateCsr.  # noqa: E501


        :return: The alg of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._alg

    @alg.setter
    def alg(self, alg):
        """Sets the alg of this GenerateCsr.


        :param alg: The alg of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._alg = alg

    @property
    def alt_names(self):
        """Gets the alt_names of this GenerateCsr.  # noqa: E501

        A comma-separated list of dns alternative names  # noqa: E501

        :return: The alt_names of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._alt_names

    @alt_names.setter
    def alt_names(self, alt_names):
        """Sets the alt_names of this GenerateCsr.

        A comma-separated list of dns alternative names  # noqa: E501

        :param alt_names: The alt_names of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._alt_names = alt_names

    @property
    def certificate_type(self):
        """Gets the certificate_type of this GenerateCsr.  # noqa: E501

        The certificate type to be included in the CSR certificate (ssl-client/ssl-server/certificate-signing)  # noqa: E501

        :return: The certificate_type of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._certificate_type

    @certificate_type.setter
    def certificate_type(self, certificate_type):
        """Sets the certificate_type of this GenerateCsr.

        The certificate type to be included in the CSR certificate (ssl-client/ssl-server/certificate-signing)  # noqa: E501

        :param certificate_type: The certificate_type of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._certificate_type = certificate_type

    @property
    def city(self):
        """Gets the city of this GenerateCsr.  # noqa: E501

        The city to be included in the CSR certificate  # noqa: E501

        :return: The city of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this GenerateCsr.

        The city to be included in the CSR certificate  # noqa: E501

        :param city: The city of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def common_name(self):
        """Gets the common_name of this GenerateCsr.  # noqa: E501

        The common name to be included in the CSR certificate  # noqa: E501

        :return: The common_name of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this GenerateCsr.

        The common name to be included in the CSR certificate  # noqa: E501

        :param common_name: The common_name of this GenerateCsr.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and common_name is None:  # noqa: E501
            raise ValueError("Invalid value for `common_name`, must not be `None`")  # noqa: E501

        self._common_name = common_name

    @property
    def country(self):
        """Gets the country of this GenerateCsr.  # noqa: E501

        The country to be included in the CSR certificate  # noqa: E501

        :return: The country of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this GenerateCsr.

        The country to be included in the CSR certificate  # noqa: E501

        :param country: The country of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def critical(self):
        """Gets the critical of this GenerateCsr.  # noqa: E501

        Add critical to the key usage extension (will be false if not added)  # noqa: E501

        :return: The critical of this GenerateCsr.  # noqa: E501
        :rtype: bool
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this GenerateCsr.

        Add critical to the key usage extension (will be false if not added)  # noqa: E501

        :param critical: The critical of this GenerateCsr.  # noqa: E501
        :type: bool
        """

        self._critical = critical

    @property
    def dep(self):
        """Gets the dep of this GenerateCsr.  # noqa: E501

        The department to be included in the CSR certificate  # noqa: E501

        :return: The dep of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._dep

    @dep.setter
    def dep(self, dep):
        """Sets the dep of this GenerateCsr.

        The department to be included in the CSR certificate  # noqa: E501

        :param dep: The dep of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._dep = dep

    @property
    def email_addresses(self):
        """Gets the email_addresses of this GenerateCsr.  # noqa: E501

        A comma-separated list of email addresses alternative names  # noqa: E501

        :return: The email_addresses of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this GenerateCsr.

        A comma-separated list of email addresses alternative names  # noqa: E501

        :param email_addresses: The email_addresses of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._email_addresses = email_addresses

    @property
    def generate_key(self):
        """Gets the generate_key of this GenerateCsr.  # noqa: E501

        Generate a new classic key for the csr  # noqa: E501

        :return: The generate_key of this GenerateCsr.  # noqa: E501
        :rtype: bool
        """
        return self._generate_key

    @generate_key.setter
    def generate_key(self, generate_key):
        """Sets the generate_key of this GenerateCsr.

        Generate a new classic key for the csr  # noqa: E501

        :param generate_key: The generate_key of this GenerateCsr.  # noqa: E501
        :type: bool
        """

        self._generate_key = generate_key

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this GenerateCsr.  # noqa: E501

        A comma-separated list of ip addresses alternative names  # noqa: E501

        :return: The ip_addresses of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this GenerateCsr.

        A comma-separated list of ip addresses alternative names  # noqa: E501

        :param ip_addresses: The ip_addresses of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._ip_addresses = ip_addresses

    @property
    def json(self):
        """Gets the json of this GenerateCsr.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this GenerateCsr.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this GenerateCsr.

        Set output format to JSON  # noqa: E501

        :param json: The json of this GenerateCsr.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def name(self):
        """Gets the name of this GenerateCsr.  # noqa: E501

        The classic key name  # noqa: E501

        :return: The name of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GenerateCsr.

        The classic key name  # noqa: E501

        :param name: The name of this GenerateCsr.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def org(self):
        """Gets the org of this GenerateCsr.  # noqa: E501

        The organization to be included in the CSR certificate  # noqa: E501

        :return: The org of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._org

    @org.setter
    def org(self, org):
        """Sets the org of this GenerateCsr.

        The organization to be included in the CSR certificate  # noqa: E501

        :param org: The org of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._org = org

    @property
    def state(self):
        """Gets the state of this GenerateCsr.  # noqa: E501

        The state to be included in the CSR certificate  # noqa: E501

        :return: The state of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GenerateCsr.

        The state to be included in the CSR certificate  # noqa: E501

        :param state: The state of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def token(self):
        """Gets the token of this GenerateCsr.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GenerateCsr.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this GenerateCsr.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this GenerateCsr.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    @property
    def uri_sans(self):
        """Gets the uri_sans of this GenerateCsr.  # noqa: E501

        A comma-separated list of uri alternative names  # noqa: E501

        :return: The uri_sans of this GenerateCsr.  # noqa: E501
        :rtype: str
        """
        return self._uri_sans

    @uri_sans.setter
    def uri_sans(self, uri_sans):
        """Sets the uri_sans of this GenerateCsr.

        A comma-separated list of uri alternative names  # noqa: E501

        :param uri_sans: The uri_sans of this GenerateCsr.  # noqa: E501
        :type: str
        """

        self._uri_sans = uri_sans

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateCsr):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateCsr):
            return True

        return self.to_dict() != other.to_dict()
