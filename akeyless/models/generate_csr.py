# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GenerateCsr(BaseModel):
    """
    GenerateCsr
    """ # noqa: E501
    alg: Optional[StrictStr] = None
    alt_names: Optional[StrictStr] = Field(default=None, description="A comma-separated list of dns alternative names", alias="alt-names")
    certificate_type: Optional[StrictStr] = Field(default=None, description="The certificate type to be included in the CSR certificate (ssl-client/ssl-server/certificate-signing)", alias="certificate-type")
    city: Optional[StrictStr] = Field(default=None, description="The city to be included in the CSR certificate")
    common_name: StrictStr = Field(description="The common name to be included in the CSR certificate", alias="common-name")
    country: Optional[StrictStr] = Field(default=None, description="The country to be included in the CSR certificate")
    critical: Optional[StrictBool] = Field(default=None, description="Add critical to the key usage extension (will be false if not added)")
    dep: Optional[StrictStr] = Field(default=None, description="The department to be included in the CSR certificate")
    email_addresses: Optional[StrictStr] = Field(default=None, description="A comma-separated list of email addresses alternative names", alias="email-addresses")
    export_private_key: Optional[StrictBool] = Field(default=False, description="The flag to indicate if the private key should be exported", alias="export-private-key")
    generate_key: Optional[StrictBool] = Field(default=None, description="Generate a new classic key for the csr", alias="generate-key")
    ip_addresses: Optional[StrictStr] = Field(default=None, description="A comma-separated list of ip addresses alternative names", alias="ip-addresses")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    key_type: StrictStr = Field(description="The type of the key to generate (classic-key/dfc)", alias="key-type")
    name: StrictStr = Field(description="The key name")
    org: Optional[StrictStr] = Field(default=None, description="The organization to be included in the CSR certificate")
    split_level: Optional[StrictInt] = Field(default=3, description="The number of fragments that the item will be split into (not includes customer fragment)", alias="split-level")
    state: Optional[StrictStr] = Field(default=None, description="The state to be included in the CSR certificate")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    uri_sans: Optional[StrictStr] = Field(default=None, description="A comma-separated list of uri alternative names", alias="uri-sans")
    __properties: ClassVar[List[str]] = ["alg", "alt-names", "certificate-type", "city", "common-name", "country", "critical", "dep", "email-addresses", "export-private-key", "generate-key", "ip-addresses", "json", "key-type", "name", "org", "split-level", "state", "token", "uid-token", "uri-sans"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateCsr from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateCsr from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alg": obj.get("alg"),
            "alt-names": obj.get("alt-names"),
            "certificate-type": obj.get("certificate-type"),
            "city": obj.get("city"),
            "common-name": obj.get("common-name"),
            "country": obj.get("country"),
            "critical": obj.get("critical"),
            "dep": obj.get("dep"),
            "email-addresses": obj.get("email-addresses"),
            "export-private-key": obj.get("export-private-key") if obj.get("export-private-key") is not None else False,
            "generate-key": obj.get("generate-key"),
            "ip-addresses": obj.get("ip-addresses"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "key-type": obj.get("key-type") if obj.get("key-type") is not None else 'classic-key',
            "name": obj.get("name"),
            "org": obj.get("org"),
            "split-level": obj.get("split-level") if obj.get("split-level") is not None else 3,
            "state": obj.get("state"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "uri-sans": obj.get("uri-sans")
        })
        return _obj


