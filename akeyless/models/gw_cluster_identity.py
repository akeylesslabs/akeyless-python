# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.cf_info import CfInfo
from typing import Optional, Set
from typing_extensions import Self

class GwClusterIdentity(BaseModel):
    """
    GwClusterIdentity
    """ # noqa: E501
    action_allowed: Optional[StrictBool] = None
    allowed: Optional[StrictBool] = None
    allowed_access_ids: Optional[List[StrictStr]] = None
    cluster_name: Optional[StrictStr] = None
    cluster_url: Optional[StrictStr] = None
    current_gw: Optional[StrictBool] = None
    customer_fragment_ids: Optional[List[StrictStr]] = Field(default=None, description="Deprecated - use CustomerFragments instead")
    customer_fragments: Optional[List[CfInfo]] = None
    default_protection_key_id: Optional[StrictInt] = None
    default_secret_location: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    is_kerberos_auth_enabled: Optional[StrictBool] = None
    is_ldap_auth_enabled: Optional[StrictBool] = None
    serverless_type: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    status_description: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["action_allowed", "allowed", "allowed_access_ids", "cluster_name", "cluster_url", "current_gw", "customer_fragment_ids", "customer_fragments", "default_protection_key_id", "default_secret_location", "display_name", "id", "is_kerberos_auth_enabled", "is_ldap_auth_enabled", "serverless_type", "status", "status_description"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GwClusterIdentity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in customer_fragments (list)
        _items = []
        if self.customer_fragments:
            for _item_customer_fragments in self.customer_fragments:
                if _item_customer_fragments:
                    _items.append(_item_customer_fragments.to_dict())
            _dict['customer_fragments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GwClusterIdentity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action_allowed": obj.get("action_allowed"),
            "allowed": obj.get("allowed"),
            "allowed_access_ids": obj.get("allowed_access_ids"),
            "cluster_name": obj.get("cluster_name"),
            "cluster_url": obj.get("cluster_url"),
            "current_gw": obj.get("current_gw"),
            "customer_fragment_ids": obj.get("customer_fragment_ids"),
            "customer_fragments": [CfInfo.from_dict(_item) for _item in obj["customer_fragments"]] if obj.get("customer_fragments") is not None else None,
            "default_protection_key_id": obj.get("default_protection_key_id"),
            "default_secret_location": obj.get("default_secret_location"),
            "display_name": obj.get("display_name"),
            "id": obj.get("id"),
            "is_kerberos_auth_enabled": obj.get("is_kerberos_auth_enabled"),
            "is_ldap_auth_enabled": obj.get("is_ldap_auth_enabled"),
            "serverless_type": obj.get("serverless_type"),
            "status": obj.get("status"),
            "status_description": obj.get("status_description")
        })
        return _obj


