# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayCreateProducerAws(BaseModel):
    """
    gatewayCreateProducerAws is a command that creates aws producer [Deprecated: Use dynamic-secret-create-aws command]
    """ # noqa: E501
    access_mode: Optional[StrictStr] = Field(default=None, alias="access-mode")
    admin_rotation_interval_days: Optional[StrictInt] = Field(default=0, description="Admin credentials rotation interval (days)", alias="admin-rotation-interval-days")
    aws_access_key_id: Optional[StrictStr] = Field(default=None, description="Access Key ID", alias="aws-access-key-id")
    aws_access_secret_key: Optional[StrictStr] = Field(default=None, description="Secret Access Key", alias="aws-access-secret-key")
    aws_role_arns: Optional[StrictStr] = Field(default=None, description="AWS Role ARNs to be used in the Assume Role operation (relevant only for assume_role mode)", alias="aws-role-arns")
    aws_user_console_access: Optional[StrictBool] = Field(default=False, description="AWS User console access", alias="aws-user-console-access")
    aws_user_groups: Optional[StrictStr] = Field(default=None, description="AWS User groups", alias="aws-user-groups")
    aws_user_policies: Optional[StrictStr] = Field(default=None, description="AWS User policies", alias="aws-user-policies")
    aws_user_programmatic_access: Optional[StrictBool] = Field(default=True, description="Enable AWS User programmatic access", alias="aws-user-programmatic-access")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    enable_admin_rotation: Optional[StrictBool] = Field(default=False, description="Automatic admin credentials rotation", alias="enable-admin-rotation")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    name: StrictStr = Field(description="Dynamic secret name")
    password_length: Optional[StrictStr] = Field(default=None, description="The length of the password to be generated", alias="password-length")
    producer_encryption_key_name: Optional[StrictStr] = Field(default=None, description="Dynamic producer encryption key", alias="producer-encryption-key-name")
    region: Optional[StrictStr] = Field(default='us-east-2', description="Region")
    secure_access_aws_account_id: Optional[StrictStr] = Field(default=None, description="The AWS account id", alias="secure-access-aws-account-id")
    secure_access_aws_native_cli: Optional[StrictBool] = Field(default=None, description="The AWS native cli", alias="secure-access-aws-native-cli")
    secure_access_bastion_issuer: Optional[StrictStr] = Field(default=None, description="Deprecated. use secure-access-certificate-issuer", alias="secure-access-bastion-issuer")
    secure_access_certificate_issuer: Optional[StrictStr] = Field(default=None, description="Path to the SSH Certificate Issuer for your Akeyless Secure Access", alias="secure-access-certificate-issuer")
    secure_access_delay: Optional[StrictInt] = Field(default=None, description="The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds", alias="secure-access-delay")
    secure_access_enable: Optional[StrictStr] = Field(default=None, description="Enable/Disable secure remote access [true/false]", alias="secure-access-enable")
    secure_access_web: Optional[StrictBool] = Field(default=True, description="Enable Web Secure Remote Access", alias="secure-access-web")
    secure_access_web_browsing: Optional[StrictBool] = Field(default=False, description="Secure browser via Akeyless's Secure Remote Access (SRA)", alias="secure-access-web-browsing")
    secure_access_web_proxy: Optional[StrictBool] = Field(default=False, description="Web-Proxy via Akeyless's Secure Remote Access (SRA)", alias="secure-access-web-proxy")
    session_tags: Optional[StrictStr] = Field(default=None, description="String of Key value session tags comma separated, relevant only for Assumed Role", alias="session-tags")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Add tags attached to this object")
    target_name: Optional[StrictStr] = Field(default=None, description="Target name", alias="target-name")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    transitive_tag_keys: Optional[StrictStr] = Field(default=None, description="String of transitive tag keys space separated, relevant only for Assumed Role", alias="transitive-tag-keys")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    user_ttl: Optional[StrictStr] = Field(default='60m', description="User TTL", alias="user-ttl")
    __properties: ClassVar[List[str]] = ["access-mode", "admin-rotation-interval-days", "aws-access-key-id", "aws-access-secret-key", "aws-role-arns", "aws-user-console-access", "aws-user-groups", "aws-user-policies", "aws-user-programmatic-access", "delete_protection", "enable-admin-rotation", "json", "name", "password-length", "producer-encryption-key-name", "region", "secure-access-aws-account-id", "secure-access-aws-native-cli", "secure-access-bastion-issuer", "secure-access-certificate-issuer", "secure-access-delay", "secure-access-enable", "secure-access-web", "secure-access-web-browsing", "secure-access-web-proxy", "session-tags", "tags", "target-name", "token", "transitive-tag-keys", "uid-token", "user-ttl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayCreateProducerAws from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayCreateProducerAws from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access-mode": obj.get("access-mode"),
            "admin-rotation-interval-days": obj.get("admin-rotation-interval-days") if obj.get("admin-rotation-interval-days") is not None else 0,
            "aws-access-key-id": obj.get("aws-access-key-id"),
            "aws-access-secret-key": obj.get("aws-access-secret-key"),
            "aws-role-arns": obj.get("aws-role-arns"),
            "aws-user-console-access": obj.get("aws-user-console-access") if obj.get("aws-user-console-access") is not None else False,
            "aws-user-groups": obj.get("aws-user-groups"),
            "aws-user-policies": obj.get("aws-user-policies"),
            "aws-user-programmatic-access": obj.get("aws-user-programmatic-access") if obj.get("aws-user-programmatic-access") is not None else True,
            "delete_protection": obj.get("delete_protection"),
            "enable-admin-rotation": obj.get("enable-admin-rotation") if obj.get("enable-admin-rotation") is not None else False,
            "json": obj.get("json") if obj.get("json") is not None else False,
            "name": obj.get("name"),
            "password-length": obj.get("password-length"),
            "producer-encryption-key-name": obj.get("producer-encryption-key-name"),
            "region": obj.get("region") if obj.get("region") is not None else 'us-east-2',
            "secure-access-aws-account-id": obj.get("secure-access-aws-account-id"),
            "secure-access-aws-native-cli": obj.get("secure-access-aws-native-cli"),
            "secure-access-bastion-issuer": obj.get("secure-access-bastion-issuer"),
            "secure-access-certificate-issuer": obj.get("secure-access-certificate-issuer"),
            "secure-access-delay": obj.get("secure-access-delay"),
            "secure-access-enable": obj.get("secure-access-enable"),
            "secure-access-web": obj.get("secure-access-web") if obj.get("secure-access-web") is not None else True,
            "secure-access-web-browsing": obj.get("secure-access-web-browsing") if obj.get("secure-access-web-browsing") is not None else False,
            "secure-access-web-proxy": obj.get("secure-access-web-proxy") if obj.get("secure-access-web-proxy") is not None else False,
            "session-tags": obj.get("session-tags"),
            "tags": obj.get("tags"),
            "target-name": obj.get("target-name"),
            "token": obj.get("token"),
            "transitive-tag-keys": obj.get("transitive-tag-keys"),
            "uid-token": obj.get("uid-token"),
            "user-ttl": obj.get("user-ttl") if obj.get("user-ttl") is not None else '60m'
        })
        return _obj


