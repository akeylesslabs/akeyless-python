# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ListItems(BaseModel):
    """
    ListItems
    """ # noqa: E501
    accessibility: Optional[StrictStr] = Field(default='regular', description="for personal password manager")
    advanced_filter: Optional[StrictStr] = Field(default=None, description="Filter by item name/username/website or part of it", alias="advanced-filter")
    auto_pagination: Optional[StrictStr] = Field(default='enabled', description="Retrieve all items using pagination, when disabled retrieving only first 1000 items", alias="auto-pagination")
    filter: Optional[StrictStr] = Field(default=None, description="Filter by item name or part of it")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    minimal_view: Optional[StrictBool] = Field(default=None, description="Show only basic information of the items", alias="minimal-view")
    modified_after: Optional[StrictInt] = Field(default=None, description="List only secrets modified after specified date (in unix time)", alias="modified-after")
    pagination_token: Optional[StrictStr] = Field(default=None, description="Next page reference", alias="pagination-token")
    path: Optional[StrictStr] = Field(default=None, description="Path to folder")
    sra_only: Optional[StrictBool] = Field(default=False, description="Filter by items with SRA functionality enabled", alias="sra-only")
    sub_types: Optional[List[StrictStr]] = Field(default=None, alias="sub-types")
    tag: Optional[StrictStr] = Field(default=None, description="Filter by item tag")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    type: Optional[List[StrictStr]] = Field(default=None, description="The item types list of the requested items. In case it is empty, all types of items will be returned. options: [key, static-secret, dynamic-secret, classic-key]")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["accessibility", "advanced-filter", "auto-pagination", "filter", "json", "minimal-view", "modified-after", "pagination-token", "path", "sra-only", "sub-types", "tag", "token", "type", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ListItems from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ListItems from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessibility": obj.get("accessibility") if obj.get("accessibility") is not None else 'regular',
            "advanced-filter": obj.get("advanced-filter"),
            "auto-pagination": obj.get("auto-pagination") if obj.get("auto-pagination") is not None else 'enabled',
            "filter": obj.get("filter"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "minimal-view": obj.get("minimal-view"),
            "modified-after": obj.get("modified-after"),
            "pagination-token": obj.get("pagination-token"),
            "path": obj.get("path"),
            "sra-only": obj.get("sra-only") if obj.get("sra-only") is not None else False,
            "sub-types": obj.get("sub-types"),
            "tag": obj.get("tag"),
            "token": obj.get("token"),
            "type": obj.get("type"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


