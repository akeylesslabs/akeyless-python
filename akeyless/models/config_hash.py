# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ConfigHash(BaseModel):
    """
    ConfigHash
    """ # noqa: E501
    admins: Optional[StrictStr] = None
    cache: Optional[StrictStr] = None
    customer_fragements: Optional[StrictStr] = None
    general: Optional[StrictStr] = None
    k8s_auths: Optional[StrictStr] = None
    kmip: Optional[StrictStr] = None
    ldap: Optional[StrictStr] = None
    leadership: Optional[StrictStr] = None
    log_forwarding: Optional[StrictStr] = None
    m_queue: Optional[StrictStr] = None
    migration_status: Optional[StrictStr] = None
    migrations: Optional[StrictStr] = None
    producers: Optional[Any] = None
    producers_status: Optional[StrictStr] = None
    rotators: Optional[Any] = None
    saml: Optional[StrictStr] = None
    universal_identity: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["admins", "cache", "customer_fragements", "general", "k8s_auths", "kmip", "ldap", "leadership", "log_forwarding", "m_queue", "migration_status", "migrations", "producers", "producers_status", "rotators", "saml", "universal_identity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigHash from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if producers (nullable) is None
        # and model_fields_set contains the field
        if self.producers is None and "producers" in self.model_fields_set:
            _dict['producers'] = None

        # set to None if rotators (nullable) is None
        # and model_fields_set contains the field
        if self.rotators is None and "rotators" in self.model_fields_set:
            _dict['rotators'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigHash from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admins": obj.get("admins"),
            "cache": obj.get("cache"),
            "customer_fragements": obj.get("customer_fragements"),
            "general": obj.get("general"),
            "k8s_auths": obj.get("k8s_auths"),
            "kmip": obj.get("kmip"),
            "ldap": obj.get("ldap"),
            "leadership": obj.get("leadership"),
            "log_forwarding": obj.get("log_forwarding"),
            "m_queue": obj.get("m_queue"),
            "migration_status": obj.get("migration_status"),
            "migrations": obj.get("migrations"),
            "producers": obj.get("producers"),
            "producers_status": obj.get("producers_status"),
            "rotators": obj.get("rotators"),
            "saml": obj.get("saml"),
            "universal_identity": obj.get("universal_identity")
        })
        return _obj


