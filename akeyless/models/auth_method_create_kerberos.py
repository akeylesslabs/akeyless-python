# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class AuthMethodCreateKerberos(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_expires': 'int',
        'audit_logs_claims': 'list[str]',
        'bind_dn': 'str',
        'bind_dn_password': 'str',
        'bound_ips': 'list[str]',
        'delete_protection': 'str',
        'description': 'str',
        'force_sub_claims': 'bool',
        'group_attr': 'str',
        'group_dn': 'str',
        'group_filter': 'str',
        'gw_bound_ips': 'list[str]',
        'json': 'bool',
        'jwt_ttl': 'int',
        'keytab_file_data': 'str',
        'keytab_file_path': 'str',
        'krb5_conf_data': 'str',
        'krb5_conf_path': 'str',
        'ldap_anonymous_search': 'bool',
        'ldap_ca_cert': 'str',
        'ldap_url': 'str',
        'name': 'str',
        'product_type': 'list[str]',
        'subclaims_delimiters': 'list[str]',
        'token': 'str',
        'uid_token': 'str',
        'unique_identifier': 'str',
        'user_attribute': 'str',
        'user_dn': 'str'
    }

    attribute_map = {
        'access_expires': 'access-expires',
        'audit_logs_claims': 'audit-logs-claims',
        'bind_dn': 'bind-dn',
        'bind_dn_password': 'bind-dn-password',
        'bound_ips': 'bound-ips',
        'delete_protection': 'delete_protection',
        'description': 'description',
        'force_sub_claims': 'force-sub-claims',
        'group_attr': 'group-attr',
        'group_dn': 'group-dn',
        'group_filter': 'group-filter',
        'gw_bound_ips': 'gw-bound-ips',
        'json': 'json',
        'jwt_ttl': 'jwt-ttl',
        'keytab_file_data': 'keytab-file-data',
        'keytab_file_path': 'keytab-file-path',
        'krb5_conf_data': 'krb5-conf-data',
        'krb5_conf_path': 'krb5-conf-path',
        'ldap_anonymous_search': 'ldap-anonymous-search',
        'ldap_ca_cert': 'ldap-ca-cert',
        'ldap_url': 'ldap-url',
        'name': 'name',
        'product_type': 'product-type',
        'subclaims_delimiters': 'subclaims-delimiters',
        'token': 'token',
        'uid_token': 'uid-token',
        'unique_identifier': 'unique-identifier',
        'user_attribute': 'user-attribute',
        'user_dn': 'user-dn'
    }

    def __init__(self, access_expires=0, audit_logs_claims=None, bind_dn=None, bind_dn_password=None, bound_ips=None, delete_protection=None, description=None, force_sub_claims=None, group_attr=None, group_dn=None, group_filter=None, gw_bound_ips=None, json=False, jwt_ttl=0, keytab_file_data=None, keytab_file_path=None, krb5_conf_data=None, krb5_conf_path=None, ldap_anonymous_search=None, ldap_ca_cert=None, ldap_url=None, name=None, product_type=None, subclaims_delimiters=None, token=None, uid_token=None, unique_identifier=None, user_attribute=None, user_dn=None, local_vars_configuration=None):  # noqa: E501
        """AuthMethodCreateKerberos - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_expires = None
        self._audit_logs_claims = None
        self._bind_dn = None
        self._bind_dn_password = None
        self._bound_ips = None
        self._delete_protection = None
        self._description = None
        self._force_sub_claims = None
        self._group_attr = None
        self._group_dn = None
        self._group_filter = None
        self._gw_bound_ips = None
        self._json = None
        self._jwt_ttl = None
        self._keytab_file_data = None
        self._keytab_file_path = None
        self._krb5_conf_data = None
        self._krb5_conf_path = None
        self._ldap_anonymous_search = None
        self._ldap_ca_cert = None
        self._ldap_url = None
        self._name = None
        self._product_type = None
        self._subclaims_delimiters = None
        self._token = None
        self._uid_token = None
        self._unique_identifier = None
        self._user_attribute = None
        self._user_dn = None
        self.discriminator = None

        if access_expires is not None:
            self.access_expires = access_expires
        if audit_logs_claims is not None:
            self.audit_logs_claims = audit_logs_claims
        if bind_dn is not None:
            self.bind_dn = bind_dn
        if bind_dn_password is not None:
            self.bind_dn_password = bind_dn_password
        if bound_ips is not None:
            self.bound_ips = bound_ips
        if delete_protection is not None:
            self.delete_protection = delete_protection
        if description is not None:
            self.description = description
        if force_sub_claims is not None:
            self.force_sub_claims = force_sub_claims
        if group_attr is not None:
            self.group_attr = group_attr
        if group_dn is not None:
            self.group_dn = group_dn
        if group_filter is not None:
            self.group_filter = group_filter
        if gw_bound_ips is not None:
            self.gw_bound_ips = gw_bound_ips
        if json is not None:
            self.json = json
        if jwt_ttl is not None:
            self.jwt_ttl = jwt_ttl
        if keytab_file_data is not None:
            self.keytab_file_data = keytab_file_data
        if keytab_file_path is not None:
            self.keytab_file_path = keytab_file_path
        if krb5_conf_data is not None:
            self.krb5_conf_data = krb5_conf_data
        if krb5_conf_path is not None:
            self.krb5_conf_path = krb5_conf_path
        if ldap_anonymous_search is not None:
            self.ldap_anonymous_search = ldap_anonymous_search
        if ldap_ca_cert is not None:
            self.ldap_ca_cert = ldap_ca_cert
        if ldap_url is not None:
            self.ldap_url = ldap_url
        self.name = name
        if product_type is not None:
            self.product_type = product_type
        if subclaims_delimiters is not None:
            self.subclaims_delimiters = subclaims_delimiters
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if user_attribute is not None:
            self.user_attribute = user_attribute
        if user_dn is not None:
            self.user_dn = user_dn

    @property
    def access_expires(self):
        """Gets the access_expires of this AuthMethodCreateKerberos.  # noqa: E501

        Access expiration date in Unix timestamp (select 0 for access without expiry date)  # noqa: E501

        :return: The access_expires of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: int
        """
        return self._access_expires

    @access_expires.setter
    def access_expires(self, access_expires):
        """Sets the access_expires of this AuthMethodCreateKerberos.

        Access expiration date in Unix timestamp (select 0 for access without expiry date)  # noqa: E501

        :param access_expires: The access_expires of this AuthMethodCreateKerberos.  # noqa: E501
        :type: int
        """

        self._access_expires = access_expires

    @property
    def audit_logs_claims(self):
        """Gets the audit_logs_claims of this AuthMethodCreateKerberos.  # noqa: E501

        Subclaims to include in audit logs, e.g \"--audit-logs-claims email --audit-logs-claims username\"  # noqa: E501

        :return: The audit_logs_claims of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: list[str]
        """
        return self._audit_logs_claims

    @audit_logs_claims.setter
    def audit_logs_claims(self, audit_logs_claims):
        """Sets the audit_logs_claims of this AuthMethodCreateKerberos.

        Subclaims to include in audit logs, e.g \"--audit-logs-claims email --audit-logs-claims username\"  # noqa: E501

        :param audit_logs_claims: The audit_logs_claims of this AuthMethodCreateKerberos.  # noqa: E501
        :type: list[str]
        """

        self._audit_logs_claims = audit_logs_claims

    @property
    def bind_dn(self):
        """Gets the bind_dn of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The bind_dn of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._bind_dn

    @bind_dn.setter
    def bind_dn(self, bind_dn):
        """Sets the bind_dn of this AuthMethodCreateKerberos.


        :param bind_dn: The bind_dn of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._bind_dn = bind_dn

    @property
    def bind_dn_password(self):
        """Gets the bind_dn_password of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The bind_dn_password of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._bind_dn_password

    @bind_dn_password.setter
    def bind_dn_password(self, bind_dn_password):
        """Sets the bind_dn_password of this AuthMethodCreateKerberos.


        :param bind_dn_password: The bind_dn_password of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._bind_dn_password = bind_dn_password

    @property
    def bound_ips(self):
        """Gets the bound_ips of this AuthMethodCreateKerberos.  # noqa: E501

        A CIDR whitelist with the IPs that the access is restricted to  # noqa: E501

        :return: The bound_ips of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: list[str]
        """
        return self._bound_ips

    @bound_ips.setter
    def bound_ips(self, bound_ips):
        """Sets the bound_ips of this AuthMethodCreateKerberos.

        A CIDR whitelist with the IPs that the access is restricted to  # noqa: E501

        :param bound_ips: The bound_ips of this AuthMethodCreateKerberos.  # noqa: E501
        :type: list[str]
        """

        self._bound_ips = bound_ips

    @property
    def delete_protection(self):
        """Gets the delete_protection of this AuthMethodCreateKerberos.  # noqa: E501

        Protection from accidental deletion of this object [true/false]  # noqa: E501

        :return: The delete_protection of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._delete_protection

    @delete_protection.setter
    def delete_protection(self, delete_protection):
        """Sets the delete_protection of this AuthMethodCreateKerberos.

        Protection from accidental deletion of this object [true/false]  # noqa: E501

        :param delete_protection: The delete_protection of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._delete_protection = delete_protection

    @property
    def description(self):
        """Gets the description of this AuthMethodCreateKerberos.  # noqa: E501

        Auth Method description  # noqa: E501

        :return: The description of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AuthMethodCreateKerberos.

        Auth Method description  # noqa: E501

        :param description: The description of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def force_sub_claims(self):
        """Gets the force_sub_claims of this AuthMethodCreateKerberos.  # noqa: E501

        if true: enforce role-association must include sub claims  # noqa: E501

        :return: The force_sub_claims of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: bool
        """
        return self._force_sub_claims

    @force_sub_claims.setter
    def force_sub_claims(self, force_sub_claims):
        """Sets the force_sub_claims of this AuthMethodCreateKerberos.

        if true: enforce role-association must include sub claims  # noqa: E501

        :param force_sub_claims: The force_sub_claims of this AuthMethodCreateKerberos.  # noqa: E501
        :type: bool
        """

        self._force_sub_claims = force_sub_claims

    @property
    def group_attr(self):
        """Gets the group_attr of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The group_attr of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._group_attr

    @group_attr.setter
    def group_attr(self, group_attr):
        """Sets the group_attr of this AuthMethodCreateKerberos.


        :param group_attr: The group_attr of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._group_attr = group_attr

    @property
    def group_dn(self):
        """Gets the group_dn of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The group_dn of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._group_dn

    @group_dn.setter
    def group_dn(self, group_dn):
        """Sets the group_dn of this AuthMethodCreateKerberos.


        :param group_dn: The group_dn of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._group_dn = group_dn

    @property
    def group_filter(self):
        """Gets the group_filter of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The group_filter of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._group_filter

    @group_filter.setter
    def group_filter(self, group_filter):
        """Sets the group_filter of this AuthMethodCreateKerberos.


        :param group_filter: The group_filter of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._group_filter = group_filter

    @property
    def gw_bound_ips(self):
        """Gets the gw_bound_ips of this AuthMethodCreateKerberos.  # noqa: E501

        A CIDR whitelist with the GW IPs that the access is restricted to  # noqa: E501

        :return: The gw_bound_ips of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: list[str]
        """
        return self._gw_bound_ips

    @gw_bound_ips.setter
    def gw_bound_ips(self, gw_bound_ips):
        """Sets the gw_bound_ips of this AuthMethodCreateKerberos.

        A CIDR whitelist with the GW IPs that the access is restricted to  # noqa: E501

        :param gw_bound_ips: The gw_bound_ips of this AuthMethodCreateKerberos.  # noqa: E501
        :type: list[str]
        """

        self._gw_bound_ips = gw_bound_ips

    @property
    def json(self):
        """Gets the json of this AuthMethodCreateKerberos.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this AuthMethodCreateKerberos.

        Set output format to JSON  # noqa: E501

        :param json: The json of this AuthMethodCreateKerberos.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def jwt_ttl(self):
        """Gets the jwt_ttl of this AuthMethodCreateKerberos.  # noqa: E501

        Jwt TTL  # noqa: E501

        :return: The jwt_ttl of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: int
        """
        return self._jwt_ttl

    @jwt_ttl.setter
    def jwt_ttl(self, jwt_ttl):
        """Sets the jwt_ttl of this AuthMethodCreateKerberos.

        Jwt TTL  # noqa: E501

        :param jwt_ttl: The jwt_ttl of this AuthMethodCreateKerberos.  # noqa: E501
        :type: int
        """

        self._jwt_ttl = jwt_ttl

    @property
    def keytab_file_data(self):
        """Gets the keytab_file_data of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The keytab_file_data of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._keytab_file_data

    @keytab_file_data.setter
    def keytab_file_data(self, keytab_file_data):
        """Sets the keytab_file_data of this AuthMethodCreateKerberos.


        :param keytab_file_data: The keytab_file_data of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._keytab_file_data = keytab_file_data

    @property
    def keytab_file_path(self):
        """Gets the keytab_file_path of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The keytab_file_path of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._keytab_file_path

    @keytab_file_path.setter
    def keytab_file_path(self, keytab_file_path):
        """Sets the keytab_file_path of this AuthMethodCreateKerberos.


        :param keytab_file_path: The keytab_file_path of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._keytab_file_path = keytab_file_path

    @property
    def krb5_conf_data(self):
        """Gets the krb5_conf_data of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The krb5_conf_data of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._krb5_conf_data

    @krb5_conf_data.setter
    def krb5_conf_data(self, krb5_conf_data):
        """Sets the krb5_conf_data of this AuthMethodCreateKerberos.


        :param krb5_conf_data: The krb5_conf_data of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._krb5_conf_data = krb5_conf_data

    @property
    def krb5_conf_path(self):
        """Gets the krb5_conf_path of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The krb5_conf_path of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._krb5_conf_path

    @krb5_conf_path.setter
    def krb5_conf_path(self, krb5_conf_path):
        """Sets the krb5_conf_path of this AuthMethodCreateKerberos.


        :param krb5_conf_path: The krb5_conf_path of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._krb5_conf_path = krb5_conf_path

    @property
    def ldap_anonymous_search(self):
        """Gets the ldap_anonymous_search of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The ldap_anonymous_search of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: bool
        """
        return self._ldap_anonymous_search

    @ldap_anonymous_search.setter
    def ldap_anonymous_search(self, ldap_anonymous_search):
        """Sets the ldap_anonymous_search of this AuthMethodCreateKerberos.


        :param ldap_anonymous_search: The ldap_anonymous_search of this AuthMethodCreateKerberos.  # noqa: E501
        :type: bool
        """

        self._ldap_anonymous_search = ldap_anonymous_search

    @property
    def ldap_ca_cert(self):
        """Gets the ldap_ca_cert of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The ldap_ca_cert of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._ldap_ca_cert

    @ldap_ca_cert.setter
    def ldap_ca_cert(self, ldap_ca_cert):
        """Sets the ldap_ca_cert of this AuthMethodCreateKerberos.


        :param ldap_ca_cert: The ldap_ca_cert of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._ldap_ca_cert = ldap_ca_cert

    @property
    def ldap_url(self):
        """Gets the ldap_url of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The ldap_url of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._ldap_url

    @ldap_url.setter
    def ldap_url(self, ldap_url):
        """Sets the ldap_url of this AuthMethodCreateKerberos.


        :param ldap_url: The ldap_url of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._ldap_url = ldap_url

    @property
    def name(self):
        """Gets the name of this AuthMethodCreateKerberos.  # noqa: E501

        Auth Method name  # noqa: E501

        :return: The name of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthMethodCreateKerberos.

        Auth Method name  # noqa: E501

        :param name: The name of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def product_type(self):
        """Gets the product_type of this AuthMethodCreateKerberos.  # noqa: E501

        Choose the relevant product type for the auth method [sm, sra, pm, dp, ca]  # noqa: E501

        :return: The product_type of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: list[str]
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this AuthMethodCreateKerberos.

        Choose the relevant product type for the auth method [sm, sra, pm, dp, ca]  # noqa: E501

        :param product_type: The product_type of this AuthMethodCreateKerberos.  # noqa: E501
        :type: list[str]
        """

        self._product_type = product_type

    @property
    def subclaims_delimiters(self):
        """Gets the subclaims_delimiters of this AuthMethodCreateKerberos.  # noqa: E501

        A list of additional sub claims delimiters (relevant only for SAML, OIDC, OAuth2/JWT)  # noqa: E501

        :return: The subclaims_delimiters of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: list[str]
        """
        return self._subclaims_delimiters

    @subclaims_delimiters.setter
    def subclaims_delimiters(self, subclaims_delimiters):
        """Sets the subclaims_delimiters of this AuthMethodCreateKerberos.

        A list of additional sub claims delimiters (relevant only for SAML, OIDC, OAuth2/JWT)  # noqa: E501

        :param subclaims_delimiters: The subclaims_delimiters of this AuthMethodCreateKerberos.  # noqa: E501
        :type: list[str]
        """

        self._subclaims_delimiters = subclaims_delimiters

    @property
    def token(self):
        """Gets the token of this AuthMethodCreateKerberos.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AuthMethodCreateKerberos.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this AuthMethodCreateKerberos.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this AuthMethodCreateKerberos.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this AuthMethodCreateKerberos.  # noqa: E501

        A unique identifier (ID) value which is a \"sub claim\" name that contains details uniquely identifying that resource. This \"sub claim\" is used to distinguish between different identities.  # noqa: E501

        :return: The unique_identifier of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this AuthMethodCreateKerberos.

        A unique identifier (ID) value which is a \"sub claim\" name that contains details uniquely identifying that resource. This \"sub claim\" is used to distinguish between different identities.  # noqa: E501

        :param unique_identifier: The unique_identifier of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def user_attribute(self):
        """Gets the user_attribute of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The user_attribute of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._user_attribute

    @user_attribute.setter
    def user_attribute(self, user_attribute):
        """Sets the user_attribute of this AuthMethodCreateKerberos.


        :param user_attribute: The user_attribute of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._user_attribute = user_attribute

    @property
    def user_dn(self):
        """Gets the user_dn of this AuthMethodCreateKerberos.  # noqa: E501


        :return: The user_dn of this AuthMethodCreateKerberos.  # noqa: E501
        :rtype: str
        """
        return self._user_dn

    @user_dn.setter
    def user_dn(self, user_dn):
        """Sets the user_dn of this AuthMethodCreateKerberos.


        :param user_dn: The user_dn of this AuthMethodCreateKerberos.  # noqa: E501
        :type: str
        """

        self._user_dn = user_dn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthMethodCreateKerberos):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthMethodCreateKerberos):
            return True

        return self.to_dict() != other.to_dict()
