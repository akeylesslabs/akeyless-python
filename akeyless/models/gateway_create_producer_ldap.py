# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayCreateProducerLdap(BaseModel):
    """
    gatewayCreateProducerLdap is a command that creates ldap producer [Deprecated: Use dynamic-secret-create-ldap command]
    """ # noqa: E501
    provider_type: Optional[StrictStr] = Field(default=None, alias="ProviderType")
    bind_dn: Optional[StrictStr] = Field(default=None, description="Bind DN", alias="bind-dn")
    bind_dn_password: Optional[StrictStr] = Field(default=None, description="Bind DN Password", alias="bind-dn-password")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    external_username: Optional[StrictStr] = Field(default='false', description="Externally provided username [true/false]", alias="external-username")
    fixed_user_claim_keyname: Optional[StrictStr] = Field(default='ext_username', description="For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for external-username=true)", alias="fixed-user-claim-keyname")
    group_dn: Optional[StrictStr] = Field(default=None, description="Group DN which the temporary user should be added", alias="group-dn")
    host_provider: Optional[StrictStr] = Field(default=None, description="Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret", alias="host-provider")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    ldap_ca_cert: Optional[StrictStr] = Field(default=None, description="CA Certificate File Content", alias="ldap-ca-cert")
    ldap_url: Optional[StrictStr] = Field(default=None, description="LDAP Server URL", alias="ldap-url")
    name: StrictStr = Field(description="Dynamic secret name")
    password_length: Optional[StrictStr] = Field(default=None, description="The length of the password to be generated", alias="password-length")
    producer_encryption_key_name: Optional[StrictStr] = Field(default=None, description="Dynamic producer encryption key", alias="producer-encryption-key-name")
    secure_access_delay: Optional[StrictInt] = Field(default=None, description="The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds", alias="secure-access-delay")
    secure_access_enable: Optional[StrictStr] = Field(default=None, description="Enable/Disable secure remote access [true/false]", alias="secure-access-enable")
    secure_access_host: Optional[List[StrictStr]] = Field(default=None, description="Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)", alias="secure-access-host")
    secure_access_rd_gateway_server: Optional[StrictStr] = Field(default=None, description="RD Gateway server", alias="secure-access-rd-gateway-server")
    secure_access_rdp_domain: Optional[StrictStr] = Field(default=None, description="Required when the Dynamic Secret is used for a domain user", alias="secure-access-rdp-domain")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Add tags attached to this object")
    target: Optional[List[StrictStr]] = Field(default=None, description="A list of linked targets to be associated, Relevant only for Secure Remote Access for ssh cert issuer, ldap rotated secret and ldap dynamic secret, To specify multiple targets use argument multiple times")
    target_name: Optional[StrictStr] = Field(default=None, description="Target name", alias="target-name")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    token_expiration: Optional[StrictStr] = Field(default=None, description="Token expiration", alias="token-expiration")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    user_attribute: Optional[StrictStr] = Field(default=None, description="User Attribute", alias="user-attribute")
    user_dn: Optional[StrictStr] = Field(default=None, description="User DN", alias="user-dn")
    user_ttl: Optional[StrictStr] = Field(default='60m', description="User TTL", alias="user-ttl")
    __properties: ClassVar[List[str]] = ["ProviderType", "bind-dn", "bind-dn-password", "delete_protection", "external-username", "fixed-user-claim-keyname", "group-dn", "host-provider", "json", "ldap-ca-cert", "ldap-url", "name", "password-length", "producer-encryption-key-name", "secure-access-delay", "secure-access-enable", "secure-access-host", "secure-access-rd-gateway-server", "secure-access-rdp-domain", "tags", "target", "target-name", "token", "token-expiration", "uid-token", "user-attribute", "user-dn", "user-ttl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayCreateProducerLdap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayCreateProducerLdap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ProviderType": obj.get("ProviderType"),
            "bind-dn": obj.get("bind-dn"),
            "bind-dn-password": obj.get("bind-dn-password"),
            "delete_protection": obj.get("delete_protection"),
            "external-username": obj.get("external-username") if obj.get("external-username") is not None else 'false',
            "fixed-user-claim-keyname": obj.get("fixed-user-claim-keyname") if obj.get("fixed-user-claim-keyname") is not None else 'ext_username',
            "group-dn": obj.get("group-dn"),
            "host-provider": obj.get("host-provider"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "ldap-ca-cert": obj.get("ldap-ca-cert"),
            "ldap-url": obj.get("ldap-url"),
            "name": obj.get("name"),
            "password-length": obj.get("password-length"),
            "producer-encryption-key-name": obj.get("producer-encryption-key-name"),
            "secure-access-delay": obj.get("secure-access-delay"),
            "secure-access-enable": obj.get("secure-access-enable"),
            "secure-access-host": obj.get("secure-access-host"),
            "secure-access-rd-gateway-server": obj.get("secure-access-rd-gateway-server"),
            "secure-access-rdp-domain": obj.get("secure-access-rdp-domain"),
            "tags": obj.get("tags"),
            "target": obj.get("target"),
            "target-name": obj.get("target-name"),
            "token": obj.get("token"),
            "token-expiration": obj.get("token-expiration"),
            "uid-token": obj.get("uid-token"),
            "user-attribute": obj.get("user-attribute"),
            "user-dn": obj.get("user-dn"),
            "user-ttl": obj.get("user-ttl") if obj.get("user-ttl") is not None else '60m'
        })
        return _obj


