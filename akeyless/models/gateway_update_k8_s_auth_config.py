# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayUpdateK8SAuthConfig(BaseModel):
    """
    gatewayUpdateK8SAuth is a command that updates k8s auth config
    """ # noqa: E501
    access_id: StrictStr = Field(description="The access ID of the Kubernetes auth method", alias="access-id")
    cluster_api_type: Optional[StrictStr] = Field(default='native_k8s', description="Cluster access type. options: [native_k8s, rancher]", alias="cluster-api-type")
    disable_issuer_validation: Optional[StrictStr] = Field(default=None, description="Disable issuer validation [true/false]", alias="disable-issuer-validation")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    k8s_auth_type: Optional[StrictStr] = Field(default='token', description="K8S auth type [token/certificate]. (relevant for \"native_k8s\" only)", alias="k8s-auth-type")
    k8s_ca_cert: Optional[StrictStr] = Field(default=None, description="The CA Certificate (base64 encoded) to use to call into the kubernetes API server", alias="k8s-ca-cert")
    k8s_client_certificate: Optional[StrictStr] = Field(default=None, description="Content of the k8 client certificate (PEM format) in a Base64 format (relevant for \"native_k8s\" only)", alias="k8s-client-certificate")
    k8s_client_key: Optional[StrictStr] = Field(default=None, description="Content of the k8 client private key (PEM format) in a Base64 format (relevant for \"native_k8s\" only)", alias="k8s-client-key")
    k8s_host: StrictStr = Field(description="The URL of the kubernetes API server", alias="k8s-host")
    k8s_issuer: Optional[StrictStr] = Field(default='kubernetes/serviceaccount', description="The Kubernetes JWT issuer name. K8SIssuer is the claim that specifies who issued the Kubernetes token", alias="k8s-issuer")
    name: StrictStr = Field(description="K8S Auth config name")
    new_name: StrictStr = Field(description="K8S Auth config new name", alias="new-name")
    rancher_api_key: Optional[StrictStr] = Field(default=None, description="The api key used to access the TokenReview API to validate other JWTs (relevant for \"rancher\" only)", alias="rancher-api-key")
    rancher_cluster_id: Optional[StrictStr] = Field(default=None, description="The cluster id as define in rancher (relevant for \"rancher\" only)", alias="rancher-cluster-id")
    signing_key: StrictStr = Field(description="The private key (base64 encoded) associated with the public key defined in the Kubernetes auth", alias="signing-key")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    token_exp: Optional[StrictInt] = Field(default=300, description="Time in seconds of expiration of the Akeyless Kube Auth Method token", alias="token-exp")
    token_reviewer_jwt: Optional[StrictStr] = Field(default=None, description="A Kubernetes service account JWT used to access the TokenReview API to validate other JWTs (relevant for \"native_k8s\" only). If not set, the JWT submitted in the authentication process will be used to access the Kubernetes TokenReview API.", alias="token-reviewer-jwt")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    use_gw_service_account: Optional[StrictBool] = Field(default=None, description="Use the GW's service account", alias="use-gw-service-account")
    __properties: ClassVar[List[str]] = ["access-id", "cluster-api-type", "disable-issuer-validation", "json", "k8s-auth-type", "k8s-ca-cert", "k8s-client-certificate", "k8s-client-key", "k8s-host", "k8s-issuer", "name", "new-name", "rancher-api-key", "rancher-cluster-id", "signing-key", "token", "token-exp", "token-reviewer-jwt", "uid-token", "use-gw-service-account"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayUpdateK8SAuthConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayUpdateK8SAuthConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access-id": obj.get("access-id"),
            "cluster-api-type": obj.get("cluster-api-type") if obj.get("cluster-api-type") is not None else 'native_k8s',
            "disable-issuer-validation": obj.get("disable-issuer-validation"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "k8s-auth-type": obj.get("k8s-auth-type") if obj.get("k8s-auth-type") is not None else 'token',
            "k8s-ca-cert": obj.get("k8s-ca-cert"),
            "k8s-client-certificate": obj.get("k8s-client-certificate"),
            "k8s-client-key": obj.get("k8s-client-key"),
            "k8s-host": obj.get("k8s-host"),
            "k8s-issuer": obj.get("k8s-issuer") if obj.get("k8s-issuer") is not None else 'kubernetes/serviceaccount',
            "name": obj.get("name"),
            "new-name": obj.get("new-name"),
            "rancher-api-key": obj.get("rancher-api-key"),
            "rancher-cluster-id": obj.get("rancher-cluster-id"),
            "signing-key": obj.get("signing-key"),
            "token": obj.get("token"),
            "token-exp": obj.get("token-exp") if obj.get("token-exp") is not None else 300,
            "token-reviewer-jwt": obj.get("token-reviewer-jwt"),
            "uid-token": obj.get("uid-token"),
            "use-gw-service-account": obj.get("use-gw-service-account")
        })
        return _obj


