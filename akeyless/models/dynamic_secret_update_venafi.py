# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DynamicSecretUpdateVenafi(BaseModel):
    """
    dynamicSecretUpdateVenafi is a command that updates a Venafi dynamic secret to dynamically update certificates generated by Venafi or have Akeyless generated certificates using PKI be monitored by Venafi
    """ # noqa: E501
    admin_rotation_interval_days: Optional[StrictInt] = Field(default=0, description="Admin credentials rotation interval (days)", alias="admin-rotation-interval-days")
    allow_subdomains: Optional[StrictBool] = Field(default=None, description="Allow subdomains", alias="allow-subdomains")
    allowed_domains: Optional[List[StrictStr]] = Field(default=None, description="Allowed domains", alias="allowed-domains")
    auto_generated_folder: Optional[StrictStr] = Field(default=None, description="Auto generated folder", alias="auto-generated-folder")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    enable_admin_rotation: Optional[StrictBool] = Field(default=False, description="Automatic admin credentials rotation", alias="enable-admin-rotation")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    name: StrictStr = Field(description="Dynamic secret name")
    new_name: Optional[StrictStr] = Field(default=None, description="Dynamic secret name", alias="new-name")
    producer_encryption_key_name: Optional[StrictStr] = Field(default=None, description="Dynamic producer encryption key", alias="producer-encryption-key-name")
    root_first_in_chain: Optional[StrictBool] = Field(default=None, description="Root first in chain", alias="root-first-in-chain")
    sign_using_akeyless_pki: Optional[StrictBool] = Field(default=None, description="Use Akeyless PKI issuer or Venafi issuer", alias="sign-using-akeyless-pki")
    signer_key_name: Optional[StrictStr] = Field(default=None, description="Signer key name", alias="signer-key-name")
    store_private_key: Optional[StrictBool] = Field(default=None, description="Store private key", alias="store-private-key")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Add tags attached to this object")
    target_name: Optional[StrictStr] = Field(default=None, description="Target name", alias="target-name")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    user_ttl: Optional[StrictStr] = Field(default='2160h', description="User TTL in time.Duration format (2160h / 129600m / etc...). When using sign-using-akeyless-pki certificates created will have this validity period, otherwise the user-ttl is taken from the Validity Period field of the Zone's' Issuing Template. When using cert-manager it is advised to have a TTL of above 60 days (1440h). For more information - https://cert-manager.io/docs/usage/certificate/", alias="user-ttl")
    venafi_access_token: Optional[StrictStr] = Field(default=None, description="Venafi Access Token to use to access the TPP environment (Relevant when using TPP)", alias="venafi-access-token")
    venafi_api_key: Optional[StrictStr] = Field(default=None, description="Venafi API key", alias="venafi-api-key")
    venafi_baseurl: Optional[StrictStr] = Field(default=None, description="Venafi Baseurl", alias="venafi-baseurl")
    venafi_client_id: Optional[StrictStr] = Field(default='akeyless', description="Venafi Client ID that was used when the access token was generated", alias="venafi-client-id")
    venafi_refresh_token: Optional[StrictStr] = Field(default=None, description="Venafi Refresh Token to use when the Access Token is expired (Relevant when using TPP)", alias="venafi-refresh-token")
    venafi_use_tpp: Optional[StrictBool] = Field(default=None, description="Venafi using TPP", alias="venafi-use-tpp")
    venafi_zone: Optional[StrictStr] = Field(default=None, description="Venafi Zone", alias="venafi-zone")
    __properties: ClassVar[List[str]] = ["admin-rotation-interval-days", "allow-subdomains", "allowed-domains", "auto-generated-folder", "delete_protection", "description", "enable-admin-rotation", "json", "name", "new-name", "producer-encryption-key-name", "root-first-in-chain", "sign-using-akeyless-pki", "signer-key-name", "store-private-key", "tags", "target-name", "token", "uid-token", "user-ttl", "venafi-access-token", "venafi-api-key", "venafi-baseurl", "venafi-client-id", "venafi-refresh-token", "venafi-use-tpp", "venafi-zone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DynamicSecretUpdateVenafi from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DynamicSecretUpdateVenafi from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admin-rotation-interval-days": obj.get("admin-rotation-interval-days") if obj.get("admin-rotation-interval-days") is not None else 0,
            "allow-subdomains": obj.get("allow-subdomains"),
            "allowed-domains": obj.get("allowed-domains"),
            "auto-generated-folder": obj.get("auto-generated-folder"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "enable-admin-rotation": obj.get("enable-admin-rotation") if obj.get("enable-admin-rotation") is not None else False,
            "json": obj.get("json") if obj.get("json") is not None else False,
            "name": obj.get("name"),
            "new-name": obj.get("new-name"),
            "producer-encryption-key-name": obj.get("producer-encryption-key-name"),
            "root-first-in-chain": obj.get("root-first-in-chain"),
            "sign-using-akeyless-pki": obj.get("sign-using-akeyless-pki"),
            "signer-key-name": obj.get("signer-key-name"),
            "store-private-key": obj.get("store-private-key"),
            "tags": obj.get("tags"),
            "target-name": obj.get("target-name"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "user-ttl": obj.get("user-ttl") if obj.get("user-ttl") is not None else '2160h',
            "venafi-access-token": obj.get("venafi-access-token"),
            "venafi-api-key": obj.get("venafi-api-key"),
            "venafi-baseurl": obj.get("venafi-baseurl"),
            "venafi-client-id": obj.get("venafi-client-id") if obj.get("venafi-client-id") is not None else 'akeyless',
            "venafi-refresh-token": obj.get("venafi-refresh-token"),
            "venafi-use-tpp": obj.get("venafi-use-tpp"),
            "venafi-zone": obj.get("venafi-zone")
        })
        return _obj


