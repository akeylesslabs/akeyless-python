# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.rule_assigner import RuleAssigner
from typing import Optional, Set
from typing_extensions import Self

class PathRule(BaseModel):
    """
    PathRule
    """ # noqa: E501
    assigners: Optional[List[RuleAssigner]] = None
    capabilities: Optional[List[StrictStr]] = Field(default=None, description="The approved/denied capabilities in the path")
    cb: Optional[StrictInt] = None
    is_limit_access: Optional[StrictBool] = Field(default=None, description="flag that indicate that this rule is allowed to be access RemainingAccess of times.")
    number_of_access_used: Optional[StrictInt] = None
    number_of_allowed_access: Optional[StrictInt] = None
    path: Optional[StrictStr] = Field(default=None, description="The path the rule refers to")
    start_time: Optional[StrictInt] = None
    ttl: Optional[StrictInt] = None
    type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["assigners", "capabilities", "cb", "is_limit_access", "number_of_access_used", "number_of_allowed_access", "path", "start_time", "ttl", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PathRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assigners (list)
        _items = []
        if self.assigners:
            for _item_assigners in self.assigners:
                if _item_assigners:
                    _items.append(_item_assigners.to_dict())
            _dict['assigners'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PathRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assigners": [RuleAssigner.from_dict(_item) for _item in obj["assigners"]] if obj.get("assigners") is not None else None,
            "capabilities": obj.get("capabilities"),
            "cb": obj.get("cb"),
            "is_limit_access": obj.get("is_limit_access"),
            "number_of_access_used": obj.get("number_of_access_used"),
            "number_of_allowed_access": obj.get("number_of_allowed_access"),
            "path": obj.get("path"),
            "start_time": obj.get("start_time"),
            "ttl": obj.get("ttl"),
            "type": obj.get("type")
        })
        return _obj


