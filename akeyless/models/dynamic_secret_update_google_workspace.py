# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class DynamicSecretUpdateGoogleWorkspace(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_mode': 'str',
        'admin_email': 'str',
        'delete_protection': 'str',
        'description': 'str',
        'gcp_key': 'str',
        'group_email': 'str',
        'group_role': 'str',
        'json': 'bool',
        'name': 'str',
        'new_name': 'str',
        'producer_encryption_key_name': 'str',
        'role_name': 'str',
        'role_scope': 'str',
        'secure_access_enable': 'str',
        'secure_access_url': 'str',
        'secure_access_web': 'bool',
        'secure_access_web_browsing': 'bool',
        'secure_access_web_proxy': 'bool',
        'tags': 'list[str]',
        'target_name': 'str',
        'token': 'str',
        'uid_token': 'str',
        'user_ttl': 'str'
    }

    attribute_map = {
        'access_mode': 'access-mode',
        'admin_email': 'admin-email',
        'delete_protection': 'delete_protection',
        'description': 'description',
        'gcp_key': 'gcp-key',
        'group_email': 'group-email',
        'group_role': 'group-role',
        'json': 'json',
        'name': 'name',
        'new_name': 'new-name',
        'producer_encryption_key_name': 'producer-encryption-key-name',
        'role_name': 'role-name',
        'role_scope': 'role-scope',
        'secure_access_enable': 'secure-access-enable',
        'secure_access_url': 'secure-access-url',
        'secure_access_web': 'secure-access-web',
        'secure_access_web_browsing': 'secure-access-web-browsing',
        'secure_access_web_proxy': 'secure-access-web-proxy',
        'tags': 'tags',
        'target_name': 'target-name',
        'token': 'token',
        'uid_token': 'uid-token',
        'user_ttl': 'user-ttl'
    }

    def __init__(self, access_mode=None, admin_email=None, delete_protection=None, description=None, gcp_key=None, group_email=None, group_role=None, json=False, name=None, new_name=None, producer_encryption_key_name=None, role_name=None, role_scope=None, secure_access_enable=None, secure_access_url=None, secure_access_web=True, secure_access_web_browsing=False, secure_access_web_proxy=False, tags=None, target_name=None, token=None, uid_token=None, user_ttl='60m', local_vars_configuration=None):  # noqa: E501
        """DynamicSecretUpdateGoogleWorkspace - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_mode = None
        self._admin_email = None
        self._delete_protection = None
        self._description = None
        self._gcp_key = None
        self._group_email = None
        self._group_role = None
        self._json = None
        self._name = None
        self._new_name = None
        self._producer_encryption_key_name = None
        self._role_name = None
        self._role_scope = None
        self._secure_access_enable = None
        self._secure_access_url = None
        self._secure_access_web = None
        self._secure_access_web_browsing = None
        self._secure_access_web_proxy = None
        self._tags = None
        self._target_name = None
        self._token = None
        self._uid_token = None
        self._user_ttl = None
        self.discriminator = None

        self.access_mode = access_mode
        self.admin_email = admin_email
        if delete_protection is not None:
            self.delete_protection = delete_protection
        if description is not None:
            self.description = description
        if gcp_key is not None:
            self.gcp_key = gcp_key
        if group_email is not None:
            self.group_email = group_email
        if group_role is not None:
            self.group_role = group_role
        if json is not None:
            self.json = json
        self.name = name
        if new_name is not None:
            self.new_name = new_name
        if producer_encryption_key_name is not None:
            self.producer_encryption_key_name = producer_encryption_key_name
        if role_name is not None:
            self.role_name = role_name
        if role_scope is not None:
            self.role_scope = role_scope
        if secure_access_enable is not None:
            self.secure_access_enable = secure_access_enable
        if secure_access_url is not None:
            self.secure_access_url = secure_access_url
        if secure_access_web is not None:
            self.secure_access_web = secure_access_web
        if secure_access_web_browsing is not None:
            self.secure_access_web_browsing = secure_access_web_browsing
        if secure_access_web_proxy is not None:
            self.secure_access_web_proxy = secure_access_web_proxy
        if tags is not None:
            self.tags = tags
        if target_name is not None:
            self.target_name = target_name
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token
        if user_ttl is not None:
            self.user_ttl = user_ttl

    @property
    def access_mode(self):
        """Gets the access_mode of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501


        :return: The access_mode of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._access_mode

    @access_mode.setter
    def access_mode(self, access_mode):
        """Sets the access_mode of this DynamicSecretUpdateGoogleWorkspace.


        :param access_mode: The access_mode of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and access_mode is None:  # noqa: E501
            raise ValueError("Invalid value for `access_mode`, must not be `None`")  # noqa: E501

        self._access_mode = access_mode

    @property
    def admin_email(self):
        """Gets the admin_email of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Admin user email  # noqa: E501

        :return: The admin_email of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._admin_email

    @admin_email.setter
    def admin_email(self, admin_email):
        """Sets the admin_email of this DynamicSecretUpdateGoogleWorkspace.

        Admin user email  # noqa: E501

        :param admin_email: The admin_email of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and admin_email is None:  # noqa: E501
            raise ValueError("Invalid value for `admin_email`, must not be `None`")  # noqa: E501

        self._admin_email = admin_email

    @property
    def delete_protection(self):
        """Gets the delete_protection of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Protection from accidental deletion of this object [true/false]  # noqa: E501

        :return: The delete_protection of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._delete_protection

    @delete_protection.setter
    def delete_protection(self, delete_protection):
        """Sets the delete_protection of this DynamicSecretUpdateGoogleWorkspace.

        Protection from accidental deletion of this object [true/false]  # noqa: E501

        :param delete_protection: The delete_protection of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._delete_protection = delete_protection

    @property
    def description(self):
        """Gets the description of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Description of the object  # noqa: E501

        :return: The description of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DynamicSecretUpdateGoogleWorkspace.

        Description of the object  # noqa: E501

        :param description: The description of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def gcp_key(self):
        """Gets the gcp_key of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Base64-encoded service account private key text  # noqa: E501

        :return: The gcp_key of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._gcp_key

    @gcp_key.setter
    def gcp_key(self, gcp_key):
        """Sets the gcp_key of this DynamicSecretUpdateGoogleWorkspace.

        Base64-encoded service account private key text  # noqa: E501

        :param gcp_key: The gcp_key of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._gcp_key = gcp_key

    @property
    def group_email(self):
        """Gets the group_email of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        A group email, relevant only for group access-mode  # noqa: E501

        :return: The group_email of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._group_email

    @group_email.setter
    def group_email(self, group_email):
        """Sets the group_email of this DynamicSecretUpdateGoogleWorkspace.

        A group email, relevant only for group access-mode  # noqa: E501

        :param group_email: The group_email of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._group_email = group_email

    @property
    def group_role(self):
        """Gets the group_role of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501


        :return: The group_role of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._group_role

    @group_role.setter
    def group_role(self, group_role):
        """Sets the group_role of this DynamicSecretUpdateGoogleWorkspace.


        :param group_role: The group_role of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._group_role = group_role

    @property
    def json(self):
        """Gets the json of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this DynamicSecretUpdateGoogleWorkspace.

        Set output format to JSON  # noqa: E501

        :param json: The json of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def name(self):
        """Gets the name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Dynamic secret name  # noqa: E501

        :return: The name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DynamicSecretUpdateGoogleWorkspace.

        Dynamic secret name  # noqa: E501

        :param name: The name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def new_name(self):
        """Gets the new_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Dynamic secret new name  # noqa: E501

        :return: The new_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._new_name

    @new_name.setter
    def new_name(self, new_name):
        """Sets the new_name of this DynamicSecretUpdateGoogleWorkspace.

        Dynamic secret new name  # noqa: E501

        :param new_name: The new_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._new_name = new_name

    @property
    def producer_encryption_key_name(self):
        """Gets the producer_encryption_key_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Dynamic producer encryption key  # noqa: E501

        :return: The producer_encryption_key_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._producer_encryption_key_name

    @producer_encryption_key_name.setter
    def producer_encryption_key_name(self, producer_encryption_key_name):
        """Sets the producer_encryption_key_name of this DynamicSecretUpdateGoogleWorkspace.

        Dynamic producer encryption key  # noqa: E501

        :param producer_encryption_key_name: The producer_encryption_key_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._producer_encryption_key_name = producer_encryption_key_name

    @property
    def role_name(self):
        """Gets the role_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Name of the admin role to assign to the user, relevant only for role access-mode  # noqa: E501

        :return: The role_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this DynamicSecretUpdateGoogleWorkspace.

        Name of the admin role to assign to the user, relevant only for role access-mode  # noqa: E501

        :param role_name: The role_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def role_scope(self):
        """Gets the role_scope of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501


        :return: The role_scope of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._role_scope

    @role_scope.setter
    def role_scope(self, role_scope):
        """Sets the role_scope of this DynamicSecretUpdateGoogleWorkspace.


        :param role_scope: The role_scope of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._role_scope = role_scope

    @property
    def secure_access_enable(self):
        """Gets the secure_access_enable of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Enable/Disable secure remote access [true/false]  # noqa: E501

        :return: The secure_access_enable of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_enable

    @secure_access_enable.setter
    def secure_access_enable(self, secure_access_enable):
        """Sets the secure_access_enable of this DynamicSecretUpdateGoogleWorkspace.

        Enable/Disable secure remote access [true/false]  # noqa: E501

        :param secure_access_enable: The secure_access_enable of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._secure_access_enable = secure_access_enable

    @property
    def secure_access_url(self):
        """Gets the secure_access_url of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Destination URL to inject secrets  # noqa: E501

        :return: The secure_access_url of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_url

    @secure_access_url.setter
    def secure_access_url(self, secure_access_url):
        """Sets the secure_access_url of this DynamicSecretUpdateGoogleWorkspace.

        Destination URL to inject secrets  # noqa: E501

        :param secure_access_url: The secure_access_url of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._secure_access_url = secure_access_url

    @property
    def secure_access_web(self):
        """Gets the secure_access_web of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Enable Web Secure Remote Access  # noqa: E501

        :return: The secure_access_web of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_web

    @secure_access_web.setter
    def secure_access_web(self, secure_access_web):
        """Sets the secure_access_web of this DynamicSecretUpdateGoogleWorkspace.

        Enable Web Secure Remote Access  # noqa: E501

        :param secure_access_web: The secure_access_web of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: bool
        """

        self._secure_access_web = secure_access_web

    @property
    def secure_access_web_browsing(self):
        """Gets the secure_access_web_browsing of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Secure browser via Akeyless Web Access Bastion  # noqa: E501

        :return: The secure_access_web_browsing of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_web_browsing

    @secure_access_web_browsing.setter
    def secure_access_web_browsing(self, secure_access_web_browsing):
        """Sets the secure_access_web_browsing of this DynamicSecretUpdateGoogleWorkspace.

        Secure browser via Akeyless Web Access Bastion  # noqa: E501

        :param secure_access_web_browsing: The secure_access_web_browsing of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: bool
        """

        self._secure_access_web_browsing = secure_access_web_browsing

    @property
    def secure_access_web_proxy(self):
        """Gets the secure_access_web_proxy of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Web-Proxy via Akeyless Web Access Bastion  # noqa: E501

        :return: The secure_access_web_proxy of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_web_proxy

    @secure_access_web_proxy.setter
    def secure_access_web_proxy(self, secure_access_web_proxy):
        """Sets the secure_access_web_proxy of this DynamicSecretUpdateGoogleWorkspace.

        Web-Proxy via Akeyless Web Access Bastion  # noqa: E501

        :param secure_access_web_proxy: The secure_access_web_proxy of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: bool
        """

        self._secure_access_web_proxy = secure_access_web_proxy

    @property
    def tags(self):
        """Gets the tags of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Add tags attached to this object  # noqa: E501

        :return: The tags of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DynamicSecretUpdateGoogleWorkspace.

        Add tags attached to this object  # noqa: E501

        :param tags: The tags of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def target_name(self):
        """Gets the target_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Name of existing target to use in dynamic secret creation  # noqa: E501

        :return: The target_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this DynamicSecretUpdateGoogleWorkspace.

        Name of existing target to use in dynamic secret creation  # noqa: E501

        :param target_name: The target_name of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def token(self):
        """Gets the token of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this DynamicSecretUpdateGoogleWorkspace.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this DynamicSecretUpdateGoogleWorkspace.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    @property
    def user_ttl(self):
        """Gets the user_ttl of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501

        User TTL  # noqa: E501

        :return: The user_ttl of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._user_ttl

    @user_ttl.setter
    def user_ttl(self, user_ttl):
        """Sets the user_ttl of this DynamicSecretUpdateGoogleWorkspace.

        User TTL  # noqa: E501

        :param user_ttl: The user_ttl of this DynamicSecretUpdateGoogleWorkspace.  # noqa: E501
        :type: str
        """

        self._user_ttl = user_ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DynamicSecretUpdateGoogleWorkspace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DynamicSecretUpdateGoogleWorkspace):
            return True

        return self.to_dict() != other.to_dict()
