# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class SplunkLogForwardingConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'splunk_index': 'str',
        'splunk_source': 'str',
        'splunk_sourcetype': 'str',
        'splunk_token': 'str',
        'splunk_url': 'str'
    }

    attribute_map = {
        'splunk_index': 'splunk_index',
        'splunk_source': 'splunk_source',
        'splunk_sourcetype': 'splunk_sourcetype',
        'splunk_token': 'splunk_token',
        'splunk_url': 'splunk_url'
    }

    def __init__(self, splunk_index=None, splunk_source=None, splunk_sourcetype=None, splunk_token=None, splunk_url=None, local_vars_configuration=None):  # noqa: E501
        """SplunkLogForwardingConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._splunk_index = None
        self._splunk_source = None
        self._splunk_sourcetype = None
        self._splunk_token = None
        self._splunk_url = None
        self.discriminator = None

        if splunk_index is not None:
            self.splunk_index = splunk_index
        if splunk_source is not None:
            self.splunk_source = splunk_source
        if splunk_sourcetype is not None:
            self.splunk_sourcetype = splunk_sourcetype
        if splunk_token is not None:
            self.splunk_token = splunk_token
        if splunk_url is not None:
            self.splunk_url = splunk_url

    @property
    def splunk_index(self):
        """Gets the splunk_index of this SplunkLogForwardingConfig.  # noqa: E501


        :return: The splunk_index of this SplunkLogForwardingConfig.  # noqa: E501
        :rtype: str
        """
        return self._splunk_index

    @splunk_index.setter
    def splunk_index(self, splunk_index):
        """Sets the splunk_index of this SplunkLogForwardingConfig.


        :param splunk_index: The splunk_index of this SplunkLogForwardingConfig.  # noqa: E501
        :type: str
        """

        self._splunk_index = splunk_index

    @property
    def splunk_source(self):
        """Gets the splunk_source of this SplunkLogForwardingConfig.  # noqa: E501


        :return: The splunk_source of this SplunkLogForwardingConfig.  # noqa: E501
        :rtype: str
        """
        return self._splunk_source

    @splunk_source.setter
    def splunk_source(self, splunk_source):
        """Sets the splunk_source of this SplunkLogForwardingConfig.


        :param splunk_source: The splunk_source of this SplunkLogForwardingConfig.  # noqa: E501
        :type: str
        """

        self._splunk_source = splunk_source

    @property
    def splunk_sourcetype(self):
        """Gets the splunk_sourcetype of this SplunkLogForwardingConfig.  # noqa: E501


        :return: The splunk_sourcetype of this SplunkLogForwardingConfig.  # noqa: E501
        :rtype: str
        """
        return self._splunk_sourcetype

    @splunk_sourcetype.setter
    def splunk_sourcetype(self, splunk_sourcetype):
        """Sets the splunk_sourcetype of this SplunkLogForwardingConfig.


        :param splunk_sourcetype: The splunk_sourcetype of this SplunkLogForwardingConfig.  # noqa: E501
        :type: str
        """

        self._splunk_sourcetype = splunk_sourcetype

    @property
    def splunk_token(self):
        """Gets the splunk_token of this SplunkLogForwardingConfig.  # noqa: E501


        :return: The splunk_token of this SplunkLogForwardingConfig.  # noqa: E501
        :rtype: str
        """
        return self._splunk_token

    @splunk_token.setter
    def splunk_token(self, splunk_token):
        """Sets the splunk_token of this SplunkLogForwardingConfig.


        :param splunk_token: The splunk_token of this SplunkLogForwardingConfig.  # noqa: E501
        :type: str
        """

        self._splunk_token = splunk_token

    @property
    def splunk_url(self):
        """Gets the splunk_url of this SplunkLogForwardingConfig.  # noqa: E501


        :return: The splunk_url of this SplunkLogForwardingConfig.  # noqa: E501
        :rtype: str
        """
        return self._splunk_url

    @splunk_url.setter
    def splunk_url(self, splunk_url):
        """Sets the splunk_url of this SplunkLogForwardingConfig.


        :param splunk_url: The splunk_url of this SplunkLogForwardingConfig.  # noqa: E501
        :type: str
        """

        self._splunk_url = splunk_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SplunkLogForwardingConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SplunkLogForwardingConfig):
            return True

        return self.to_dict() != other.to_dict()
