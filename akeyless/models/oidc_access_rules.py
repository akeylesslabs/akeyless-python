# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.oidc_custom_claim import OIDCCustomClaim
from typing import Optional, Set
from typing_extensions import Self

class OIDCAccessRules(BaseModel):
    """
    OIDCAccessRules contains access rules specific to Open Id Connect authentication method.
    """ # noqa: E501
    allowed_redirect_uris: Optional[List[StrictStr]] = Field(default=None, description="Allowed redirect URIs after the authentication", alias="allowed_redirect_URIs")
    audience: Optional[StrictStr] = Field(default=None, description="Audience claim to be used as part of the authentication flow. In case set, it must match the one configured on the Identity Provider's Application")
    bound_claims: Optional[List[OIDCCustomClaim]] = Field(default=None, description="The claims that login is restricted to.")
    client_id: Optional[StrictStr] = Field(default=None, description="Client ID")
    client_secret: Optional[StrictStr] = Field(default=None, description="Client Secret")
    is_internal: Optional[StrictBool] = Field(default=None, description="IsInternal indicates whether this is an internal Auth Method where the client has no control over it, or it was created by the client e.g - Sign In with Google will create an OIDC Auth Method with IsInternal=true")
    issuer: Optional[StrictStr] = Field(default=None, description="Issuer URL")
    required_scopes: Optional[List[StrictStr]] = Field(default=None, description="A list of required scopes to request from the oidc provider, and to check on the token")
    required_scopes_prefix: Optional[StrictStr] = Field(default=None, description="A prefix to add to the required scopes (for example, azures' Application ID URI)")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="A unique identifier to distinguish different users")
    __properties: ClassVar[List[str]] = ["allowed_redirect_URIs", "audience", "bound_claims", "client_id", "client_secret", "is_internal", "issuer", "required_scopes", "required_scopes_prefix", "unique_identifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OIDCAccessRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bound_claims (list)
        _items = []
        if self.bound_claims:
            for _item_bound_claims in self.bound_claims:
                if _item_bound_claims:
                    _items.append(_item_bound_claims.to_dict())
            _dict['bound_claims'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OIDCAccessRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed_redirect_URIs": obj.get("allowed_redirect_URIs"),
            "audience": obj.get("audience"),
            "bound_claims": [OIDCCustomClaim.from_dict(_item) for _item in obj["bound_claims"]] if obj.get("bound_claims") is not None else None,
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret"),
            "is_internal": obj.get("is_internal"),
            "issuer": obj.get("issuer"),
            "required_scopes": obj.get("required_scopes"),
            "required_scopes_prefix": obj.get("required_scopes_prefix"),
            "unique_identifier": obj.get("unique_identifier")
        })
        return _obj


