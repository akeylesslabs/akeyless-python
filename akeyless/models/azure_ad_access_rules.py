# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AzureADAccessRules(BaseModel):
    """
    AzureADAccessRules contains access rules specific to Azure Active Directory authentication.
    """ # noqa: E501
    ad_endpoint: Optional[StrictStr] = Field(default=None, description="The audience in the JWT.")
    bound_group_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of group ids that login is restricted to.")
    bound_resource_groups: Optional[List[StrictStr]] = Field(default=None, description="The list of resource groups that login is restricted to.")
    bound_resource_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of full resource ids that the login is restricted to.")
    bound_resource_names: Optional[List[StrictStr]] = Field(default=None, description="The list of resource names that the login is restricted to (e.g, a virtual machine name, scale set name, etc).")
    bound_resource_providers: Optional[List[StrictStr]] = Field(default=None, description="The list of resource providers that login is restricted to (e.g, Microsoft.Compute, Microsoft.ManagedIdentity, etc).")
    bound_resource_types: Optional[List[StrictStr]] = Field(default=None, description="The list of resource types that login is restricted to  (e.g, virtualMachines, userAssignedIdentities, etc).")
    bound_service_principal_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of service principal IDs that login is restricted to.")
    bound_subscription_ids: Optional[List[StrictStr]] = Field(default=None, description="The list of subscription IDs that login is restricted to.")
    bound_tenant_id: Optional[StrictStr] = Field(default=None, description="The tenants id for the Azure Active Directory organization.")
    issuer: Optional[StrictStr] = Field(default=None, description="Issuer URL")
    jwks_uri: Optional[StrictStr] = Field(default=None, description="The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="A unique identifier to distinguish different users")
    __properties: ClassVar[List[str]] = ["ad_endpoint", "bound_group_ids", "bound_resource_groups", "bound_resource_ids", "bound_resource_names", "bound_resource_providers", "bound_resource_types", "bound_service_principal_ids", "bound_subscription_ids", "bound_tenant_id", "issuer", "jwks_uri", "unique_identifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureADAccessRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureADAccessRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ad_endpoint": obj.get("ad_endpoint"),
            "bound_group_ids": obj.get("bound_group_ids"),
            "bound_resource_groups": obj.get("bound_resource_groups"),
            "bound_resource_ids": obj.get("bound_resource_ids"),
            "bound_resource_names": obj.get("bound_resource_names"),
            "bound_resource_providers": obj.get("bound_resource_providers"),
            "bound_resource_types": obj.get("bound_resource_types"),
            "bound_service_principal_ids": obj.get("bound_service_principal_ids"),
            "bound_subscription_ids": obj.get("bound_subscription_ids"),
            "bound_tenant_id": obj.get("bound_tenant_id"),
            "issuer": obj.get("issuer"),
            "jwks_uri": obj.get("jwks_uri"),
            "unique_identifier": obj.get("unique_identifier")
        })
        return _obj


