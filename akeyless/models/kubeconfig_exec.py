# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class KubeconfigExec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_version': 'str',
        'args': 'list[str]',
        'command': 'str',
        'interactive_mode': 'str'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'args': 'args',
        'command': 'command',
        'interactive_mode': 'interactiveMode'
    }

    def __init__(self, api_version=None, args=None, command=None, interactive_mode=None, local_vars_configuration=None):  # noqa: E501
        """KubeconfigExec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_version = None
        self._args = None
        self._command = None
        self._interactive_mode = None
        self.discriminator = None

        if api_version is not None:
            self.api_version = api_version
        if args is not None:
            self.args = args
        if command is not None:
            self.command = command
        if interactive_mode is not None:
            self.interactive_mode = interactive_mode

    @property
    def api_version(self):
        """Gets the api_version of this KubeconfigExec.  # noqa: E501


        :return: The api_version of this KubeconfigExec.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this KubeconfigExec.


        :param api_version: The api_version of this KubeconfigExec.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def args(self):
        """Gets the args of this KubeconfigExec.  # noqa: E501


        :return: The args of this KubeconfigExec.  # noqa: E501
        :rtype: list[str]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this KubeconfigExec.


        :param args: The args of this KubeconfigExec.  # noqa: E501
        :type: list[str]
        """

        self._args = args

    @property
    def command(self):
        """Gets the command of this KubeconfigExec.  # noqa: E501


        :return: The command of this KubeconfigExec.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this KubeconfigExec.


        :param command: The command of this KubeconfigExec.  # noqa: E501
        :type: str
        """

        self._command = command

    @property
    def interactive_mode(self):
        """Gets the interactive_mode of this KubeconfigExec.  # noqa: E501


        :return: The interactive_mode of this KubeconfigExec.  # noqa: E501
        :rtype: str
        """
        return self._interactive_mode

    @interactive_mode.setter
    def interactive_mode(self, interactive_mode):
        """Sets the interactive_mode of this KubeconfigExec.


        :param interactive_mode: The interactive_mode of this KubeconfigExec.  # noqa: E501
        :type: str
        """

        self._interactive_mode = interactive_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubeconfigExec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubeconfigExec):
            return True

        return self.to_dict() != other.to_dict()
