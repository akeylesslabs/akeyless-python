# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class VaultlessTokenizerInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email_tokenizer_info': 'EmailTokenizerInfo',
        'key_name': 'str',
        'regexp_tokenizer_info': 'RegexpTokenizerInfo',
        'template_type': 'str',
        'tweak': 'str',
        'tweak_type': 'str'
    }

    attribute_map = {
        'email_tokenizer_info': 'email_tokenizer_info',
        'key_name': 'key_name',
        'regexp_tokenizer_info': 'regexp_tokenizer_info',
        'template_type': 'template_type',
        'tweak': 'tweak',
        'tweak_type': 'tweak_type'
    }

    def __init__(self, email_tokenizer_info=None, key_name=None, regexp_tokenizer_info=None, template_type=None, tweak=None, tweak_type=None, local_vars_configuration=None):  # noqa: E501
        """VaultlessTokenizerInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email_tokenizer_info = None
        self._key_name = None
        self._regexp_tokenizer_info = None
        self._template_type = None
        self._tweak = None
        self._tweak_type = None
        self.discriminator = None

        if email_tokenizer_info is not None:
            self.email_tokenizer_info = email_tokenizer_info
        if key_name is not None:
            self.key_name = key_name
        if regexp_tokenizer_info is not None:
            self.regexp_tokenizer_info = regexp_tokenizer_info
        if template_type is not None:
            self.template_type = template_type
        if tweak is not None:
            self.tweak = tweak
        if tweak_type is not None:
            self.tweak_type = tweak_type

    @property
    def email_tokenizer_info(self):
        """Gets the email_tokenizer_info of this VaultlessTokenizerInfo.  # noqa: E501


        :return: The email_tokenizer_info of this VaultlessTokenizerInfo.  # noqa: E501
        :rtype: EmailTokenizerInfo
        """
        return self._email_tokenizer_info

    @email_tokenizer_info.setter
    def email_tokenizer_info(self, email_tokenizer_info):
        """Sets the email_tokenizer_info of this VaultlessTokenizerInfo.


        :param email_tokenizer_info: The email_tokenizer_info of this VaultlessTokenizerInfo.  # noqa: E501
        :type: EmailTokenizerInfo
        """

        self._email_tokenizer_info = email_tokenizer_info

    @property
    def key_name(self):
        """Gets the key_name of this VaultlessTokenizerInfo.  # noqa: E501


        :return: The key_name of this VaultlessTokenizerInfo.  # noqa: E501
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this VaultlessTokenizerInfo.


        :param key_name: The key_name of this VaultlessTokenizerInfo.  # noqa: E501
        :type: str
        """

        self._key_name = key_name

    @property
    def regexp_tokenizer_info(self):
        """Gets the regexp_tokenizer_info of this VaultlessTokenizerInfo.  # noqa: E501


        :return: The regexp_tokenizer_info of this VaultlessTokenizerInfo.  # noqa: E501
        :rtype: RegexpTokenizerInfo
        """
        return self._regexp_tokenizer_info

    @regexp_tokenizer_info.setter
    def regexp_tokenizer_info(self, regexp_tokenizer_info):
        """Sets the regexp_tokenizer_info of this VaultlessTokenizerInfo.


        :param regexp_tokenizer_info: The regexp_tokenizer_info of this VaultlessTokenizerInfo.  # noqa: E501
        :type: RegexpTokenizerInfo
        """

        self._regexp_tokenizer_info = regexp_tokenizer_info

    @property
    def template_type(self):
        """Gets the template_type of this VaultlessTokenizerInfo.  # noqa: E501


        :return: The template_type of this VaultlessTokenizerInfo.  # noqa: E501
        :rtype: str
        """
        return self._template_type

    @template_type.setter
    def template_type(self, template_type):
        """Sets the template_type of this VaultlessTokenizerInfo.


        :param template_type: The template_type of this VaultlessTokenizerInfo.  # noqa: E501
        :type: str
        """

        self._template_type = template_type

    @property
    def tweak(self):
        """Gets the tweak of this VaultlessTokenizerInfo.  # noqa: E501

        Tweak used in the case of internal tweak type  # noqa: E501

        :return: The tweak of this VaultlessTokenizerInfo.  # noqa: E501
        :rtype: str
        """
        return self._tweak

    @tweak.setter
    def tweak(self, tweak):
        """Sets the tweak of this VaultlessTokenizerInfo.

        Tweak used in the case of internal tweak type  # noqa: E501

        :param tweak: The tweak of this VaultlessTokenizerInfo.  # noqa: E501
        :type: str
        """

        self._tweak = tweak

    @property
    def tweak_type(self):
        """Gets the tweak_type of this VaultlessTokenizerInfo.  # noqa: E501


        :return: The tweak_type of this VaultlessTokenizerInfo.  # noqa: E501
        :rtype: str
        """
        return self._tweak_type

    @tweak_type.setter
    def tweak_type(self, tweak_type):
        """Sets the tweak_type of this VaultlessTokenizerInfo.


        :param tweak_type: The tweak_type of this VaultlessTokenizerInfo.  # noqa: E501
        :type: str
        """

        self._tweak_type = tweak_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VaultlessTokenizerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VaultlessTokenizerInfo):
            return True

        return self.to_dict() != other.to_dict()
