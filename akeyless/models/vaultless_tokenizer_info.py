# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.email_tokenizer_info import EmailTokenizerInfo
from akeyless.models.regexp_tokenizer_info import RegexpTokenizerInfo
from typing import Optional, Set
from typing_extensions import Self

class VaultlessTokenizerInfo(BaseModel):
    """
    VaultlessTokenizerInfo
    """ # noqa: E501
    email_tokenizer_info: Optional[EmailTokenizerInfo] = None
    key_name: Optional[StrictStr] = None
    regexp_tokenizer_info: Optional[RegexpTokenizerInfo] = None
    template_type: Optional[StrictStr] = None
    tweak: Optional[StrictStr] = Field(default=None, description="Tweak used in the case of internal tweak type")
    tweak_type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["email_tokenizer_info", "key_name", "regexp_tokenizer_info", "template_type", "tweak", "tweak_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VaultlessTokenizerInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of email_tokenizer_info
        if self.email_tokenizer_info:
            _dict['email_tokenizer_info'] = self.email_tokenizer_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of regexp_tokenizer_info
        if self.regexp_tokenizer_info:
            _dict['regexp_tokenizer_info'] = self.regexp_tokenizer_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VaultlessTokenizerInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "email_tokenizer_info": EmailTokenizerInfo.from_dict(obj["email_tokenizer_info"]) if obj.get("email_tokenizer_info") is not None else None,
            "key_name": obj.get("key_name"),
            "regexp_tokenizer_info": RegexpTokenizerInfo.from_dict(obj["regexp_tokenizer_info"]) if obj.get("regexp_tokenizer_info") is not None else None,
            "template_type": obj.get("template_type"),
            "tweak": obj.get("tweak"),
            "tweak_type": obj.get("tweak_type")
        })
        return _obj


