# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ShareItem(BaseModel):
    """
    ShareItem
    """ # noqa: E501
    accessibility: Optional[StrictStr] = Field(default='regular', description="for personal password manager")
    action: StrictStr = Field(description="Action to be performed on the item [start/stop/describe]")
    emails: Optional[List[StrictStr]] = Field(default=None, description="List of emails to start/stop sharing the secret with")
    item_name: StrictStr = Field(description="Item name", alias="item-name")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    share_type: Optional[StrictStr] = Field(default='email', description="Share type [email/token]", alias="share-type")
    shared_token_id: Optional[List[StrictStr]] = Field(default=None, description="Shared token ids in order to stop sharing a secret", alias="shared-token-id")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    ttl: Optional[StrictInt] = Field(default=None, description="TTL of the Availability of the shared secret in seconds")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    view_once: Optional[StrictBool] = Field(default=False, description="ViewOnlyOnce Shared secrets can only be viewed once [true/false]", alias="view-once")
    __properties: ClassVar[List[str]] = ["accessibility", "action", "emails", "item-name", "json", "share-type", "shared-token-id", "token", "ttl", "uid-token", "view-once"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ShareItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ShareItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessibility": obj.get("accessibility") if obj.get("accessibility") is not None else 'regular',
            "action": obj.get("action"),
            "emails": obj.get("emails"),
            "item-name": obj.get("item-name"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "share-type": obj.get("share-type") if obj.get("share-type") is not None else 'email',
            "shared-token-id": obj.get("shared-token-id"),
            "token": obj.get("token"),
            "ttl": obj.get("ttl"),
            "uid-token": obj.get("uid-token"),
            "view-once": obj.get("view-once") if obj.get("view-once") is not None else False
        })
        return _obj


