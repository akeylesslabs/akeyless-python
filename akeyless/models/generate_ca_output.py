# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GenerateCAOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'intermediate_certificate_name': 'str',
        'intermediate_issuer_name': 'str',
        'intermediate_key_name': 'str',
        'root_certificate_name': 'str',
        'root_issuer_name': 'str',
        'root_key_name': 'str'
    }

    attribute_map = {
        'intermediate_certificate_name': 'intermediate_certificate_name',
        'intermediate_issuer_name': 'intermediate_issuer_name',
        'intermediate_key_name': 'intermediate_key_name',
        'root_certificate_name': 'root_certificate_name',
        'root_issuer_name': 'root_issuer_name',
        'root_key_name': 'root_key_name'
    }

    def __init__(self, intermediate_certificate_name=None, intermediate_issuer_name=None, intermediate_key_name=None, root_certificate_name=None, root_issuer_name=None, root_key_name=None, local_vars_configuration=None):  # noqa: E501
        """GenerateCAOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._intermediate_certificate_name = None
        self._intermediate_issuer_name = None
        self._intermediate_key_name = None
        self._root_certificate_name = None
        self._root_issuer_name = None
        self._root_key_name = None
        self.discriminator = None

        if intermediate_certificate_name is not None:
            self.intermediate_certificate_name = intermediate_certificate_name
        if intermediate_issuer_name is not None:
            self.intermediate_issuer_name = intermediate_issuer_name
        if intermediate_key_name is not None:
            self.intermediate_key_name = intermediate_key_name
        if root_certificate_name is not None:
            self.root_certificate_name = root_certificate_name
        if root_issuer_name is not None:
            self.root_issuer_name = root_issuer_name
        if root_key_name is not None:
            self.root_key_name = root_key_name

    @property
    def intermediate_certificate_name(self):
        """Gets the intermediate_certificate_name of this GenerateCAOutput.  # noqa: E501


        :return: The intermediate_certificate_name of this GenerateCAOutput.  # noqa: E501
        :rtype: str
        """
        return self._intermediate_certificate_name

    @intermediate_certificate_name.setter
    def intermediate_certificate_name(self, intermediate_certificate_name):
        """Sets the intermediate_certificate_name of this GenerateCAOutput.


        :param intermediate_certificate_name: The intermediate_certificate_name of this GenerateCAOutput.  # noqa: E501
        :type: str
        """

        self._intermediate_certificate_name = intermediate_certificate_name

    @property
    def intermediate_issuer_name(self):
        """Gets the intermediate_issuer_name of this GenerateCAOutput.  # noqa: E501


        :return: The intermediate_issuer_name of this GenerateCAOutput.  # noqa: E501
        :rtype: str
        """
        return self._intermediate_issuer_name

    @intermediate_issuer_name.setter
    def intermediate_issuer_name(self, intermediate_issuer_name):
        """Sets the intermediate_issuer_name of this GenerateCAOutput.


        :param intermediate_issuer_name: The intermediate_issuer_name of this GenerateCAOutput.  # noqa: E501
        :type: str
        """

        self._intermediate_issuer_name = intermediate_issuer_name

    @property
    def intermediate_key_name(self):
        """Gets the intermediate_key_name of this GenerateCAOutput.  # noqa: E501


        :return: The intermediate_key_name of this GenerateCAOutput.  # noqa: E501
        :rtype: str
        """
        return self._intermediate_key_name

    @intermediate_key_name.setter
    def intermediate_key_name(self, intermediate_key_name):
        """Sets the intermediate_key_name of this GenerateCAOutput.


        :param intermediate_key_name: The intermediate_key_name of this GenerateCAOutput.  # noqa: E501
        :type: str
        """

        self._intermediate_key_name = intermediate_key_name

    @property
    def root_certificate_name(self):
        """Gets the root_certificate_name of this GenerateCAOutput.  # noqa: E501


        :return: The root_certificate_name of this GenerateCAOutput.  # noqa: E501
        :rtype: str
        """
        return self._root_certificate_name

    @root_certificate_name.setter
    def root_certificate_name(self, root_certificate_name):
        """Sets the root_certificate_name of this GenerateCAOutput.


        :param root_certificate_name: The root_certificate_name of this GenerateCAOutput.  # noqa: E501
        :type: str
        """

        self._root_certificate_name = root_certificate_name

    @property
    def root_issuer_name(self):
        """Gets the root_issuer_name of this GenerateCAOutput.  # noqa: E501


        :return: The root_issuer_name of this GenerateCAOutput.  # noqa: E501
        :rtype: str
        """
        return self._root_issuer_name

    @root_issuer_name.setter
    def root_issuer_name(self, root_issuer_name):
        """Sets the root_issuer_name of this GenerateCAOutput.


        :param root_issuer_name: The root_issuer_name of this GenerateCAOutput.  # noqa: E501
        :type: str
        """

        self._root_issuer_name = root_issuer_name

    @property
    def root_key_name(self):
        """Gets the root_key_name of this GenerateCAOutput.  # noqa: E501


        :return: The root_key_name of this GenerateCAOutput.  # noqa: E501
        :rtype: str
        """
        return self._root_key_name

    @root_key_name.setter
    def root_key_name(self, root_key_name):
        """Sets the root_key_name of this GenerateCAOutput.


        :param root_key_name: The root_key_name of this GenerateCAOutput.  # noqa: E501
        :type: str
        """

        self._root_key_name = root_key_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateCAOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateCAOutput):
            return True

        return self.to_dict() != other.to_dict()
