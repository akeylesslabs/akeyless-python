# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class RenewCertificateOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cert': 'str',
        'cert_display_id': 'str',
        'item_id': 'str',
        'parent_cert': 'str',
        'private_key': 'str',
        'reading_token': 'str'
    }

    attribute_map = {
        'cert': 'cert',
        'cert_display_id': 'cert_display_id',
        'item_id': 'item_id',
        'parent_cert': 'parent_cert',
        'private_key': 'private_key',
        'reading_token': 'reading_token'
    }

    def __init__(self, cert=None, cert_display_id=None, item_id=None, parent_cert=None, private_key=None, reading_token=None, local_vars_configuration=None):  # noqa: E501
        """RenewCertificateOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cert = None
        self._cert_display_id = None
        self._item_id = None
        self._parent_cert = None
        self._private_key = None
        self._reading_token = None
        self.discriminator = None

        if cert is not None:
            self.cert = cert
        if cert_display_id is not None:
            self.cert_display_id = cert_display_id
        if item_id is not None:
            self.item_id = item_id
        if parent_cert is not None:
            self.parent_cert = parent_cert
        if private_key is not None:
            self.private_key = private_key
        if reading_token is not None:
            self.reading_token = reading_token

    @property
    def cert(self):
        """Gets the cert of this RenewCertificateOutput.  # noqa: E501


        :return: The cert of this RenewCertificateOutput.  # noqa: E501
        :rtype: str
        """
        return self._cert

    @cert.setter
    def cert(self, cert):
        """Sets the cert of this RenewCertificateOutput.


        :param cert: The cert of this RenewCertificateOutput.  # noqa: E501
        :type: str
        """

        self._cert = cert

    @property
    def cert_display_id(self):
        """Gets the cert_display_id of this RenewCertificateOutput.  # noqa: E501


        :return: The cert_display_id of this RenewCertificateOutput.  # noqa: E501
        :rtype: str
        """
        return self._cert_display_id

    @cert_display_id.setter
    def cert_display_id(self, cert_display_id):
        """Sets the cert_display_id of this RenewCertificateOutput.


        :param cert_display_id: The cert_display_id of this RenewCertificateOutput.  # noqa: E501
        :type: str
        """

        self._cert_display_id = cert_display_id

    @property
    def item_id(self):
        """Gets the item_id of this RenewCertificateOutput.  # noqa: E501


        :return: The item_id of this RenewCertificateOutput.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this RenewCertificateOutput.


        :param item_id: The item_id of this RenewCertificateOutput.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def parent_cert(self):
        """Gets the parent_cert of this RenewCertificateOutput.  # noqa: E501


        :return: The parent_cert of this RenewCertificateOutput.  # noqa: E501
        :rtype: str
        """
        return self._parent_cert

    @parent_cert.setter
    def parent_cert(self, parent_cert):
        """Sets the parent_cert of this RenewCertificateOutput.


        :param parent_cert: The parent_cert of this RenewCertificateOutput.  # noqa: E501
        :type: str
        """

        self._parent_cert = parent_cert

    @property
    def private_key(self):
        """Gets the private_key of this RenewCertificateOutput.  # noqa: E501


        :return: The private_key of this RenewCertificateOutput.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this RenewCertificateOutput.


        :param private_key: The private_key of this RenewCertificateOutput.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def reading_token(self):
        """Gets the reading_token of this RenewCertificateOutput.  # noqa: E501


        :return: The reading_token of this RenewCertificateOutput.  # noqa: E501
        :rtype: str
        """
        return self._reading_token

    @reading_token.setter
    def reading_token(self, reading_token):
        """Sets the reading_token of this RenewCertificateOutput.


        :param reading_token: The reading_token of this RenewCertificateOutput.  # noqa: E501
        :type: str
        """

        self._reading_token = reading_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RenewCertificateOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RenewCertificateOutput):
            return True

        return self.to_dict() != other.to_dict()
