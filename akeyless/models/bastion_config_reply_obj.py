# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.bastion_global_conf import BastionGlobalConf
from akeyless.models.ssh_bastion_conf import SshBastionConf
from akeyless.models.web_bastion_conf import WebBastionConf
from typing import Optional, Set
from typing_extensions import Self

class BastionConfigReplyObj(BaseModel):
    """
    BastionConfigReplyObj
    """ # noqa: E501
    api_gateway_url: Optional[StrictStr] = None
    cluster_id: Optional[StrictStr] = None
    gator_cluster_id: Optional[StrictInt] = None
    var_global: Optional[BastionGlobalConf] = Field(default=None, alias="global")
    ssh_bastion: Optional[SshBastionConf] = None
    web_bastion: Optional[WebBastionConf] = None
    __properties: ClassVar[List[str]] = ["api_gateway_url", "cluster_id", "gator_cluster_id", "global", "ssh_bastion", "web_bastion"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BastionConfigReplyObj from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_global
        if self.var_global:
            _dict['global'] = self.var_global.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssh_bastion
        if self.ssh_bastion:
            _dict['ssh_bastion'] = self.ssh_bastion.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_bastion
        if self.web_bastion:
            _dict['web_bastion'] = self.web_bastion.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BastionConfigReplyObj from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "api_gateway_url": obj.get("api_gateway_url"),
            "cluster_id": obj.get("cluster_id"),
            "gator_cluster_id": obj.get("gator_cluster_id"),
            "global": BastionGlobalConf.from_dict(obj["global"]) if obj.get("global") is not None else None,
            "ssh_bastion": SshBastionConf.from_dict(obj["ssh_bastion"]) if obj.get("ssh_bastion") is not None else None,
            "web_bastion": WebBastionConf.from_dict(obj["web_bastion"]) if obj.get("web_bastion") is not None else None
        })
        return _obj


