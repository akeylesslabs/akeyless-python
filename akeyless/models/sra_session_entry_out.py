# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class SraSessionEntryOut(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_id': 'str',
        'client_type': 'str',
        'cluster_unique_id': 'int',
        'connection_type': 'str',
        'end_time': 'datetime',
        'error_msg': 'str',
        'gateway_name': 'str',
        'instance_id': 'str',
        'secret_name': 'str',
        'session_id': 'str',
        'start_time': 'datetime',
        'status': 'str',
        'target_host': 'str',
        'ttl': 'str',
        'user_identifier': 'str'
    }

    attribute_map = {
        'access_id': 'access_id',
        'client_type': 'client_type',
        'cluster_unique_id': 'cluster_unique_id',
        'connection_type': 'connection_type',
        'end_time': 'end_time',
        'error_msg': 'error_msg',
        'gateway_name': 'gateway_name',
        'instance_id': 'instance_id',
        'secret_name': 'secret_name',
        'session_id': 'session_id',
        'start_time': 'start_time',
        'status': 'status',
        'target_host': 'target_host',
        'ttl': 'ttl',
        'user_identifier': 'user_identifier'
    }

    def __init__(self, access_id=None, client_type=None, cluster_unique_id=None, connection_type=None, end_time=None, error_msg=None, gateway_name=None, instance_id=None, secret_name=None, session_id=None, start_time=None, status=None, target_host=None, ttl=None, user_identifier=None, local_vars_configuration=None):  # noqa: E501
        """SraSessionEntryOut - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_id = None
        self._client_type = None
        self._cluster_unique_id = None
        self._connection_type = None
        self._end_time = None
        self._error_msg = None
        self._gateway_name = None
        self._instance_id = None
        self._secret_name = None
        self._session_id = None
        self._start_time = None
        self._status = None
        self._target_host = None
        self._ttl = None
        self._user_identifier = None
        self.discriminator = None

        if access_id is not None:
            self.access_id = access_id
        if client_type is not None:
            self.client_type = client_type
        if cluster_unique_id is not None:
            self.cluster_unique_id = cluster_unique_id
        if connection_type is not None:
            self.connection_type = connection_type
        if end_time is not None:
            self.end_time = end_time
        if error_msg is not None:
            self.error_msg = error_msg
        if gateway_name is not None:
            self.gateway_name = gateway_name
        if instance_id is not None:
            self.instance_id = instance_id
        if secret_name is not None:
            self.secret_name = secret_name
        if session_id is not None:
            self.session_id = session_id
        if start_time is not None:
            self.start_time = start_time
        if status is not None:
            self.status = status
        if target_host is not None:
            self.target_host = target_host
        if ttl is not None:
            self.ttl = ttl
        if user_identifier is not None:
            self.user_identifier = user_identifier

    @property
    def access_id(self):
        """Gets the access_id of this SraSessionEntryOut.  # noqa: E501


        :return: The access_id of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """Sets the access_id of this SraSessionEntryOut.


        :param access_id: The access_id of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._access_id = access_id

    @property
    def client_type(self):
        """Gets the client_type of this SraSessionEntryOut.  # noqa: E501


        :return: The client_type of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this SraSessionEntryOut.


        :param client_type: The client_type of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._client_type = client_type

    @property
    def cluster_unique_id(self):
        """Gets the cluster_unique_id of this SraSessionEntryOut.  # noqa: E501


        :return: The cluster_unique_id of this SraSessionEntryOut.  # noqa: E501
        :rtype: int
        """
        return self._cluster_unique_id

    @cluster_unique_id.setter
    def cluster_unique_id(self, cluster_unique_id):
        """Sets the cluster_unique_id of this SraSessionEntryOut.


        :param cluster_unique_id: The cluster_unique_id of this SraSessionEntryOut.  # noqa: E501
        :type: int
        """

        self._cluster_unique_id = cluster_unique_id

    @property
    def connection_type(self):
        """Gets the connection_type of this SraSessionEntryOut.  # noqa: E501


        :return: The connection_type of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this SraSessionEntryOut.


        :param connection_type: The connection_type of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def end_time(self):
        """Gets the end_time of this SraSessionEntryOut.  # noqa: E501


        :return: The end_time of this SraSessionEntryOut.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SraSessionEntryOut.


        :param end_time: The end_time of this SraSessionEntryOut.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def error_msg(self):
        """Gets the error_msg of this SraSessionEntryOut.  # noqa: E501


        :return: The error_msg of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._error_msg

    @error_msg.setter
    def error_msg(self, error_msg):
        """Sets the error_msg of this SraSessionEntryOut.


        :param error_msg: The error_msg of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._error_msg = error_msg

    @property
    def gateway_name(self):
        """Gets the gateway_name of this SraSessionEntryOut.  # noqa: E501


        :return: The gateway_name of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._gateway_name

    @gateway_name.setter
    def gateway_name(self, gateway_name):
        """Sets the gateway_name of this SraSessionEntryOut.


        :param gateway_name: The gateway_name of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._gateway_name = gateway_name

    @property
    def instance_id(self):
        """Gets the instance_id of this SraSessionEntryOut.  # noqa: E501


        :return: The instance_id of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this SraSessionEntryOut.


        :param instance_id: The instance_id of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._instance_id = instance_id

    @property
    def secret_name(self):
        """Gets the secret_name of this SraSessionEntryOut.  # noqa: E501


        :return: The secret_name of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._secret_name

    @secret_name.setter
    def secret_name(self, secret_name):
        """Sets the secret_name of this SraSessionEntryOut.


        :param secret_name: The secret_name of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._secret_name = secret_name

    @property
    def session_id(self):
        """Gets the session_id of this SraSessionEntryOut.  # noqa: E501


        :return: The session_id of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this SraSessionEntryOut.


        :param session_id: The session_id of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def start_time(self):
        """Gets the start_time of this SraSessionEntryOut.  # noqa: E501


        :return: The start_time of this SraSessionEntryOut.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SraSessionEntryOut.


        :param start_time: The start_time of this SraSessionEntryOut.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this SraSessionEntryOut.  # noqa: E501


        :return: The status of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SraSessionEntryOut.


        :param status: The status of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def target_host(self):
        """Gets the target_host of this SraSessionEntryOut.  # noqa: E501


        :return: The target_host of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._target_host

    @target_host.setter
    def target_host(self, target_host):
        """Sets the target_host of this SraSessionEntryOut.


        :param target_host: The target_host of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._target_host = target_host

    @property
    def ttl(self):
        """Gets the ttl of this SraSessionEntryOut.  # noqa: E501


        :return: The ttl of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this SraSessionEntryOut.


        :param ttl: The ttl of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._ttl = ttl

    @property
    def user_identifier(self):
        """Gets the user_identifier of this SraSessionEntryOut.  # noqa: E501


        :return: The user_identifier of this SraSessionEntryOut.  # noqa: E501
        :rtype: str
        """
        return self._user_identifier

    @user_identifier.setter
    def user_identifier(self, user_identifier):
        """Sets the user_identifier of this SraSessionEntryOut.


        :param user_identifier: The user_identifier of this SraSessionEntryOut.  # noqa: E501
        :type: str
        """

        self._user_identifier = user_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SraSessionEntryOut):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SraSessionEntryOut):
            return True

        return self.to_dict() != other.to_dict()
