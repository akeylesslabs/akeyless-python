# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.gateway_name_info import GatewayNameInfo
from typing import Optional, Set
from typing_extensions import Self

class SraSessionEntryOut(BaseModel):
    """
    SraSessionEntryOut
    """ # noqa: E501
    access_id: Optional[StrictStr] = None
    client_type: Optional[StrictStr] = None
    cluster_unique_id: Optional[StrictInt] = None
    connection_type: Optional[StrictStr] = None
    end_time: Optional[datetime] = None
    error_msg: Optional[StrictStr] = None
    gateway_info: Optional[GatewayNameInfo] = None
    instance_id: Optional[StrictStr] = None
    secret_name: Optional[StrictStr] = None
    session_id: Optional[StrictStr] = None
    start_time: Optional[datetime] = None
    status: Optional[StrictStr] = None
    target_host: Optional[StrictStr] = None
    ttl: Optional[StrictStr] = None
    user_identifier: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["access_id", "client_type", "cluster_unique_id", "connection_type", "end_time", "error_msg", "gateway_info", "instance_id", "secret_name", "session_id", "start_time", "status", "target_host", "ttl", "user_identifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SraSessionEntryOut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gateway_info
        if self.gateway_info:
            _dict['gateway_info'] = self.gateway_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SraSessionEntryOut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_id": obj.get("access_id"),
            "client_type": obj.get("client_type"),
            "cluster_unique_id": obj.get("cluster_unique_id"),
            "connection_type": obj.get("connection_type"),
            "end_time": obj.get("end_time"),
            "error_msg": obj.get("error_msg"),
            "gateway_info": GatewayNameInfo.from_dict(obj["gateway_info"]) if obj.get("gateway_info") is not None else None,
            "instance_id": obj.get("instance_id"),
            "secret_name": obj.get("secret_name"),
            "session_id": obj.get("session_id"),
            "start_time": obj.get("start_time"),
            "status": obj.get("status"),
            "target_host": obj.get("target_host"),
            "ttl": obj.get("ttl"),
            "user_identifier": obj.get("user_identifier")
        })
        return _obj


