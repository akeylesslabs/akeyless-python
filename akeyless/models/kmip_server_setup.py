# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class KmipServerSetup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'certificate_ttl': 'int',
        'hostname': 'str',
        'root': 'str',
        'token': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'certificate_ttl': 'certificate-ttl',
        'hostname': 'hostname',
        'root': 'root',
        'token': 'token',
        'uid_token': 'uid-token'
    }

    def __init__(self, certificate_ttl=None, hostname=None, root=None, token=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """KmipServerSetup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._certificate_ttl = None
        self._hostname = None
        self._root = None
        self._token = None
        self._uid_token = None
        self.discriminator = None

        if certificate_ttl is not None:
            self.certificate_ttl = certificate_ttl
        self.hostname = hostname
        if root is not None:
            self.root = root
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def certificate_ttl(self):
        """Gets the certificate_ttl of this KmipServerSetup.  # noqa: E501


        :return: The certificate_ttl of this KmipServerSetup.  # noqa: E501
        :rtype: int
        """
        return self._certificate_ttl

    @certificate_ttl.setter
    def certificate_ttl(self, certificate_ttl):
        """Sets the certificate_ttl of this KmipServerSetup.


        :param certificate_ttl: The certificate_ttl of this KmipServerSetup.  # noqa: E501
        :type: int
        """

        self._certificate_ttl = certificate_ttl

    @property
    def hostname(self):
        """Gets the hostname of this KmipServerSetup.  # noqa: E501

        Hostname  # noqa: E501

        :return: The hostname of this KmipServerSetup.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this KmipServerSetup.

        Hostname  # noqa: E501

        :param hostname: The hostname of this KmipServerSetup.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and hostname is None:  # noqa: E501
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def root(self):
        """Gets the root of this KmipServerSetup.  # noqa: E501


        :return: The root of this KmipServerSetup.  # noqa: E501
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this KmipServerSetup.


        :param root: The root of this KmipServerSetup.  # noqa: E501
        :type: str
        """

        self._root = root

    @property
    def token(self):
        """Gets the token of this KmipServerSetup.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this KmipServerSetup.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this KmipServerSetup.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this KmipServerSetup.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this KmipServerSetup.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this KmipServerSetup.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this KmipServerSetup.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this KmipServerSetup.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KmipServerSetup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KmipServerSetup):
            return True

        return self.to_dict() != other.to_dict()
