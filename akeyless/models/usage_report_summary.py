# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class UsageReportSummary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'clients_by_auth_method_types': 'dict(str, int)',
        'product': 'str',
        'secrets_by_types': 'dict(str, int)',
        'time': 'int',
        'total_clients': 'int',
        'total_secrets': 'int'
    }

    attribute_map = {
        'clients_by_auth_method_types': 'clients_by_auth_method_types',
        'product': 'product',
        'secrets_by_types': 'secrets_by_types',
        'time': 'time',
        'total_clients': 'total_clients',
        'total_secrets': 'total_secrets'
    }

    def __init__(self, clients_by_auth_method_types=None, product=None, secrets_by_types=None, time=None, total_clients=None, total_secrets=None, local_vars_configuration=None):  # noqa: E501
        """UsageReportSummary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._clients_by_auth_method_types = None
        self._product = None
        self._secrets_by_types = None
        self._time = None
        self._total_clients = None
        self._total_secrets = None
        self.discriminator = None

        if clients_by_auth_method_types is not None:
            self.clients_by_auth_method_types = clients_by_auth_method_types
        if product is not None:
            self.product = product
        if secrets_by_types is not None:
            self.secrets_by_types = secrets_by_types
        if time is not None:
            self.time = time
        if total_clients is not None:
            self.total_clients = total_clients
        if total_secrets is not None:
            self.total_secrets = total_secrets

    @property
    def clients_by_auth_method_types(self):
        """Gets the clients_by_auth_method_types of this UsageReportSummary.  # noqa: E501


        :return: The clients_by_auth_method_types of this UsageReportSummary.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._clients_by_auth_method_types

    @clients_by_auth_method_types.setter
    def clients_by_auth_method_types(self, clients_by_auth_method_types):
        """Sets the clients_by_auth_method_types of this UsageReportSummary.


        :param clients_by_auth_method_types: The clients_by_auth_method_types of this UsageReportSummary.  # noqa: E501
        :type: dict(str, int)
        """

        self._clients_by_auth_method_types = clients_by_auth_method_types

    @property
    def product(self):
        """Gets the product of this UsageReportSummary.  # noqa: E501


        :return: The product of this UsageReportSummary.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this UsageReportSummary.


        :param product: The product of this UsageReportSummary.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def secrets_by_types(self):
        """Gets the secrets_by_types of this UsageReportSummary.  # noqa: E501


        :return: The secrets_by_types of this UsageReportSummary.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._secrets_by_types

    @secrets_by_types.setter
    def secrets_by_types(self, secrets_by_types):
        """Sets the secrets_by_types of this UsageReportSummary.


        :param secrets_by_types: The secrets_by_types of this UsageReportSummary.  # noqa: E501
        :type: dict(str, int)
        """

        self._secrets_by_types = secrets_by_types

    @property
    def time(self):
        """Gets the time of this UsageReportSummary.  # noqa: E501


        :return: The time of this UsageReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this UsageReportSummary.


        :param time: The time of this UsageReportSummary.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def total_clients(self):
        """Gets the total_clients of this UsageReportSummary.  # noqa: E501


        :return: The total_clients of this UsageReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_clients

    @total_clients.setter
    def total_clients(self, total_clients):
        """Sets the total_clients of this UsageReportSummary.


        :param total_clients: The total_clients of this UsageReportSummary.  # noqa: E501
        :type: int
        """

        self._total_clients = total_clients

    @property
    def total_secrets(self):
        """Gets the total_secrets of this UsageReportSummary.  # noqa: E501


        :return: The total_secrets of this UsageReportSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_secrets

    @total_secrets.setter
    def total_secrets(self, total_secrets):
        """Sets the total_secrets of this UsageReportSummary.


        :param total_secrets: The total_secrets of this UsageReportSummary.  # noqa: E501
        :type: int
        """

        self._total_secrets = total_secrets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageReportSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsageReportSummary):
            return True

        return self.to_dict() != other.to_dict()
