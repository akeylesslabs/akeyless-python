# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class RotatedSecretDetailsInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delete_previous_version_in_days': 'int',
        'gw_cluster_id': 'int',
        'last_rotation_error': 'str',
        'number_of_versions_to_save': 'int',
        'rotation_hour': 'int',
        'rotation_interval_min': 'bool',
        'rotation_statement': 'str',
        'rotator_creds_type': 'str',
        'rotator_status': 'str',
        'rotator_type': 'str'
    }

    attribute_map = {
        'delete_previous_version_in_days': 'delete_previous_version_in_days',
        'gw_cluster_id': 'gw_cluster_id',
        'last_rotation_error': 'last_rotation_error',
        'number_of_versions_to_save': 'number_of_versions_to_save',
        'rotation_hour': 'rotation_hour',
        'rotation_interval_min': 'rotation_interval_min',
        'rotation_statement': 'rotation_statement',
        'rotator_creds_type': 'rotator_creds_type',
        'rotator_status': 'rotator_status',
        'rotator_type': 'rotator_type'
    }

    def __init__(self, delete_previous_version_in_days=None, gw_cluster_id=None, last_rotation_error=None, number_of_versions_to_save=None, rotation_hour=None, rotation_interval_min=None, rotation_statement=None, rotator_creds_type=None, rotator_status=None, rotator_type=None, local_vars_configuration=None):  # noqa: E501
        """RotatedSecretDetailsInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._delete_previous_version_in_days = None
        self._gw_cluster_id = None
        self._last_rotation_error = None
        self._number_of_versions_to_save = None
        self._rotation_hour = None
        self._rotation_interval_min = None
        self._rotation_statement = None
        self._rotator_creds_type = None
        self._rotator_status = None
        self._rotator_type = None
        self.discriminator = None

        if delete_previous_version_in_days is not None:
            self.delete_previous_version_in_days = delete_previous_version_in_days
        if gw_cluster_id is not None:
            self.gw_cluster_id = gw_cluster_id
        if last_rotation_error is not None:
            self.last_rotation_error = last_rotation_error
        if number_of_versions_to_save is not None:
            self.number_of_versions_to_save = number_of_versions_to_save
        if rotation_hour is not None:
            self.rotation_hour = rotation_hour
        if rotation_interval_min is not None:
            self.rotation_interval_min = rotation_interval_min
        if rotation_statement is not None:
            self.rotation_statement = rotation_statement
        if rotator_creds_type is not None:
            self.rotator_creds_type = rotator_creds_type
        if rotator_status is not None:
            self.rotator_status = rotator_status
        if rotator_type is not None:
            self.rotator_type = rotator_type

    @property
    def delete_previous_version_in_days(self):
        """Gets the delete_previous_version_in_days of this RotatedSecretDetailsInfo.  # noqa: E501


        :return: The delete_previous_version_in_days of this RotatedSecretDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._delete_previous_version_in_days

    @delete_previous_version_in_days.setter
    def delete_previous_version_in_days(self, delete_previous_version_in_days):
        """Sets the delete_previous_version_in_days of this RotatedSecretDetailsInfo.


        :param delete_previous_version_in_days: The delete_previous_version_in_days of this RotatedSecretDetailsInfo.  # noqa: E501
        :type: int
        """

        self._delete_previous_version_in_days = delete_previous_version_in_days

    @property
    def gw_cluster_id(self):
        """Gets the gw_cluster_id of this RotatedSecretDetailsInfo.  # noqa: E501


        :return: The gw_cluster_id of this RotatedSecretDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._gw_cluster_id

    @gw_cluster_id.setter
    def gw_cluster_id(self, gw_cluster_id):
        """Sets the gw_cluster_id of this RotatedSecretDetailsInfo.


        :param gw_cluster_id: The gw_cluster_id of this RotatedSecretDetailsInfo.  # noqa: E501
        :type: int
        """

        self._gw_cluster_id = gw_cluster_id

    @property
    def last_rotation_error(self):
        """Gets the last_rotation_error of this RotatedSecretDetailsInfo.  # noqa: E501


        :return: The last_rotation_error of this RotatedSecretDetailsInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_rotation_error

    @last_rotation_error.setter
    def last_rotation_error(self, last_rotation_error):
        """Sets the last_rotation_error of this RotatedSecretDetailsInfo.


        :param last_rotation_error: The last_rotation_error of this RotatedSecretDetailsInfo.  # noqa: E501
        :type: str
        """

        self._last_rotation_error = last_rotation_error

    @property
    def number_of_versions_to_save(self):
        """Gets the number_of_versions_to_save of this RotatedSecretDetailsInfo.  # noqa: E501


        :return: The number_of_versions_to_save of this RotatedSecretDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._number_of_versions_to_save

    @number_of_versions_to_save.setter
    def number_of_versions_to_save(self, number_of_versions_to_save):
        """Sets the number_of_versions_to_save of this RotatedSecretDetailsInfo.


        :param number_of_versions_to_save: The number_of_versions_to_save of this RotatedSecretDetailsInfo.  # noqa: E501
        :type: int
        """

        self._number_of_versions_to_save = number_of_versions_to_save

    @property
    def rotation_hour(self):
        """Gets the rotation_hour of this RotatedSecretDetailsInfo.  # noqa: E501


        :return: The rotation_hour of this RotatedSecretDetailsInfo.  # noqa: E501
        :rtype: int
        """
        return self._rotation_hour

    @rotation_hour.setter
    def rotation_hour(self, rotation_hour):
        """Sets the rotation_hour of this RotatedSecretDetailsInfo.


        :param rotation_hour: The rotation_hour of this RotatedSecretDetailsInfo.  # noqa: E501
        :type: int
        """

        self._rotation_hour = rotation_hour

    @property
    def rotation_interval_min(self):
        """Gets the rotation_interval_min of this RotatedSecretDetailsInfo.  # noqa: E501


        :return: The rotation_interval_min of this RotatedSecretDetailsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._rotation_interval_min

    @rotation_interval_min.setter
    def rotation_interval_min(self, rotation_interval_min):
        """Sets the rotation_interval_min of this RotatedSecretDetailsInfo.


        :param rotation_interval_min: The rotation_interval_min of this RotatedSecretDetailsInfo.  # noqa: E501
        :type: bool
        """

        self._rotation_interval_min = rotation_interval_min

    @property
    def rotation_statement(self):
        """Gets the rotation_statement of this RotatedSecretDetailsInfo.  # noqa: E501


        :return: The rotation_statement of this RotatedSecretDetailsInfo.  # noqa: E501
        :rtype: str
        """
        return self._rotation_statement

    @rotation_statement.setter
    def rotation_statement(self, rotation_statement):
        """Sets the rotation_statement of this RotatedSecretDetailsInfo.


        :param rotation_statement: The rotation_statement of this RotatedSecretDetailsInfo.  # noqa: E501
        :type: str
        """

        self._rotation_statement = rotation_statement

    @property
    def rotator_creds_type(self):
        """Gets the rotator_creds_type of this RotatedSecretDetailsInfo.  # noqa: E501


        :return: The rotator_creds_type of this RotatedSecretDetailsInfo.  # noqa: E501
        :rtype: str
        """
        return self._rotator_creds_type

    @rotator_creds_type.setter
    def rotator_creds_type(self, rotator_creds_type):
        """Sets the rotator_creds_type of this RotatedSecretDetailsInfo.


        :param rotator_creds_type: The rotator_creds_type of this RotatedSecretDetailsInfo.  # noqa: E501
        :type: str
        """

        self._rotator_creds_type = rotator_creds_type

    @property
    def rotator_status(self):
        """Gets the rotator_status of this RotatedSecretDetailsInfo.  # noqa: E501

        RotationStatus defines types of rotation Status  # noqa: E501

        :return: The rotator_status of this RotatedSecretDetailsInfo.  # noqa: E501
        :rtype: str
        """
        return self._rotator_status

    @rotator_status.setter
    def rotator_status(self, rotator_status):
        """Sets the rotator_status of this RotatedSecretDetailsInfo.

        RotationStatus defines types of rotation Status  # noqa: E501

        :param rotator_status: The rotator_status of this RotatedSecretDetailsInfo.  # noqa: E501
        :type: str
        """

        self._rotator_status = rotator_status

    @property
    def rotator_type(self):
        """Gets the rotator_type of this RotatedSecretDetailsInfo.  # noqa: E501


        :return: The rotator_type of this RotatedSecretDetailsInfo.  # noqa: E501
        :rtype: str
        """
        return self._rotator_type

    @rotator_type.setter
    def rotator_type(self, rotator_type):
        """Sets the rotator_type of this RotatedSecretDetailsInfo.


        :param rotator_type: The rotator_type of this RotatedSecretDetailsInfo.  # noqa: E501
        :type: str
        """

        self._rotator_type = rotator_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RotatedSecretDetailsInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RotatedSecretDetailsInfo):
            return True

        return self.to_dict() != other.to_dict()
