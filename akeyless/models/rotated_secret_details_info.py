# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.windows_service import WindowsService
from typing import Optional, Set
from typing_extensions import Self

class RotatedSecretDetailsInfo(BaseModel):
    """
    RotatedSecretDetailsInfo The rotated secret rotator info
    """ # noqa: E501
    delete_previous_version_in_days: Optional[StrictInt] = None
    grace_rotation: Optional[StrictBool] = None
    gw_cluster_id: Optional[StrictInt] = None
    last_rotation_error: Optional[StrictStr] = None
    managed_by_akeyless: Optional[StrictBool] = None
    max_versions: Optional[StrictInt] = None
    number_of_versions_to_save: Optional[StrictInt] = None
    rotation_hour: Optional[StrictInt] = None
    rotation_interval_min: Optional[StrictBool] = None
    rotation_statement: Optional[StrictStr] = None
    rotator_creds_type: Optional[StrictStr] = None
    rotator_status: Optional[StrictStr] = Field(default=None, description="RotationStatus defines types of rotation Status")
    rotator_type: Optional[StrictStr] = None
    same_password: Optional[StrictBool] = None
    services_details: Optional[List[WindowsService]] = None
    timeout_seconds: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["delete_previous_version_in_days", "grace_rotation", "gw_cluster_id", "last_rotation_error", "managed_by_akeyless", "max_versions", "number_of_versions_to_save", "rotation_hour", "rotation_interval_min", "rotation_statement", "rotator_creds_type", "rotator_status", "rotator_type", "same_password", "services_details", "timeout_seconds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RotatedSecretDetailsInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in services_details (list)
        _items = []
        if self.services_details:
            for _item_services_details in self.services_details:
                if _item_services_details:
                    _items.append(_item_services_details.to_dict())
            _dict['services_details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RotatedSecretDetailsInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "delete_previous_version_in_days": obj.get("delete_previous_version_in_days"),
            "grace_rotation": obj.get("grace_rotation"),
            "gw_cluster_id": obj.get("gw_cluster_id"),
            "last_rotation_error": obj.get("last_rotation_error"),
            "managed_by_akeyless": obj.get("managed_by_akeyless"),
            "max_versions": obj.get("max_versions"),
            "number_of_versions_to_save": obj.get("number_of_versions_to_save"),
            "rotation_hour": obj.get("rotation_hour"),
            "rotation_interval_min": obj.get("rotation_interval_min"),
            "rotation_statement": obj.get("rotation_statement"),
            "rotator_creds_type": obj.get("rotator_creds_type"),
            "rotator_status": obj.get("rotator_status"),
            "rotator_type": obj.get("rotator_type"),
            "same_password": obj.get("same_password"),
            "services_details": [WindowsService.from_dict(_item) for _item in obj["services_details"]] if obj.get("services_details") is not None else None,
            "timeout_seconds": obj.get("timeout_seconds")
        })
        return _obj


