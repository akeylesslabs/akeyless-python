# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class ItemSraStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'count_by_host_info': 'dict(str, int)',
        'count_info': 'dict(str, dict(str, int))',
        'hosts_in_use': 'list[str]',
        'is_in_use': 'bool',
        'last_used_item': 'datetime'
    }

    attribute_map = {
        'count_by_host_info': 'count_by_host_info',
        'count_info': 'count_info',
        'hosts_in_use': 'hosts_in_use',
        'is_in_use': 'is_in_use',
        'last_used_item': 'last_used_item'
    }

    def __init__(self, count_by_host_info=None, count_info=None, hosts_in_use=None, is_in_use=None, last_used_item=None, local_vars_configuration=None):  # noqa: E501
        """ItemSraStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._count_by_host_info = None
        self._count_info = None
        self._hosts_in_use = None
        self._is_in_use = None
        self._last_used_item = None
        self.discriminator = None

        if count_by_host_info is not None:
            self.count_by_host_info = count_by_host_info
        if count_info is not None:
            self.count_info = count_info
        if hosts_in_use is not None:
            self.hosts_in_use = hosts_in_use
        if is_in_use is not None:
            self.is_in_use = is_in_use
        if last_used_item is not None:
            self.last_used_item = last_used_item

    @property
    def count_by_host_info(self):
        """Gets the count_by_host_info of this ItemSraStatus.  # noqa: E501


        :return: The count_by_host_info of this ItemSraStatus.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._count_by_host_info

    @count_by_host_info.setter
    def count_by_host_info(self, count_by_host_info):
        """Sets the count_by_host_info of this ItemSraStatus.


        :param count_by_host_info: The count_by_host_info of this ItemSraStatus.  # noqa: E501
        :type: dict(str, int)
        """

        self._count_by_host_info = count_by_host_info

    @property
    def count_info(self):
        """Gets the count_info of this ItemSraStatus.  # noqa: E501


        :return: The count_info of this ItemSraStatus.  # noqa: E501
        :rtype: dict(str, dict(str, int))
        """
        return self._count_info

    @count_info.setter
    def count_info(self, count_info):
        """Sets the count_info of this ItemSraStatus.


        :param count_info: The count_info of this ItemSraStatus.  # noqa: E501
        :type: dict(str, dict(str, int))
        """

        self._count_info = count_info

    @property
    def hosts_in_use(self):
        """Gets the hosts_in_use of this ItemSraStatus.  # noqa: E501


        :return: The hosts_in_use of this ItemSraStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts_in_use

    @hosts_in_use.setter
    def hosts_in_use(self, hosts_in_use):
        """Sets the hosts_in_use of this ItemSraStatus.


        :param hosts_in_use: The hosts_in_use of this ItemSraStatus.  # noqa: E501
        :type: list[str]
        """

        self._hosts_in_use = hosts_in_use

    @property
    def is_in_use(self):
        """Gets the is_in_use of this ItemSraStatus.  # noqa: E501


        :return: The is_in_use of this ItemSraStatus.  # noqa: E501
        :rtype: bool
        """
        return self._is_in_use

    @is_in_use.setter
    def is_in_use(self, is_in_use):
        """Sets the is_in_use of this ItemSraStatus.


        :param is_in_use: The is_in_use of this ItemSraStatus.  # noqa: E501
        :type: bool
        """

        self._is_in_use = is_in_use

    @property
    def last_used_item(self):
        """Gets the last_used_item of this ItemSraStatus.  # noqa: E501


        :return: The last_used_item of this ItemSraStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._last_used_item

    @last_used_item.setter
    def last_used_item(self, last_used_item):
        """Sets the last_used_item of this ItemSraStatus.


        :param last_used_item: The last_used_item of this ItemSraStatus.  # noqa: E501
        :type: datetime
        """

        self._last_used_item = last_used_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemSraStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemSraStatus):
            return True

        return self.to_dict() != other.to_dict()
