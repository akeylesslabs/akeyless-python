# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class CertificateTemplateInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'common_name': 'str',
        'country': 'str',
        'digest_algo': 'str',
        'locality': 'str',
        'organization': 'str',
        'province': 'str',
        'self_signed_enabled': 'bool',
        'ttl': 'int'
    }

    attribute_map = {
        'common_name': 'common_name',
        'country': 'country',
        'digest_algo': 'digest_algo',
        'locality': 'locality',
        'organization': 'organization',
        'province': 'province',
        'self_signed_enabled': 'self_signed_enabled',
        'ttl': 'ttl'
    }

    def __init__(self, common_name=None, country=None, digest_algo=None, locality=None, organization=None, province=None, self_signed_enabled=None, ttl=None, local_vars_configuration=None):  # noqa: E501
        """CertificateTemplateInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._common_name = None
        self._country = None
        self._digest_algo = None
        self._locality = None
        self._organization = None
        self._province = None
        self._self_signed_enabled = None
        self._ttl = None
        self.discriminator = None

        if common_name is not None:
            self.common_name = common_name
        if country is not None:
            self.country = country
        if digest_algo is not None:
            self.digest_algo = digest_algo
        if locality is not None:
            self.locality = locality
        if organization is not None:
            self.organization = organization
        if province is not None:
            self.province = province
        if self_signed_enabled is not None:
            self.self_signed_enabled = self_signed_enabled
        if ttl is not None:
            self.ttl = ttl

    @property
    def common_name(self):
        """Gets the common_name of this CertificateTemplateInfo.  # noqa: E501


        :return: The common_name of this CertificateTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._common_name

    @common_name.setter
    def common_name(self, common_name):
        """Sets the common_name of this CertificateTemplateInfo.


        :param common_name: The common_name of this CertificateTemplateInfo.  # noqa: E501
        :type: str
        """

        self._common_name = common_name

    @property
    def country(self):
        """Gets the country of this CertificateTemplateInfo.  # noqa: E501


        :return: The country of this CertificateTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CertificateTemplateInfo.


        :param country: The country of this CertificateTemplateInfo.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def digest_algo(self):
        """Gets the digest_algo of this CertificateTemplateInfo.  # noqa: E501


        :return: The digest_algo of this CertificateTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._digest_algo

    @digest_algo.setter
    def digest_algo(self, digest_algo):
        """Sets the digest_algo of this CertificateTemplateInfo.


        :param digest_algo: The digest_algo of this CertificateTemplateInfo.  # noqa: E501
        :type: str
        """

        self._digest_algo = digest_algo

    @property
    def locality(self):
        """Gets the locality of this CertificateTemplateInfo.  # noqa: E501


        :return: The locality of this CertificateTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this CertificateTemplateInfo.


        :param locality: The locality of this CertificateTemplateInfo.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def organization(self):
        """Gets the organization of this CertificateTemplateInfo.  # noqa: E501


        :return: The organization of this CertificateTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this CertificateTemplateInfo.


        :param organization: The organization of this CertificateTemplateInfo.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def province(self):
        """Gets the province of this CertificateTemplateInfo.  # noqa: E501


        :return: The province of this CertificateTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this CertificateTemplateInfo.


        :param province: The province of this CertificateTemplateInfo.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def self_signed_enabled(self):
        """Gets the self_signed_enabled of this CertificateTemplateInfo.  # noqa: E501


        :return: The self_signed_enabled of this CertificateTemplateInfo.  # noqa: E501
        :rtype: bool
        """
        return self._self_signed_enabled

    @self_signed_enabled.setter
    def self_signed_enabled(self, self_signed_enabled):
        """Sets the self_signed_enabled of this CertificateTemplateInfo.


        :param self_signed_enabled: The self_signed_enabled of this CertificateTemplateInfo.  # noqa: E501
        :type: bool
        """

        self._self_signed_enabled = self_signed_enabled

    @property
    def ttl(self):
        """Gets the ttl of this CertificateTemplateInfo.  # noqa: E501


        :return: The ttl of this CertificateTemplateInfo.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this CertificateTemplateInfo.


        :param ttl: The ttl of this CertificateTemplateInfo.  # noqa: E501
        :type: int
        """

        self._ttl = ttl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateTemplateInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificateTemplateInfo):
            return True

        return self.to_dict() != other.to_dict()
