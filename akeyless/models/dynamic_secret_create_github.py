# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DynamicSecretCreateGithub(BaseModel):
    """
    dynamicSecretCreateGithub is a command that creates github dynamic secret
    """ # noqa: E501
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    github_app_id: Optional[StrictInt] = Field(default=None, description="Github app id", alias="github-app-id")
    github_app_private_key: Optional[StrictStr] = Field(default=None, description="App private key", alias="github-app-private-key")
    github_base_url: Optional[StrictStr] = Field(default='https://api.github.com/', description="Base URL", alias="github-base-url")
    installation_id: Optional[StrictInt] = Field(default=None, description="GitHub application installation id", alias="installation-id")
    installation_organization: Optional[StrictStr] = Field(default=None, description="Optional, mutually exclusive with installation id, GitHub organization name", alias="installation-organization")
    installation_repository: Optional[StrictStr] = Field(default=None, description="Optional, mutually exclusive with installation id, GitHub repository '<owner>/<repo-name>'", alias="installation-repository")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    name: StrictStr = Field(description="Dynamic secret name")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Add tags attached to this object")
    target_name: Optional[StrictStr] = Field(default=None, description="Target name", alias="target-name")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    token_permissions: Optional[List[StrictStr]] = Field(default=None, description="Optional - installation token's allowed permissions", alias="token-permissions")
    token_repositories: Optional[List[StrictStr]] = Field(default=None, description="Optional - installation token's allowed repositories", alias="token-repositories")
    token_ttl: Optional[StrictStr] = Field(default='60m', description="Token TTL", alias="token-ttl")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["delete_protection", "description", "github-app-id", "github-app-private-key", "github-base-url", "installation-id", "installation-organization", "installation-repository", "json", "name", "tags", "target-name", "token", "token-permissions", "token-repositories", "token-ttl", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DynamicSecretCreateGithub from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DynamicSecretCreateGithub from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "github-app-id": obj.get("github-app-id"),
            "github-app-private-key": obj.get("github-app-private-key"),
            "github-base-url": obj.get("github-base-url") if obj.get("github-base-url") is not None else 'https://api.github.com/',
            "installation-id": obj.get("installation-id"),
            "installation-organization": obj.get("installation-organization"),
            "installation-repository": obj.get("installation-repository"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "name": obj.get("name"),
            "tags": obj.get("tags"),
            "target-name": obj.get("target-name"),
            "token": obj.get("token"),
            "token-permissions": obj.get("token-permissions"),
            "token-repositories": obj.get("token-repositories"),
            "token-ttl": obj.get("token-ttl") if obj.get("token-ttl") is not None else '60m',
            "uid-token": obj.get("uid-token")
        })
        return _obj


