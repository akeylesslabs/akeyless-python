# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class PingTargetDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'administrative_port': 'str',
        'authorization_port': 'str',
        'ping_url': 'str',
        'privileged_user': 'str',
        'user_password': 'str'
    }

    attribute_map = {
        'administrative_port': 'administrative_port',
        'authorization_port': 'authorization_port',
        'ping_url': 'ping_url',
        'privileged_user': 'privileged_user',
        'user_password': 'user_password'
    }

    def __init__(self, administrative_port=None, authorization_port=None, ping_url=None, privileged_user=None, user_password=None, local_vars_configuration=None):  # noqa: E501
        """PingTargetDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._administrative_port = None
        self._authorization_port = None
        self._ping_url = None
        self._privileged_user = None
        self._user_password = None
        self.discriminator = None

        if administrative_port is not None:
            self.administrative_port = administrative_port
        if authorization_port is not None:
            self.authorization_port = authorization_port
        if ping_url is not None:
            self.ping_url = ping_url
        if privileged_user is not None:
            self.privileged_user = privileged_user
        if user_password is not None:
            self.user_password = user_password

    @property
    def administrative_port(self):
        """Gets the administrative_port of this PingTargetDetails.  # noqa: E501


        :return: The administrative_port of this PingTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._administrative_port

    @administrative_port.setter
    def administrative_port(self, administrative_port):
        """Sets the administrative_port of this PingTargetDetails.


        :param administrative_port: The administrative_port of this PingTargetDetails.  # noqa: E501
        :type: str
        """

        self._administrative_port = administrative_port

    @property
    def authorization_port(self):
        """Gets the authorization_port of this PingTargetDetails.  # noqa: E501


        :return: The authorization_port of this PingTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._authorization_port

    @authorization_port.setter
    def authorization_port(self, authorization_port):
        """Sets the authorization_port of this PingTargetDetails.


        :param authorization_port: The authorization_port of this PingTargetDetails.  # noqa: E501
        :type: str
        """

        self._authorization_port = authorization_port

    @property
    def ping_url(self):
        """Gets the ping_url of this PingTargetDetails.  # noqa: E501


        :return: The ping_url of this PingTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._ping_url

    @ping_url.setter
    def ping_url(self, ping_url):
        """Sets the ping_url of this PingTargetDetails.


        :param ping_url: The ping_url of this PingTargetDetails.  # noqa: E501
        :type: str
        """

        self._ping_url = ping_url

    @property
    def privileged_user(self):
        """Gets the privileged_user of this PingTargetDetails.  # noqa: E501


        :return: The privileged_user of this PingTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._privileged_user

    @privileged_user.setter
    def privileged_user(self, privileged_user):
        """Sets the privileged_user of this PingTargetDetails.


        :param privileged_user: The privileged_user of this PingTargetDetails.  # noqa: E501
        :type: str
        """

        self._privileged_user = privileged_user

    @property
    def user_password(self):
        """Gets the user_password of this PingTargetDetails.  # noqa: E501


        :return: The user_password of this PingTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_password

    @user_password.setter
    def user_password(self, user_password):
        """Sets the user_password of this PingTargetDetails.


        :param user_password: The user_password of this PingTargetDetails.  # noqa: E501
        :type: str
        """

        self._user_password = user_password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PingTargetDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PingTargetDetails):
            return True

        return self.to_dict() != other.to_dict()
