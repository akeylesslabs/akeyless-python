# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class RegexpTokenizerInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alphabet': 'str',
        'decoding_template': 'str',
        'encoding_template': 'str',
        'pattern': 'str'
    }

    attribute_map = {
        'alphabet': 'alphabet',
        'decoding_template': 'decoding_template',
        'encoding_template': 'encoding_template',
        'pattern': 'pattern'
    }

    def __init__(self, alphabet=None, decoding_template=None, encoding_template=None, pattern=None, local_vars_configuration=None):  # noqa: E501
        """RegexpTokenizerInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._alphabet = None
        self._decoding_template = None
        self._encoding_template = None
        self._pattern = None
        self.discriminator = None

        if alphabet is not None:
            self.alphabet = alphabet
        if decoding_template is not None:
            self.decoding_template = decoding_template
        if encoding_template is not None:
            self.encoding_template = encoding_template
        if pattern is not None:
            self.pattern = pattern

    @property
    def alphabet(self):
        """Gets the alphabet of this RegexpTokenizerInfo.  # noqa: E501

        The Alphabet used for the tokenization  # noqa: E501

        :return: The alphabet of this RegexpTokenizerInfo.  # noqa: E501
        :rtype: str
        """
        return self._alphabet

    @alphabet.setter
    def alphabet(self, alphabet):
        """Sets the alphabet of this RegexpTokenizerInfo.

        The Alphabet used for the tokenization  # noqa: E501

        :param alphabet: The alphabet of this RegexpTokenizerInfo.  # noqa: E501
        :type: str
        """

        self._alphabet = alphabet

    @property
    def decoding_template(self):
        """Gets the decoding_template of this RegexpTokenizerInfo.  # noqa: E501

        Transformation to perform on the decrypted data  # noqa: E501

        :return: The decoding_template of this RegexpTokenizerInfo.  # noqa: E501
        :rtype: str
        """
        return self._decoding_template

    @decoding_template.setter
    def decoding_template(self, decoding_template):
        """Sets the decoding_template of this RegexpTokenizerInfo.

        Transformation to perform on the decrypted data  # noqa: E501

        :param decoding_template: The decoding_template of this RegexpTokenizerInfo.  # noqa: E501
        :type: str
        """

        self._decoding_template = decoding_template

    @property
    def encoding_template(self):
        """Gets the encoding_template of this RegexpTokenizerInfo.  # noqa: E501

        Transformation to perform on the encrypted data, if the required output template doesn't match the input string The output Should still be valid for the Pattern, otherwise the secret would be able to be decrypted.  # noqa: E501

        :return: The encoding_template of this RegexpTokenizerInfo.  # noqa: E501
        :rtype: str
        """
        return self._encoding_template

    @encoding_template.setter
    def encoding_template(self, encoding_template):
        """Sets the encoding_template of this RegexpTokenizerInfo.

        Transformation to perform on the encrypted data, if the required output template doesn't match the input string The output Should still be valid for the Pattern, otherwise the secret would be able to be decrypted.  # noqa: E501

        :param encoding_template: The encoding_template of this RegexpTokenizerInfo.  # noqa: E501
        :type: str
        """

        self._encoding_template = encoding_template

    @property
    def pattern(self):
        """Gets the pattern of this RegexpTokenizerInfo.  # noqa: E501

        Regexp pattern to extract and deposit the text/encdata  # noqa: E501

        :return: The pattern of this RegexpTokenizerInfo.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this RegexpTokenizerInfo.

        Regexp pattern to extract and deposit the text/encdata  # noqa: E501

        :param pattern: The pattern of this RegexpTokenizerInfo.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegexpTokenizerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegexpTokenizerInfo):
            return True

        return self.to_dict() != other.to_dict()
