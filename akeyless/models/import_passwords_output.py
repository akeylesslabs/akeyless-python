# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class ImportPasswordsOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'imported': 'int',
        'passwords_in_file': 'int',
        'successfully_parsed': 'int'
    }

    attribute_map = {
        'imported': 'imported',
        'passwords_in_file': 'passwords_in_file',
        'successfully_parsed': 'successfully_parsed'
    }

    def __init__(self, imported=None, passwords_in_file=None, successfully_parsed=None, local_vars_configuration=None):  # noqa: E501
        """ImportPasswordsOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._imported = None
        self._passwords_in_file = None
        self._successfully_parsed = None
        self.discriminator = None

        if imported is not None:
            self.imported = imported
        if passwords_in_file is not None:
            self.passwords_in_file = passwords_in_file
        if successfully_parsed is not None:
            self.successfully_parsed = successfully_parsed

    @property
    def imported(self):
        """Gets the imported of this ImportPasswordsOutput.  # noqa: E501


        :return: The imported of this ImportPasswordsOutput.  # noqa: E501
        :rtype: int
        """
        return self._imported

    @imported.setter
    def imported(self, imported):
        """Sets the imported of this ImportPasswordsOutput.


        :param imported: The imported of this ImportPasswordsOutput.  # noqa: E501
        :type: int
        """

        self._imported = imported

    @property
    def passwords_in_file(self):
        """Gets the passwords_in_file of this ImportPasswordsOutput.  # noqa: E501


        :return: The passwords_in_file of this ImportPasswordsOutput.  # noqa: E501
        :rtype: int
        """
        return self._passwords_in_file

    @passwords_in_file.setter
    def passwords_in_file(self, passwords_in_file):
        """Sets the passwords_in_file of this ImportPasswordsOutput.


        :param passwords_in_file: The passwords_in_file of this ImportPasswordsOutput.  # noqa: E501
        :type: int
        """

        self._passwords_in_file = passwords_in_file

    @property
    def successfully_parsed(self):
        """Gets the successfully_parsed of this ImportPasswordsOutput.  # noqa: E501


        :return: The successfully_parsed of this ImportPasswordsOutput.  # noqa: E501
        :rtype: int
        """
        return self._successfully_parsed

    @successfully_parsed.setter
    def successfully_parsed(self, successfully_parsed):
        """Sets the successfully_parsed of this ImportPasswordsOutput.


        :param successfully_parsed: The successfully_parsed of this ImportPasswordsOutput.  # noqa: E501
        :type: int
        """

        self._successfully_parsed = successfully_parsed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportPasswordsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportPasswordsOutput):
            return True

        return self.to_dict() != other.to_dict()
