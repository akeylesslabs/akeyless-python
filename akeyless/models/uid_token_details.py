# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UIDTokenDetails(BaseModel):
    """
    UIDTokenDetails
    """ # noqa: E501
    children: Optional[Dict[str, UIDTokenDetails]] = None
    comment: Optional[StrictStr] = None
    deny_inheritance: Optional[StrictBool] = None
    deny_rotate: Optional[StrictBool] = None
    depth: Optional[StrictInt] = None
    expired_date: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    last_rotate: Optional[StrictStr] = None
    revoked: Optional[StrictBool] = None
    ttl: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["children", "comment", "deny_inheritance", "deny_rotate", "depth", "expired_date", "id", "last_rotate", "revoked", "ttl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UIDTokenDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in children (dict)
        _field_dict = {}
        if self.children:
            for _key_children in self.children:
                if self.children[_key_children]:
                    _field_dict[_key_children] = self.children[_key_children].to_dict()
            _dict['children'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UIDTokenDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "children": dict(
                (_k, UIDTokenDetails.from_dict(_v))
                for _k, _v in obj["children"].items()
            )
            if obj.get("children") is not None
            else None,
            "comment": obj.get("comment"),
            "deny_inheritance": obj.get("deny_inheritance"),
            "deny_rotate": obj.get("deny_rotate"),
            "depth": obj.get("depth"),
            "expired_date": obj.get("expired_date"),
            "id": obj.get("id"),
            "last_rotate": obj.get("last_rotate"),
            "revoked": obj.get("revoked"),
            "ttl": obj.get("ttl")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
UIDTokenDetails.model_rebuild(raise_errors=False)

