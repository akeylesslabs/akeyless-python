# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.active_directory_migration import ActiveDirectoryMigration
from akeyless.models.aws_secrets_migration import AWSSecretsMigration
from akeyless.models.azure_key_vault_migration import AzureKeyVaultMigration
from akeyless.models.gcp_secrets_migration import GCPSecretsMigration
from akeyless.models.hashi_migration import HashiMigration
from akeyless.models.k8_s_migration import K8SMigration
from akeyless.models.mock_migration import MockMigration
from akeyless.models.one_password_migration import OnePasswordMigration
from akeyless.models.server_inventory_migration import ServerInventoryMigration
from typing import Optional, Set
from typing_extensions import Self

class MigrationsConfigPart(BaseModel):
    """
    MigrationsConfigPart
    """ # noqa: E501
    active_directory_migrations: Optional[List[ActiveDirectoryMigration]] = None
    aws_secrets_migrations: Optional[List[AWSSecretsMigration]] = None
    azure_kv_migrations: Optional[List[AzureKeyVaultMigration]] = None
    gcp_secrets_migrations: Optional[List[GCPSecretsMigration]] = None
    hashi_migrations: Optional[List[HashiMigration]] = None
    k8s_migrations: Optional[List[K8SMigration]] = None
    mock_migrations: Optional[List[MockMigration]] = None
    one_password_migrations: Optional[List[OnePasswordMigration]] = None
    server_inventory_migrations: Optional[List[ServerInventoryMigration]] = None
    __properties: ClassVar[List[str]] = ["active_directory_migrations", "aws_secrets_migrations", "azure_kv_migrations", "gcp_secrets_migrations", "hashi_migrations", "k8s_migrations", "mock_migrations", "one_password_migrations", "server_inventory_migrations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MigrationsConfigPart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in active_directory_migrations (list)
        _items = []
        if self.active_directory_migrations:
            for _item_active_directory_migrations in self.active_directory_migrations:
                if _item_active_directory_migrations:
                    _items.append(_item_active_directory_migrations.to_dict())
            _dict['active_directory_migrations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in aws_secrets_migrations (list)
        _items = []
        if self.aws_secrets_migrations:
            for _item_aws_secrets_migrations in self.aws_secrets_migrations:
                if _item_aws_secrets_migrations:
                    _items.append(_item_aws_secrets_migrations.to_dict())
            _dict['aws_secrets_migrations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in azure_kv_migrations (list)
        _items = []
        if self.azure_kv_migrations:
            for _item_azure_kv_migrations in self.azure_kv_migrations:
                if _item_azure_kv_migrations:
                    _items.append(_item_azure_kv_migrations.to_dict())
            _dict['azure_kv_migrations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in gcp_secrets_migrations (list)
        _items = []
        if self.gcp_secrets_migrations:
            for _item_gcp_secrets_migrations in self.gcp_secrets_migrations:
                if _item_gcp_secrets_migrations:
                    _items.append(_item_gcp_secrets_migrations.to_dict())
            _dict['gcp_secrets_migrations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in hashi_migrations (list)
        _items = []
        if self.hashi_migrations:
            for _item_hashi_migrations in self.hashi_migrations:
                if _item_hashi_migrations:
                    _items.append(_item_hashi_migrations.to_dict())
            _dict['hashi_migrations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in k8s_migrations (list)
        _items = []
        if self.k8s_migrations:
            for _item_k8s_migrations in self.k8s_migrations:
                if _item_k8s_migrations:
                    _items.append(_item_k8s_migrations.to_dict())
            _dict['k8s_migrations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in mock_migrations (list)
        _items = []
        if self.mock_migrations:
            for _item_mock_migrations in self.mock_migrations:
                if _item_mock_migrations:
                    _items.append(_item_mock_migrations.to_dict())
            _dict['mock_migrations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in one_password_migrations (list)
        _items = []
        if self.one_password_migrations:
            for _item_one_password_migrations in self.one_password_migrations:
                if _item_one_password_migrations:
                    _items.append(_item_one_password_migrations.to_dict())
            _dict['one_password_migrations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in server_inventory_migrations (list)
        _items = []
        if self.server_inventory_migrations:
            for _item_server_inventory_migrations in self.server_inventory_migrations:
                if _item_server_inventory_migrations:
                    _items.append(_item_server_inventory_migrations.to_dict())
            _dict['server_inventory_migrations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MigrationsConfigPart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "active_directory_migrations": [ActiveDirectoryMigration.from_dict(_item) for _item in obj["active_directory_migrations"]] if obj.get("active_directory_migrations") is not None else None,
            "aws_secrets_migrations": [AWSSecretsMigration.from_dict(_item) for _item in obj["aws_secrets_migrations"]] if obj.get("aws_secrets_migrations") is not None else None,
            "azure_kv_migrations": [AzureKeyVaultMigration.from_dict(_item) for _item in obj["azure_kv_migrations"]] if obj.get("azure_kv_migrations") is not None else None,
            "gcp_secrets_migrations": [GCPSecretsMigration.from_dict(_item) for _item in obj["gcp_secrets_migrations"]] if obj.get("gcp_secrets_migrations") is not None else None,
            "hashi_migrations": [HashiMigration.from_dict(_item) for _item in obj["hashi_migrations"]] if obj.get("hashi_migrations") is not None else None,
            "k8s_migrations": [K8SMigration.from_dict(_item) for _item in obj["k8s_migrations"]] if obj.get("k8s_migrations") is not None else None,
            "mock_migrations": [MockMigration.from_dict(_item) for _item in obj["mock_migrations"]] if obj.get("mock_migrations") is not None else None,
            "one_password_migrations": [OnePasswordMigration.from_dict(_item) for _item in obj["one_password_migrations"]] if obj.get("one_password_migrations") is not None else None,
            "server_inventory_migrations": [ServerInventoryMigration.from_dict(_item) for _item in obj["server_inventory_migrations"]] if obj.get("server_inventory_migrations") is not None else None
        })
        return _obj


