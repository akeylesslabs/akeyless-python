# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class MigrationsConfigPart(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_directory_migrations': 'list[ActiveDirectoryMigration]',
        'aws_secrets_migrations': 'list[AWSSecretsMigration]',
        'azure_kv_migrations': 'list[AzureKeyVaultMigration]',
        'gcp_secrets_migrations': 'list[GCPSecretsMigration]',
        'hashi_migrations': 'list[HashiMigration]',
        'k8s_migrations': 'list[K8SMigration]',
        'mock_migrations': 'list[MockMigration]',
        'one_password_migrations': 'list[OnePasswordMigration]',
        'server_inventory_migrations': 'list[ServerInventoryMigration]'
    }

    attribute_map = {
        'active_directory_migrations': 'active_directory_migrations',
        'aws_secrets_migrations': 'aws_secrets_migrations',
        'azure_kv_migrations': 'azure_kv_migrations',
        'gcp_secrets_migrations': 'gcp_secrets_migrations',
        'hashi_migrations': 'hashi_migrations',
        'k8s_migrations': 'k8s_migrations',
        'mock_migrations': 'mock_migrations',
        'one_password_migrations': 'one_password_migrations',
        'server_inventory_migrations': 'server_inventory_migrations'
    }

    def __init__(self, active_directory_migrations=None, aws_secrets_migrations=None, azure_kv_migrations=None, gcp_secrets_migrations=None, hashi_migrations=None, k8s_migrations=None, mock_migrations=None, one_password_migrations=None, server_inventory_migrations=None, local_vars_configuration=None):  # noqa: E501
        """MigrationsConfigPart - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active_directory_migrations = None
        self._aws_secrets_migrations = None
        self._azure_kv_migrations = None
        self._gcp_secrets_migrations = None
        self._hashi_migrations = None
        self._k8s_migrations = None
        self._mock_migrations = None
        self._one_password_migrations = None
        self._server_inventory_migrations = None
        self.discriminator = None

        if active_directory_migrations is not None:
            self.active_directory_migrations = active_directory_migrations
        if aws_secrets_migrations is not None:
            self.aws_secrets_migrations = aws_secrets_migrations
        if azure_kv_migrations is not None:
            self.azure_kv_migrations = azure_kv_migrations
        if gcp_secrets_migrations is not None:
            self.gcp_secrets_migrations = gcp_secrets_migrations
        if hashi_migrations is not None:
            self.hashi_migrations = hashi_migrations
        if k8s_migrations is not None:
            self.k8s_migrations = k8s_migrations
        if mock_migrations is not None:
            self.mock_migrations = mock_migrations
        if one_password_migrations is not None:
            self.one_password_migrations = one_password_migrations
        if server_inventory_migrations is not None:
            self.server_inventory_migrations = server_inventory_migrations

    @property
    def active_directory_migrations(self):
        """Gets the active_directory_migrations of this MigrationsConfigPart.  # noqa: E501


        :return: The active_directory_migrations of this MigrationsConfigPart.  # noqa: E501
        :rtype: list[ActiveDirectoryMigration]
        """
        return self._active_directory_migrations

    @active_directory_migrations.setter
    def active_directory_migrations(self, active_directory_migrations):
        """Sets the active_directory_migrations of this MigrationsConfigPart.


        :param active_directory_migrations: The active_directory_migrations of this MigrationsConfigPart.  # noqa: E501
        :type: list[ActiveDirectoryMigration]
        """

        self._active_directory_migrations = active_directory_migrations

    @property
    def aws_secrets_migrations(self):
        """Gets the aws_secrets_migrations of this MigrationsConfigPart.  # noqa: E501


        :return: The aws_secrets_migrations of this MigrationsConfigPart.  # noqa: E501
        :rtype: list[AWSSecretsMigration]
        """
        return self._aws_secrets_migrations

    @aws_secrets_migrations.setter
    def aws_secrets_migrations(self, aws_secrets_migrations):
        """Sets the aws_secrets_migrations of this MigrationsConfigPart.


        :param aws_secrets_migrations: The aws_secrets_migrations of this MigrationsConfigPart.  # noqa: E501
        :type: list[AWSSecretsMigration]
        """

        self._aws_secrets_migrations = aws_secrets_migrations

    @property
    def azure_kv_migrations(self):
        """Gets the azure_kv_migrations of this MigrationsConfigPart.  # noqa: E501


        :return: The azure_kv_migrations of this MigrationsConfigPart.  # noqa: E501
        :rtype: list[AzureKeyVaultMigration]
        """
        return self._azure_kv_migrations

    @azure_kv_migrations.setter
    def azure_kv_migrations(self, azure_kv_migrations):
        """Sets the azure_kv_migrations of this MigrationsConfigPart.


        :param azure_kv_migrations: The azure_kv_migrations of this MigrationsConfigPart.  # noqa: E501
        :type: list[AzureKeyVaultMigration]
        """

        self._azure_kv_migrations = azure_kv_migrations

    @property
    def gcp_secrets_migrations(self):
        """Gets the gcp_secrets_migrations of this MigrationsConfigPart.  # noqa: E501


        :return: The gcp_secrets_migrations of this MigrationsConfigPart.  # noqa: E501
        :rtype: list[GCPSecretsMigration]
        """
        return self._gcp_secrets_migrations

    @gcp_secrets_migrations.setter
    def gcp_secrets_migrations(self, gcp_secrets_migrations):
        """Sets the gcp_secrets_migrations of this MigrationsConfigPart.


        :param gcp_secrets_migrations: The gcp_secrets_migrations of this MigrationsConfigPart.  # noqa: E501
        :type: list[GCPSecretsMigration]
        """

        self._gcp_secrets_migrations = gcp_secrets_migrations

    @property
    def hashi_migrations(self):
        """Gets the hashi_migrations of this MigrationsConfigPart.  # noqa: E501


        :return: The hashi_migrations of this MigrationsConfigPart.  # noqa: E501
        :rtype: list[HashiMigration]
        """
        return self._hashi_migrations

    @hashi_migrations.setter
    def hashi_migrations(self, hashi_migrations):
        """Sets the hashi_migrations of this MigrationsConfigPart.


        :param hashi_migrations: The hashi_migrations of this MigrationsConfigPart.  # noqa: E501
        :type: list[HashiMigration]
        """

        self._hashi_migrations = hashi_migrations

    @property
    def k8s_migrations(self):
        """Gets the k8s_migrations of this MigrationsConfigPart.  # noqa: E501


        :return: The k8s_migrations of this MigrationsConfigPart.  # noqa: E501
        :rtype: list[K8SMigration]
        """
        return self._k8s_migrations

    @k8s_migrations.setter
    def k8s_migrations(self, k8s_migrations):
        """Sets the k8s_migrations of this MigrationsConfigPart.


        :param k8s_migrations: The k8s_migrations of this MigrationsConfigPart.  # noqa: E501
        :type: list[K8SMigration]
        """

        self._k8s_migrations = k8s_migrations

    @property
    def mock_migrations(self):
        """Gets the mock_migrations of this MigrationsConfigPart.  # noqa: E501


        :return: The mock_migrations of this MigrationsConfigPart.  # noqa: E501
        :rtype: list[MockMigration]
        """
        return self._mock_migrations

    @mock_migrations.setter
    def mock_migrations(self, mock_migrations):
        """Sets the mock_migrations of this MigrationsConfigPart.


        :param mock_migrations: The mock_migrations of this MigrationsConfigPart.  # noqa: E501
        :type: list[MockMigration]
        """

        self._mock_migrations = mock_migrations

    @property
    def one_password_migrations(self):
        """Gets the one_password_migrations of this MigrationsConfigPart.  # noqa: E501


        :return: The one_password_migrations of this MigrationsConfigPart.  # noqa: E501
        :rtype: list[OnePasswordMigration]
        """
        return self._one_password_migrations

    @one_password_migrations.setter
    def one_password_migrations(self, one_password_migrations):
        """Sets the one_password_migrations of this MigrationsConfigPart.


        :param one_password_migrations: The one_password_migrations of this MigrationsConfigPart.  # noqa: E501
        :type: list[OnePasswordMigration]
        """

        self._one_password_migrations = one_password_migrations

    @property
    def server_inventory_migrations(self):
        """Gets the server_inventory_migrations of this MigrationsConfigPart.  # noqa: E501


        :return: The server_inventory_migrations of this MigrationsConfigPart.  # noqa: E501
        :rtype: list[ServerInventoryMigration]
        """
        return self._server_inventory_migrations

    @server_inventory_migrations.setter
    def server_inventory_migrations(self, server_inventory_migrations):
        """Sets the server_inventory_migrations of this MigrationsConfigPart.


        :param server_inventory_migrations: The server_inventory_migrations of this MigrationsConfigPart.  # noqa: E501
        :type: list[ServerInventoryMigration]
        """

        self._server_inventory_migrations = server_inventory_migrations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationsConfigPart):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MigrationsConfigPart):
            return True

        return self.to_dict() != other.to_dict()
