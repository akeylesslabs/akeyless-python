# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class DynamicSecretCreateGitlab(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delete_protection': 'str',
        'description': 'str',
        'gitlab_access_token': 'str',
        'gitlab_access_type': 'str',
        'gitlab_certificate': 'str',
        'gitlab_role': 'str',
        'gitlab_token_scopes': 'str',
        'gitlab_url': 'str',
        'group_name': 'str',
        'installation_organization': 'str',
        'json': 'bool',
        'name': 'str',
        'tags': 'list[str]',
        'target_name': 'str',
        'token': 'str',
        'ttl': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'delete_protection': 'delete_protection',
        'description': 'description',
        'gitlab_access_token': 'gitlab-access-token',
        'gitlab_access_type': 'gitlab-access-type',
        'gitlab_certificate': 'gitlab-certificate',
        'gitlab_role': 'gitlab-role',
        'gitlab_token_scopes': 'gitlab-token-scopes',
        'gitlab_url': 'gitlab-url',
        'group_name': 'group-name',
        'installation_organization': 'installation-organization',
        'json': 'json',
        'name': 'name',
        'tags': 'tags',
        'target_name': 'target-name',
        'token': 'token',
        'ttl': 'ttl',
        'uid_token': 'uid-token'
    }

    def __init__(self, delete_protection=None, description=None, gitlab_access_token=None, gitlab_access_type=None, gitlab_certificate=None, gitlab_role=None, gitlab_token_scopes=None, gitlab_url='https://gitlab.com/', group_name=None, installation_organization=None, json=False, name=None, tags=None, target_name=None, token=None, ttl=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """DynamicSecretCreateGitlab - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._delete_protection = None
        self._description = None
        self._gitlab_access_token = None
        self._gitlab_access_type = None
        self._gitlab_certificate = None
        self._gitlab_role = None
        self._gitlab_token_scopes = None
        self._gitlab_url = None
        self._group_name = None
        self._installation_organization = None
        self._json = None
        self._name = None
        self._tags = None
        self._target_name = None
        self._token = None
        self._ttl = None
        self._uid_token = None
        self.discriminator = None

        if delete_protection is not None:
            self.delete_protection = delete_protection
        if description is not None:
            self.description = description
        if gitlab_access_token is not None:
            self.gitlab_access_token = gitlab_access_token
        self.gitlab_access_type = gitlab_access_type
        if gitlab_certificate is not None:
            self.gitlab_certificate = gitlab_certificate
        if gitlab_role is not None:
            self.gitlab_role = gitlab_role
        self.gitlab_token_scopes = gitlab_token_scopes
        if gitlab_url is not None:
            self.gitlab_url = gitlab_url
        if group_name is not None:
            self.group_name = group_name
        if installation_organization is not None:
            self.installation_organization = installation_organization
        if json is not None:
            self.json = json
        self.name = name
        if tags is not None:
            self.tags = tags
        if target_name is not None:
            self.target_name = target_name
        if token is not None:
            self.token = token
        if ttl is not None:
            self.ttl = ttl
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def delete_protection(self):
        """Gets the delete_protection of this DynamicSecretCreateGitlab.  # noqa: E501

        Protection from accidental deletion of this object [true/false]  # noqa: E501

        :return: The delete_protection of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._delete_protection

    @delete_protection.setter
    def delete_protection(self, delete_protection):
        """Sets the delete_protection of this DynamicSecretCreateGitlab.

        Protection from accidental deletion of this object [true/false]  # noqa: E501

        :param delete_protection: The delete_protection of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._delete_protection = delete_protection

    @property
    def description(self):
        """Gets the description of this DynamicSecretCreateGitlab.  # noqa: E501

        Description of the object  # noqa: E501

        :return: The description of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DynamicSecretCreateGitlab.

        Description of the object  # noqa: E501

        :param description: The description of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def gitlab_access_token(self):
        """Gets the gitlab_access_token of this DynamicSecretCreateGitlab.  # noqa: E501

        Gitlab access token  # noqa: E501

        :return: The gitlab_access_token of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_access_token

    @gitlab_access_token.setter
    def gitlab_access_token(self, gitlab_access_token):
        """Sets the gitlab_access_token of this DynamicSecretCreateGitlab.

        Gitlab access token  # noqa: E501

        :param gitlab_access_token: The gitlab_access_token of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._gitlab_access_token = gitlab_access_token

    @property
    def gitlab_access_type(self):
        """Gets the gitlab_access_type of this DynamicSecretCreateGitlab.  # noqa: E501

        Gitlab access token type [project,group]  # noqa: E501

        :return: The gitlab_access_type of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_access_type

    @gitlab_access_type.setter
    def gitlab_access_type(self, gitlab_access_type):
        """Sets the gitlab_access_type of this DynamicSecretCreateGitlab.

        Gitlab access token type [project,group]  # noqa: E501

        :param gitlab_access_type: The gitlab_access_type of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gitlab_access_type is None:  # noqa: E501
            raise ValueError("Invalid value for `gitlab_access_type`, must not be `None`")  # noqa: E501

        self._gitlab_access_type = gitlab_access_type

    @property
    def gitlab_certificate(self):
        """Gets the gitlab_certificate of this DynamicSecretCreateGitlab.  # noqa: E501

        Gitlab tls certificate (base64 encoded)  # noqa: E501

        :return: The gitlab_certificate of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_certificate

    @gitlab_certificate.setter
    def gitlab_certificate(self, gitlab_certificate):
        """Sets the gitlab_certificate of this DynamicSecretCreateGitlab.

        Gitlab tls certificate (base64 encoded)  # noqa: E501

        :param gitlab_certificate: The gitlab_certificate of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._gitlab_certificate = gitlab_certificate

    @property
    def gitlab_role(self):
        """Gets the gitlab_role of this DynamicSecretCreateGitlab.  # noqa: E501

        Gitlab role  # noqa: E501

        :return: The gitlab_role of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_role

    @gitlab_role.setter
    def gitlab_role(self, gitlab_role):
        """Sets the gitlab_role of this DynamicSecretCreateGitlab.

        Gitlab role  # noqa: E501

        :param gitlab_role: The gitlab_role of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._gitlab_role = gitlab_role

    @property
    def gitlab_token_scopes(self):
        """Gets the gitlab_token_scopes of this DynamicSecretCreateGitlab.  # noqa: E501

        Comma-separated list of access token scopes to grant  # noqa: E501

        :return: The gitlab_token_scopes of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_token_scopes

    @gitlab_token_scopes.setter
    def gitlab_token_scopes(self, gitlab_token_scopes):
        """Sets the gitlab_token_scopes of this DynamicSecretCreateGitlab.

        Comma-separated list of access token scopes to grant  # noqa: E501

        :param gitlab_token_scopes: The gitlab_token_scopes of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gitlab_token_scopes is None:  # noqa: E501
            raise ValueError("Invalid value for `gitlab_token_scopes`, must not be `None`")  # noqa: E501

        self._gitlab_token_scopes = gitlab_token_scopes

    @property
    def gitlab_url(self):
        """Gets the gitlab_url of this DynamicSecretCreateGitlab.  # noqa: E501

        Gitlab base url  # noqa: E501

        :return: The gitlab_url of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._gitlab_url

    @gitlab_url.setter
    def gitlab_url(self, gitlab_url):
        """Sets the gitlab_url of this DynamicSecretCreateGitlab.

        Gitlab base url  # noqa: E501

        :param gitlab_url: The gitlab_url of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._gitlab_url = gitlab_url

    @property
    def group_name(self):
        """Gets the group_name of this DynamicSecretCreateGitlab.  # noqa: E501

        Gitlab group name, required for access-type=group  # noqa: E501

        :return: The group_name of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this DynamicSecretCreateGitlab.

        Gitlab group name, required for access-type=group  # noqa: E501

        :param group_name: The group_name of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def installation_organization(self):
        """Gets the installation_organization of this DynamicSecretCreateGitlab.  # noqa: E501

        Gitlab project name, required for access-type=project  # noqa: E501

        :return: The installation_organization of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._installation_organization

    @installation_organization.setter
    def installation_organization(self, installation_organization):
        """Sets the installation_organization of this DynamicSecretCreateGitlab.

        Gitlab project name, required for access-type=project  # noqa: E501

        :param installation_organization: The installation_organization of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._installation_organization = installation_organization

    @property
    def json(self):
        """Gets the json of this DynamicSecretCreateGitlab.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this DynamicSecretCreateGitlab.

        Set output format to JSON  # noqa: E501

        :param json: The json of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def name(self):
        """Gets the name of this DynamicSecretCreateGitlab.  # noqa: E501

        Dynamic secret name  # noqa: E501

        :return: The name of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DynamicSecretCreateGitlab.

        Dynamic secret name  # noqa: E501

        :param name: The name of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this DynamicSecretCreateGitlab.  # noqa: E501

        Add tags attached to this object  # noqa: E501

        :return: The tags of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DynamicSecretCreateGitlab.

        Add tags attached to this object  # noqa: E501

        :param tags: The tags of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def target_name(self):
        """Gets the target_name of this DynamicSecretCreateGitlab.  # noqa: E501

        Target name  # noqa: E501

        :return: The target_name of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this DynamicSecretCreateGitlab.

        Target name  # noqa: E501

        :param target_name: The target_name of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def token(self):
        """Gets the token of this DynamicSecretCreateGitlab.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this DynamicSecretCreateGitlab.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def ttl(self):
        """Gets the ttl of this DynamicSecretCreateGitlab.  # noqa: E501

        Access Token TTL  # noqa: E501

        :return: The ttl of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this DynamicSecretCreateGitlab.

        Access Token TTL  # noqa: E501

        :param ttl: The ttl of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._ttl = ttl

    @property
    def uid_token(self):
        """Gets the uid_token of this DynamicSecretCreateGitlab.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this DynamicSecretCreateGitlab.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this DynamicSecretCreateGitlab.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this DynamicSecretCreateGitlab.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DynamicSecretCreateGitlab):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DynamicSecretCreateGitlab):
            return True

        return self.to_dict() != other.to_dict()
