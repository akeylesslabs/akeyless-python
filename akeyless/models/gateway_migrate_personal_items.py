# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayMigratePersonalItems(BaseModel):
    """
    gatewayMigratePersonalItems is a command that migrate personal items from external vault
    """ # noqa: E501
    var_1password_email: Optional[StrictStr] = Field(default=None, description="1Password user email to connect to the API", alias="1password-email")
    var_1password_password: Optional[StrictStr] = Field(default=None, description="1Password user password to connect to the API", alias="1password-password")
    var_1password_secret_key: Optional[StrictStr] = Field(default=None, description="1Password user secret key to connect to the API", alias="1password-secret-key")
    var_1password_url: Optional[StrictStr] = Field(default=None, description="1Password api container url", alias="1password-url")
    var_1password_vaults: Optional[List[StrictStr]] = Field(default=None, description="1Password list of vault to get the items from", alias="1password-vaults")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    protection_key: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the secret value", alias="protection-key")
    target_location: Optional[StrictStr] = Field(default=None, description="Target location in your Akeyless personal folder for migrated secrets", alias="target-location")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    type: Optional[StrictStr] = Field(default='1password', description="Migration type for now only 1password.")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["1password-email", "1password-password", "1password-secret-key", "1password-url", "1password-vaults", "json", "protection-key", "target-location", "token", "type", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayMigratePersonalItems from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayMigratePersonalItems from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "1password-email": obj.get("1password-email"),
            "1password-password": obj.get("1password-password"),
            "1password-secret-key": obj.get("1password-secret-key"),
            "1password-url": obj.get("1password-url"),
            "1password-vaults": obj.get("1password-vaults"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "protection-key": obj.get("protection-key"),
            "target-location": obj.get("target-location"),
            "token": obj.get("token"),
            "type": obj.get("type") if obj.get("type") is not None else '1password',
            "uid-token": obj.get("uid-token")
        })
        return _obj


