# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SignPKICertWithClassicKey(BaseModel):
    """
    SignPKICertWithClassicKey
    """ # noqa: E501
    common_name: Optional[StrictStr] = Field(default=None, description="The common name to be included in the PKI certificate", alias="common-name")
    country: Optional[StrictStr] = Field(default=None, description="A comma-separated list of the country that will be set in the issued certificate")
    display_id: StrictStr = Field(description="The name of the key to use in the sign PKI Cert process", alias="display-id")
    dns_names: Optional[StrictStr] = Field(default=None, description="DNS Names to be included in the PKI certificate (in a comma-delimited list)", alias="dns-names")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    key_usage: Optional[StrictStr] = Field(default='DigitalSignature,KeyAgreement,KeyEncipherment', description="key-usage", alias="key-usage")
    locality: Optional[StrictStr] = Field(default=None, description="A comma-separated list of the locality that will be set in the issued certificate")
    organizational_units: Optional[StrictStr] = Field(default=None, description="A comma-separated list of organizational units (OU) that will be set in the issued certificate", alias="organizational-units")
    organizations: Optional[StrictStr] = Field(default=None, description="A comma-separated list of organizations (O) that will be set in the issued certificate")
    postal_code: Optional[StrictStr] = Field(default=None, description="A comma-separated list of the postal code that will be set in the issued certificate", alias="postal-code")
    province: Optional[StrictStr] = Field(default=None, description="A comma-separated list of the province that will be set in the issued certificate")
    public_key_pem_data: Optional[StrictStr] = Field(default=None, description="PublicKey using for signing in a PEM format.", alias="public-key-pem-data")
    signing_method: StrictStr = Field(description="SigningMethod", alias="signing-method")
    street_address: Optional[StrictStr] = Field(default=None, description="A comma-separated list of the street address that will be set in the issued certificate", alias="street-address")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    ttl: StrictInt = Field(description="he requested Time To Live for the certificate, in seconds")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    uri_sans: Optional[StrictStr] = Field(default=None, description="The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)", alias="uri-sans")
    version: StrictInt = Field(description="classic key version")
    __properties: ClassVar[List[str]] = ["common-name", "country", "display-id", "dns-names", "json", "key-usage", "locality", "organizational-units", "organizations", "postal-code", "province", "public-key-pem-data", "signing-method", "street-address", "token", "ttl", "uid-token", "uri-sans", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SignPKICertWithClassicKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SignPKICertWithClassicKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "common-name": obj.get("common-name"),
            "country": obj.get("country"),
            "display-id": obj.get("display-id"),
            "dns-names": obj.get("dns-names"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "key-usage": obj.get("key-usage") if obj.get("key-usage") is not None else 'DigitalSignature,KeyAgreement,KeyEncipherment',
            "locality": obj.get("locality"),
            "organizational-units": obj.get("organizational-units"),
            "organizations": obj.get("organizations"),
            "postal-code": obj.get("postal-code"),
            "province": obj.get("province"),
            "public-key-pem-data": obj.get("public-key-pem-data"),
            "signing-method": obj.get("signing-method"),
            "street-address": obj.get("street-address"),
            "token": obj.get("token"),
            "ttl": obj.get("ttl"),
            "uid-token": obj.get("uid-token"),
            "uri-sans": obj.get("uri-sans"),
            "version": obj.get("version")
        })
        return _obj


