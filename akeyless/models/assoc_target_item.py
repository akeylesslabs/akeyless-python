# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AssocTargetItem(BaseModel):
    """
    assocTargetItem is a command that creates an association between target and item.
    """ # noqa: E501
    certificate_path: Optional[StrictStr] = Field(default=None, description="A path on the target to store the certificate pem file (relevant only for certificate provisioning)", alias="certificate-path")
    chain_path: Optional[StrictStr] = Field(default=None, description="A path on the target to store the full chain pem file (relevant only for certificate provisioning)", alias="chain-path")
    disable_previous_key_version: Optional[StrictBool] = Field(default=False, description="Automatically disable previous key version (required for azure targets)", alias="disable-previous-key-version")
    external_key_name: Optional[StrictStr] = Field(default=None, description="The external key name to associate with the classic key (Relevant only for Classic Key AWS/Azure/GCP targets)", alias="external-key-name")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    key_operations: Optional[List[StrictStr]] = Field(default=None, description="A list of allowed operations for the key (required for azure targets)", alias="key-operations")
    keyring_name: Optional[StrictStr] = Field(default=None, description="Keyring name of the GCP KMS (required for gcp targets)", alias="keyring-name")
    kms_algorithm: Optional[StrictStr] = Field(default=None, description="Algorithm of the key in GCP KMS (required for gcp targets)", alias="kms-algorithm")
    location_id: Optional[StrictStr] = Field(default=None, description="Location id of the GCP KMS (required for gcp targets)", alias="location-id")
    multi_region: Optional[StrictStr] = Field(default='false', description="Set to 'true' to create a multi-region managed key. (Relevant only for Classic Key AWS targets)", alias="multi-region")
    name: StrictStr = Field(description="The item to associate")
    post_provision_command: Optional[StrictStr] = Field(default=None, description="A custom command to run on the remote target after successful provisioning (relevant only for certificate provisioning)", alias="post-provision-command")
    private_key_path: Optional[StrictStr] = Field(default=None, description="A path on the target to store the private key (relevant only for certificate provisioning)", alias="private-key-path")
    project_id: Optional[StrictStr] = Field(default=None, description="Project id of the GCP KMS (required for gcp targets)", alias="project-id")
    protection_level: Optional[StrictStr] = Field(default='software', description="Protection level of the key [software/hardware] (relevant for gcp targets)", alias="protection-level")
    purpose: Optional[StrictStr] = Field(default=None, description="Purpose of the key in GCP KMS (required for gcp targets)")
    regions: Optional[List[StrictStr]] = Field(default=None, description="The list of regions to create a copy of the key in (relevant for aws targets)")
    sra_association: Optional[StrictBool] = Field(default=False, description="Is the target to associate is for sra, relevant only for linked target association for ldap rotated secret", alias="sra-association")
    target_name: StrictStr = Field(description="The target to associate", alias="target-name")
    tenant_secret_type: Optional[StrictStr] = Field(default=None, description="The tenant secret type [Data/SearchIndex/Analytics] (required for salesforce targets)", alias="tenant-secret-type")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    vault_name: Optional[StrictStr] = Field(default=None, description="Name of the vault used (required for azure targets)", alias="vault-name")
    __properties: ClassVar[List[str]] = ["certificate-path", "chain-path", "disable-previous-key-version", "external-key-name", "json", "key-operations", "keyring-name", "kms-algorithm", "location-id", "multi-region", "name", "post-provision-command", "private-key-path", "project-id", "protection-level", "purpose", "regions", "sra-association", "target-name", "tenant-secret-type", "token", "uid-token", "vault-name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssocTargetItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssocTargetItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificate-path": obj.get("certificate-path"),
            "chain-path": obj.get("chain-path"),
            "disable-previous-key-version": obj.get("disable-previous-key-version") if obj.get("disable-previous-key-version") is not None else False,
            "external-key-name": obj.get("external-key-name"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "key-operations": obj.get("key-operations"),
            "keyring-name": obj.get("keyring-name"),
            "kms-algorithm": obj.get("kms-algorithm"),
            "location-id": obj.get("location-id"),
            "multi-region": obj.get("multi-region") if obj.get("multi-region") is not None else 'false',
            "name": obj.get("name"),
            "post-provision-command": obj.get("post-provision-command"),
            "private-key-path": obj.get("private-key-path"),
            "project-id": obj.get("project-id"),
            "protection-level": obj.get("protection-level") if obj.get("protection-level") is not None else 'software',
            "purpose": obj.get("purpose"),
            "regions": obj.get("regions"),
            "sra-association": obj.get("sra-association") if obj.get("sra-association") is not None else False,
            "target-name": obj.get("target-name"),
            "tenant-secret-type": obj.get("tenant-secret-type"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "vault-name": obj.get("vault-name")
        })
        return _obj


