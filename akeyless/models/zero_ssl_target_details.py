# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class ZeroSSLTargetDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_key': 'str',
        'imap_fqdn': 'str',
        'imap_password': 'str',
        'imap_port': 'str',
        'imap_user': 'str',
        'timeout': 'int',
        'validation_email': 'str'
    }

    attribute_map = {
        'api_key': 'api_key',
        'imap_fqdn': 'imap_fqdn',
        'imap_password': 'imap_password',
        'imap_port': 'imap_port',
        'imap_user': 'imap_user',
        'timeout': 'timeout',
        'validation_email': 'validation_email'
    }

    def __init__(self, api_key=None, imap_fqdn=None, imap_password=None, imap_port=None, imap_user=None, timeout=None, validation_email=None, local_vars_configuration=None):  # noqa: E501
        """ZeroSSLTargetDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_key = None
        self._imap_fqdn = None
        self._imap_password = None
        self._imap_port = None
        self._imap_user = None
        self._timeout = None
        self._validation_email = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if imap_fqdn is not None:
            self.imap_fqdn = imap_fqdn
        if imap_password is not None:
            self.imap_password = imap_password
        if imap_port is not None:
            self.imap_port = imap_port
        if imap_user is not None:
            self.imap_user = imap_user
        if timeout is not None:
            self.timeout = timeout
        if validation_email is not None:
            self.validation_email = validation_email

    @property
    def api_key(self):
        """Gets the api_key of this ZeroSSLTargetDetails.  # noqa: E501


        :return: The api_key of this ZeroSSLTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ZeroSSLTargetDetails.


        :param api_key: The api_key of this ZeroSSLTargetDetails.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def imap_fqdn(self):
        """Gets the imap_fqdn of this ZeroSSLTargetDetails.  # noqa: E501


        :return: The imap_fqdn of this ZeroSSLTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._imap_fqdn

    @imap_fqdn.setter
    def imap_fqdn(self, imap_fqdn):
        """Sets the imap_fqdn of this ZeroSSLTargetDetails.


        :param imap_fqdn: The imap_fqdn of this ZeroSSLTargetDetails.  # noqa: E501
        :type: str
        """

        self._imap_fqdn = imap_fqdn

    @property
    def imap_password(self):
        """Gets the imap_password of this ZeroSSLTargetDetails.  # noqa: E501


        :return: The imap_password of this ZeroSSLTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._imap_password

    @imap_password.setter
    def imap_password(self, imap_password):
        """Sets the imap_password of this ZeroSSLTargetDetails.


        :param imap_password: The imap_password of this ZeroSSLTargetDetails.  # noqa: E501
        :type: str
        """

        self._imap_password = imap_password

    @property
    def imap_port(self):
        """Gets the imap_port of this ZeroSSLTargetDetails.  # noqa: E501


        :return: The imap_port of this ZeroSSLTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._imap_port

    @imap_port.setter
    def imap_port(self, imap_port):
        """Sets the imap_port of this ZeroSSLTargetDetails.


        :param imap_port: The imap_port of this ZeroSSLTargetDetails.  # noqa: E501
        :type: str
        """

        self._imap_port = imap_port

    @property
    def imap_user(self):
        """Gets the imap_user of this ZeroSSLTargetDetails.  # noqa: E501


        :return: The imap_user of this ZeroSSLTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._imap_user

    @imap_user.setter
    def imap_user(self, imap_user):
        """Sets the imap_user of this ZeroSSLTargetDetails.


        :param imap_user: The imap_user of this ZeroSSLTargetDetails.  # noqa: E501
        :type: str
        """

        self._imap_user = imap_user

    @property
    def timeout(self):
        """Gets the timeout of this ZeroSSLTargetDetails.  # noqa: E501

        A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.  # noqa: E501

        :return: The timeout of this ZeroSSLTargetDetails.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this ZeroSSLTargetDetails.

        A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.  # noqa: E501

        :param timeout: The timeout of this ZeroSSLTargetDetails.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def validation_email(self):
        """Gets the validation_email of this ZeroSSLTargetDetails.  # noqa: E501


        :return: The validation_email of this ZeroSSLTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._validation_email

    @validation_email.setter
    def validation_email(self, validation_email):
        """Sets the validation_email of this ZeroSSLTargetDetails.


        :param validation_email: The validation_email of this ZeroSSLTargetDetails.  # noqa: E501
        :type: str
        """

        self._validation_email = validation_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ZeroSSLTargetDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ZeroSSLTargetDetails):
            return True

        return self.to_dict() != other.to_dict()
