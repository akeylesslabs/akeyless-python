# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class UIdentityConfigPart(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid_access_id': 'str',
        'uid_enable': 'bool',
        'uid_rotate_interval': 'str',
        'uid_status': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'uid_access_id': 'uid_access_id',
        'uid_enable': 'uid_enable',
        'uid_rotate_interval': 'uid_rotate_interval',
        'uid_status': 'uid_status',
        'uid_token': 'uid_token'
    }

    def __init__(self, uid_access_id=None, uid_enable=None, uid_rotate_interval=None, uid_status=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """UIdentityConfigPart - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._uid_access_id = None
        self._uid_enable = None
        self._uid_rotate_interval = None
        self._uid_status = None
        self._uid_token = None
        self.discriminator = None

        if uid_access_id is not None:
            self.uid_access_id = uid_access_id
        if uid_enable is not None:
            self.uid_enable = uid_enable
        if uid_rotate_interval is not None:
            self.uid_rotate_interval = uid_rotate_interval
        if uid_status is not None:
            self.uid_status = uid_status
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def uid_access_id(self):
        """Gets the uid_access_id of this UIdentityConfigPart.  # noqa: E501


        :return: The uid_access_id of this UIdentityConfigPart.  # noqa: E501
        :rtype: str
        """
        return self._uid_access_id

    @uid_access_id.setter
    def uid_access_id(self, uid_access_id):
        """Sets the uid_access_id of this UIdentityConfigPart.


        :param uid_access_id: The uid_access_id of this UIdentityConfigPart.  # noqa: E501
        :type: str
        """

        self._uid_access_id = uid_access_id

    @property
    def uid_enable(self):
        """Gets the uid_enable of this UIdentityConfigPart.  # noqa: E501


        :return: The uid_enable of this UIdentityConfigPart.  # noqa: E501
        :rtype: bool
        """
        return self._uid_enable

    @uid_enable.setter
    def uid_enable(self, uid_enable):
        """Sets the uid_enable of this UIdentityConfigPart.


        :param uid_enable: The uid_enable of this UIdentityConfigPart.  # noqa: E501
        :type: bool
        """

        self._uid_enable = uid_enable

    @property
    def uid_rotate_interval(self):
        """Gets the uid_rotate_interval of this UIdentityConfigPart.  # noqa: E501


        :return: The uid_rotate_interval of this UIdentityConfigPart.  # noqa: E501
        :rtype: str
        """
        return self._uid_rotate_interval

    @uid_rotate_interval.setter
    def uid_rotate_interval(self, uid_rotate_interval):
        """Sets the uid_rotate_interval of this UIdentityConfigPart.


        :param uid_rotate_interval: The uid_rotate_interval of this UIdentityConfigPart.  # noqa: E501
        :type: str
        """

        self._uid_rotate_interval = uid_rotate_interval

    @property
    def uid_status(self):
        """Gets the uid_status of this UIdentityConfigPart.  # noqa: E501


        :return: The uid_status of this UIdentityConfigPart.  # noqa: E501
        :rtype: str
        """
        return self._uid_status

    @uid_status.setter
    def uid_status(self, uid_status):
        """Sets the uid_status of this UIdentityConfigPart.


        :param uid_status: The uid_status of this UIdentityConfigPart.  # noqa: E501
        :type: str
        """

        self._uid_status = uid_status

    @property
    def uid_token(self):
        """Gets the uid_token of this UIdentityConfigPart.  # noqa: E501


        :return: The uid_token of this UIdentityConfigPart.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this UIdentityConfigPart.


        :param uid_token: The uid_token of this UIdentityConfigPart.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UIdentityConfigPart):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UIdentityConfigPart):
            return True

        return self.to_dict() != other.to_dict()
