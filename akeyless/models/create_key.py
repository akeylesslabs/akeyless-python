# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateKey(BaseModel):
    """
    createKey is a command that creates a new key. [Deprecated: Use command create-dfc-key]
    """ # noqa: E501
    alg: StrictStr = Field(description="Key type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, AES128CBC, AES256CBC, RSA1024, RSA2048, RSA3072, RSA4096]")
    certificate_common_name: Optional[StrictStr] = Field(default=None, description="Common name for the generated certificate. Relevant only for generate-self-signed-certificate.", alias="certificate-common-name")
    certificate_country: Optional[StrictStr] = Field(default=None, description="Country name for the generated certificate. Relevant only for generate-self-signed-certificate.", alias="certificate-country")
    certificate_digest_algo: Optional[StrictStr] = Field(default=None, description="Digest algorithm to be used for the certificate key signing. Currently, we support only \"sha256\" so we hide this option for CLI.", alias="certificate-digest-algo")
    certificate_locality: Optional[StrictStr] = Field(default=None, description="Locality for the generated certificate. Relevant only for generate-self-signed-certificate.", alias="certificate-locality")
    certificate_organization: Optional[StrictStr] = Field(default=None, description="Organization name for the generated certificate. Relevant only for generate-self-signed-certificate.", alias="certificate-organization")
    certificate_province: Optional[StrictStr] = Field(default=None, description="Province name for the generated certificate. Relevant only for generate-self-signed-certificate.", alias="certificate-province")
    certificate_ttl: Optional[StrictInt] = Field(default=None, description="TTL in days for the generated certificate. Required only for generate-self-signed-certificate.", alias="certificate-ttl")
    conf_file_data: Optional[StrictStr] = Field(default=None, description="The csr config data in base64 encoding", alias="conf-file-data")
    customer_frg_id: Optional[StrictStr] = Field(default=None, description="The customer fragment ID that will be used to create the key (if empty, the key will be created independently of a customer fragment)", alias="customer-frg-id")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    generate_self_signed_certificate: Optional[StrictBool] = Field(default=None, description="Whether to generate a self signed certificate with the key. If set, --certificate-ttl must be provided.", alias="generate-self-signed-certificate")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    metadata: Optional[StrictStr] = Field(default=None, description="Deprecated - use description")
    name: StrictStr = Field(description="Key name")
    split_level: Optional[StrictInt] = Field(default=3, description="The number of fragments that the item will be split into (not includes customer fragment)", alias="split-level")
    tag: Optional[List[StrictStr]] = Field(default=None, description="List of the tags attached to this key")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["alg", "certificate-common-name", "certificate-country", "certificate-digest-algo", "certificate-locality", "certificate-organization", "certificate-province", "certificate-ttl", "conf-file-data", "customer-frg-id", "delete_protection", "description", "generate-self-signed-certificate", "json", "metadata", "name", "split-level", "tag", "token", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alg": obj.get("alg"),
            "certificate-common-name": obj.get("certificate-common-name"),
            "certificate-country": obj.get("certificate-country"),
            "certificate-digest-algo": obj.get("certificate-digest-algo"),
            "certificate-locality": obj.get("certificate-locality"),
            "certificate-organization": obj.get("certificate-organization"),
            "certificate-province": obj.get("certificate-province"),
            "certificate-ttl": obj.get("certificate-ttl"),
            "conf-file-data": obj.get("conf-file-data"),
            "customer-frg-id": obj.get("customer-frg-id"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "generate-self-signed-certificate": obj.get("generate-self-signed-certificate"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "split-level": obj.get("split-level") if obj.get("split-level") is not None else 3,
            "tag": obj.get("tag"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


