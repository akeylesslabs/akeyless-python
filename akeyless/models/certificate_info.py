# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.extension import Extension
from akeyless.models.name import Name
from typing import Optional, Set
from typing_extensions import Self

class CertificateInfo(BaseModel):
    """
    CertificateInfo
    """ # noqa: E501
    ext_key_usage: Optional[List[StrictInt]] = Field(default=None, alias="ExtKeyUsage")
    key_usage: Optional[StrictInt] = Field(default=None, description="KeyUsage represents the set of actions that are valid for a given key. It's a bitmap of the KeyUsage* constants.", alias="KeyUsage")
    crl_distribution_points: Optional[List[StrictStr]] = None
    dns_names: Optional[List[StrictStr]] = None
    email_addresses: Optional[List[StrictStr]] = None
    extensions: Optional[List[Extension]] = None
    ip_addresses: Optional[List[StrictStr]] = None
    is_ca: Optional[StrictBool] = None
    issuer: Optional[Name] = None
    issuing_certificate_url: Optional[List[StrictStr]] = None
    key_size: Optional[StrictInt] = None
    not_after: Optional[datetime] = None
    not_before: Optional[datetime] = None
    ocsp_server: Optional[List[StrictStr]] = None
    public_key_algorithm_name: Optional[StrictStr] = None
    serial_number: Optional[StrictStr] = None
    sha_1_fingerprint: Optional[StrictStr] = None
    sha_256_fingerprint: Optional[StrictStr] = None
    signature: Optional[StrictStr] = None
    signature_algorithm_name: Optional[StrictStr] = None
    subject: Optional[Name] = None
    subject_public_key: Optional[StrictStr] = None
    uris: Optional[List[StrictStr]] = None
    version: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["ExtKeyUsage", "KeyUsage", "crl_distribution_points", "dns_names", "email_addresses", "extensions", "ip_addresses", "is_ca", "issuer", "issuing_certificate_url", "key_size", "not_after", "not_before", "ocsp_server", "public_key_algorithm_name", "serial_number", "sha_1_fingerprint", "sha_256_fingerprint", "signature", "signature_algorithm_name", "subject", "subject_public_key", "uris", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in extensions (list)
        _items = []
        if self.extensions:
            for _item_extensions in self.extensions:
                if _item_extensions:
                    _items.append(_item_extensions.to_dict())
            _dict['extensions'] = _items
        # override the default output from pydantic by calling `to_dict()` of issuer
        if self.issuer:
            _dict['issuer'] = self.issuer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['subject'] = self.subject.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ExtKeyUsage": obj.get("ExtKeyUsage"),
            "KeyUsage": obj.get("KeyUsage"),
            "crl_distribution_points": obj.get("crl_distribution_points"),
            "dns_names": obj.get("dns_names"),
            "email_addresses": obj.get("email_addresses"),
            "extensions": [Extension.from_dict(_item) for _item in obj["extensions"]] if obj.get("extensions") is not None else None,
            "ip_addresses": obj.get("ip_addresses"),
            "is_ca": obj.get("is_ca"),
            "issuer": Name.from_dict(obj["issuer"]) if obj.get("issuer") is not None else None,
            "issuing_certificate_url": obj.get("issuing_certificate_url"),
            "key_size": obj.get("key_size"),
            "not_after": obj.get("not_after"),
            "not_before": obj.get("not_before"),
            "ocsp_server": obj.get("ocsp_server"),
            "public_key_algorithm_name": obj.get("public_key_algorithm_name"),
            "serial_number": obj.get("serial_number"),
            "sha_1_fingerprint": obj.get("sha_1_fingerprint"),
            "sha_256_fingerprint": obj.get("sha_256_fingerprint"),
            "signature": obj.get("signature"),
            "signature_algorithm_name": obj.get("signature_algorithm_name"),
            "subject": Name.from_dict(obj["subject"]) if obj.get("subject") is not None else None,
            "subject_public_key": obj.get("subject_public_key"),
            "uris": obj.get("uris"),
            "version": obj.get("version")
        })
        return _obj


