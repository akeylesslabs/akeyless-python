# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GCPAccessRules(BaseModel):
    """
    GCPAccessRules
    """ # noqa: E501
    audience: Optional[StrictStr] = Field(default='akeyless.io', description="The audience in the JWT")
    bound_labels: Optional[Dict[str, StrictStr]] = Field(default=None, description="A map of GCP labels formatted as \"key:value\" strings that must be set on authorized GCE instances. TODO: Because GCP labels are not currently ACL'd ....")
    bound_projects: Optional[List[StrictStr]] = Field(default=None, description="Human and Machine authentication section Array of GCP project IDs. Only entities belonging to any of the provided projects can authenticate.")
    bound_regions: Optional[List[StrictStr]] = Field(default=None, description="List of regions that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a regional group and the group must belong to this region. If bound_zones are provided, this attribute is ignored.")
    bound_service_accounts: Optional[List[StrictStr]] = Field(default=None, description="List of service accounts the service account must be part of in order to be authenticated")
    bound_zones: Optional[List[StrictStr]] = Field(default=None, description="=== Machine authentication section === List of zones that a GCE instance must belong to in order to be authenticated. TODO: If bound_instance_groups is provided, it is assumed to be a zonal group and the group must belong to this zone.")
    service_account: Optional[StrictStr] = Field(default=None, description="ServiceAccount holds the credentials file contents to be used by Akeyless to validate IAM (Human) and GCE (Machine) logins against GCP base64 encoded string")
    type: Optional[StrictStr] = None
    unique_identifier: Optional[StrictStr] = Field(default=None, description="A unique identifier to distinguish different users")
    __properties: ClassVar[List[str]] = ["audience", "bound_labels", "bound_projects", "bound_regions", "bound_service_accounts", "bound_zones", "service_account", "type", "unique_identifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GCPAccessRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GCPAccessRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audience": obj.get("audience") if obj.get("audience") is not None else 'akeyless.io',
            "bound_labels": obj.get("bound_labels"),
            "bound_projects": obj.get("bound_projects"),
            "bound_regions": obj.get("bound_regions"),
            "bound_service_accounts": obj.get("bound_service_accounts"),
            "bound_zones": obj.get("bound_zones"),
            "service_account": obj.get("service_account"),
            "type": obj.get("type"),
            "unique_identifier": obj.get("unique_identifier")
        })
        return _obj


