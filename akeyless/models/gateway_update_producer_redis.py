# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GatewayUpdateProducerRedis(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'acl_rules': 'str',
        'delete_protection': 'str',
        'host': 'str',
        'json': 'bool',
        'name': 'str',
        'new_name': 'str',
        'password': 'str',
        'port': 'str',
        'producer_encryption_key_name': 'str',
        'ssl': 'bool',
        'ssl_certificate': 'str',
        'tags': 'list[str]',
        'target_name': 'str',
        'token': 'str',
        'uid_token': 'str',
        'user_ttl': 'str',
        'username': 'str'
    }

    attribute_map = {
        'acl_rules': 'acl-rules',
        'delete_protection': 'delete_protection',
        'host': 'host',
        'json': 'json',
        'name': 'name',
        'new_name': 'new-name',
        'password': 'password',
        'port': 'port',
        'producer_encryption_key_name': 'producer-encryption-key-name',
        'ssl': 'ssl',
        'ssl_certificate': 'ssl-certificate',
        'tags': 'tags',
        'target_name': 'target-name',
        'token': 'token',
        'uid_token': 'uid-token',
        'user_ttl': 'user-ttl',
        'username': 'username'
    }

    def __init__(self, acl_rules=None, delete_protection=None, host='127.0.0.1', json=False, name=None, new_name=None, password=None, port='6379', producer_encryption_key_name=None, ssl=False, ssl_certificate=None, tags=None, target_name=None, token=None, uid_token=None, user_ttl='60m', username=None, local_vars_configuration=None):  # noqa: E501
        """GatewayUpdateProducerRedis - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._acl_rules = None
        self._delete_protection = None
        self._host = None
        self._json = None
        self._name = None
        self._new_name = None
        self._password = None
        self._port = None
        self._producer_encryption_key_name = None
        self._ssl = None
        self._ssl_certificate = None
        self._tags = None
        self._target_name = None
        self._token = None
        self._uid_token = None
        self._user_ttl = None
        self._username = None
        self.discriminator = None

        if acl_rules is not None:
            self.acl_rules = acl_rules
        if delete_protection is not None:
            self.delete_protection = delete_protection
        if host is not None:
            self.host = host
        if json is not None:
            self.json = json
        self.name = name
        if new_name is not None:
            self.new_name = new_name
        if password is not None:
            self.password = password
        if port is not None:
            self.port = port
        if producer_encryption_key_name is not None:
            self.producer_encryption_key_name = producer_encryption_key_name
        if ssl is not None:
            self.ssl = ssl
        if ssl_certificate is not None:
            self.ssl_certificate = ssl_certificate
        if tags is not None:
            self.tags = tags
        if target_name is not None:
            self.target_name = target_name
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token
        if user_ttl is not None:
            self.user_ttl = user_ttl
        if username is not None:
            self.username = username

    @property
    def acl_rules(self):
        """Gets the acl_rules of this GatewayUpdateProducerRedis.  # noqa: E501

        A JSON array list of redis ACL rules to attach to the created user. For available rules see the ACL CAT command https://redis.io/commands/acl-cat By default the user will have permissions to read all keys '[\"~*\", \"+@read\"]'  # noqa: E501

        :return: The acl_rules of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._acl_rules

    @acl_rules.setter
    def acl_rules(self, acl_rules):
        """Sets the acl_rules of this GatewayUpdateProducerRedis.

        A JSON array list of redis ACL rules to attach to the created user. For available rules see the ACL CAT command https://redis.io/commands/acl-cat By default the user will have permissions to read all keys '[\"~*\", \"+@read\"]'  # noqa: E501

        :param acl_rules: The acl_rules of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._acl_rules = acl_rules

    @property
    def delete_protection(self):
        """Gets the delete_protection of this GatewayUpdateProducerRedis.  # noqa: E501

        Protection from accidental deletion of this item [true/false]  # noqa: E501

        :return: The delete_protection of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._delete_protection

    @delete_protection.setter
    def delete_protection(self, delete_protection):
        """Sets the delete_protection of this GatewayUpdateProducerRedis.

        Protection from accidental deletion of this item [true/false]  # noqa: E501

        :param delete_protection: The delete_protection of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._delete_protection = delete_protection

    @property
    def host(self):
        """Gets the host of this GatewayUpdateProducerRedis.  # noqa: E501

        Redis Host  # noqa: E501

        :return: The host of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this GatewayUpdateProducerRedis.

        Redis Host  # noqa: E501

        :param host: The host of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def json(self):
        """Gets the json of this GatewayUpdateProducerRedis.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this GatewayUpdateProducerRedis.

        Set output format to JSON  # noqa: E501

        :param json: The json of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def name(self):
        """Gets the name of this GatewayUpdateProducerRedis.  # noqa: E501

        Producer name  # noqa: E501

        :return: The name of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GatewayUpdateProducerRedis.

        Producer name  # noqa: E501

        :param name: The name of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def new_name(self):
        """Gets the new_name of this GatewayUpdateProducerRedis.  # noqa: E501

        Producer name  # noqa: E501

        :return: The new_name of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._new_name

    @new_name.setter
    def new_name(self, new_name):
        """Sets the new_name of this GatewayUpdateProducerRedis.

        Producer name  # noqa: E501

        :param new_name: The new_name of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._new_name = new_name

    @property
    def password(self):
        """Gets the password of this GatewayUpdateProducerRedis.  # noqa: E501

        Redis Password  # noqa: E501

        :return: The password of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this GatewayUpdateProducerRedis.

        Redis Password  # noqa: E501

        :param password: The password of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def port(self):
        """Gets the port of this GatewayUpdateProducerRedis.  # noqa: E501

        Redis Port  # noqa: E501

        :return: The port of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this GatewayUpdateProducerRedis.

        Redis Port  # noqa: E501

        :param port: The port of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def producer_encryption_key_name(self):
        """Gets the producer_encryption_key_name of this GatewayUpdateProducerRedis.  # noqa: E501

        Dynamic producer encryption key  # noqa: E501

        :return: The producer_encryption_key_name of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._producer_encryption_key_name

    @producer_encryption_key_name.setter
    def producer_encryption_key_name(self, producer_encryption_key_name):
        """Sets the producer_encryption_key_name of this GatewayUpdateProducerRedis.

        Dynamic producer encryption key  # noqa: E501

        :param producer_encryption_key_name: The producer_encryption_key_name of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._producer_encryption_key_name = producer_encryption_key_name

    @property
    def ssl(self):
        """Gets the ssl of this GatewayUpdateProducerRedis.  # noqa: E501

        Enable/Disable SSL [true/false]  # noqa: E501

        :return: The ssl of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: bool
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this GatewayUpdateProducerRedis.

        Enable/Disable SSL [true/false]  # noqa: E501

        :param ssl: The ssl of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: bool
        """

        self._ssl = ssl

    @property
    def ssl_certificate(self):
        """Gets the ssl_certificate of this GatewayUpdateProducerRedis.  # noqa: E501

        SSL CA certificate in base64 encoding generated from a trusted Certificate Authority (CA)  # noqa: E501

        :return: The ssl_certificate of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._ssl_certificate

    @ssl_certificate.setter
    def ssl_certificate(self, ssl_certificate):
        """Sets the ssl_certificate of this GatewayUpdateProducerRedis.

        SSL CA certificate in base64 encoding generated from a trusted Certificate Authority (CA)  # noqa: E501

        :param ssl_certificate: The ssl_certificate of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._ssl_certificate = ssl_certificate

    @property
    def tags(self):
        """Gets the tags of this GatewayUpdateProducerRedis.  # noqa: E501

        Add tags attached to this object  # noqa: E501

        :return: The tags of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this GatewayUpdateProducerRedis.

        Add tags attached to this object  # noqa: E501

        :param tags: The tags of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def target_name(self):
        """Gets the target_name of this GatewayUpdateProducerRedis.  # noqa: E501

        Target name  # noqa: E501

        :return: The target_name of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this GatewayUpdateProducerRedis.

        Target name  # noqa: E501

        :param target_name: The target_name of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def token(self):
        """Gets the token of this GatewayUpdateProducerRedis.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GatewayUpdateProducerRedis.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this GatewayUpdateProducerRedis.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this GatewayUpdateProducerRedis.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    @property
    def user_ttl(self):
        """Gets the user_ttl of this GatewayUpdateProducerRedis.  # noqa: E501

        User TTL  # noqa: E501

        :return: The user_ttl of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._user_ttl

    @user_ttl.setter
    def user_ttl(self, user_ttl):
        """Sets the user_ttl of this GatewayUpdateProducerRedis.

        User TTL  # noqa: E501

        :param user_ttl: The user_ttl of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._user_ttl = user_ttl

    @property
    def username(self):
        """Gets the username of this GatewayUpdateProducerRedis.  # noqa: E501

        Redis Username  # noqa: E501

        :return: The username of this GatewayUpdateProducerRedis.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this GatewayUpdateProducerRedis.

        Redis Username  # noqa: E501

        :param username: The username of this GatewayUpdateProducerRedis.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GatewayUpdateProducerRedis):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GatewayUpdateProducerRedis):
            return True

        return self.to_dict() != other.to_dict()
