# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.classic_key_target_info import ClassicKeyTargetInfo
from typing import Optional, Set
from typing_extensions import Self

class ClassicKeyDetailsInfo(BaseModel):
    """
    ClassicKeyDetailsInfo
    """ # noqa: E501
    classic_key_attributes: Optional[Dict[str, List[StrictStr]]] = None
    classic_key_id: Optional[StrictStr] = None
    credential_id: Optional[StrictStr] = None
    gw_cluster_id: Optional[StrictInt] = None
    has_certificate: Optional[StrictBool] = None
    is_provided_by_user: Optional[StrictBool] = None
    is_unexportable: Optional[StrictBool] = None
    key_state: Optional[StrictStr] = Field(default=None, description="ItemState defines the different states an Item can be in")
    key_type: Optional[StrictStr] = None
    last_error: Optional[StrictStr] = None
    public_key: Optional[StrictStr] = None
    target_alias_helper: Optional[StrictStr] = None
    target_types: Optional[List[StrictStr]] = None
    targets: Optional[List[ClassicKeyTargetInfo]] = None
    username: Optional[StrictStr] = None
    websites: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["classic_key_attributes", "classic_key_id", "credential_id", "gw_cluster_id", "has_certificate", "is_provided_by_user", "is_unexportable", "key_state", "key_type", "last_error", "public_key", "target_alias_helper", "target_types", "targets", "username", "websites"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ClassicKeyDetailsInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        _items = []
        if self.targets:
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict['targets'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ClassicKeyDetailsInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "classic_key_attributes": obj.get("classic_key_attributes"),
            "classic_key_id": obj.get("classic_key_id"),
            "credential_id": obj.get("credential_id"),
            "gw_cluster_id": obj.get("gw_cluster_id"),
            "has_certificate": obj.get("has_certificate"),
            "is_provided_by_user": obj.get("is_provided_by_user"),
            "is_unexportable": obj.get("is_unexportable"),
            "key_state": obj.get("key_state"),
            "key_type": obj.get("key_type"),
            "last_error": obj.get("last_error"),
            "public_key": obj.get("public_key"),
            "target_alias_helper": obj.get("target_alias_helper"),
            "target_types": obj.get("target_types"),
            "targets": [ClassicKeyTargetInfo.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None,
            "username": obj.get("username"),
            "websites": obj.get("websites")
        })
        return _obj


