# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayUpdateRemoteAccess(BaseModel):
    """
    gatewayUpdateRemoteAccess is a command that update remote access config
    """ # noqa: E501
    allowed_urls: Optional[StrictStr] = Field(default='use-existing', description="List of valid URLs to redirect from the Portal back to the remote access server (in a comma-delimited list)", alias="allowed-urls")
    hide_session_recording: Optional[StrictStr] = Field(default=None, description="Specifies whether to show/hide if the session is currently recorded [true/false]", alias="hide-session-recording")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    kexalgs: Optional[StrictStr] = Field(default='use-existing', description="Decide which algorithm will be used as part of the SSH initial hand-shake process")
    keyboard_layout: Optional[StrictStr] = Field(default='use-existing', description="Enable support for additional keyboard layouts", alias="keyboard-layout")
    legacy_ssh_algorithm: Optional[StrictStr] = Field(default=None, description="Signs SSH certificates using legacy ssh-rsa-cert-01@openssh.com signing algorithm [true/false]", alias="legacy-ssh-algorithm")
    rdp_target_configuration: Optional[StrictStr] = Field(default='use-existing', description="Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email", alias="rdp-target-configuration")
    ssh_target_configuration: Optional[StrictStr] = Field(default='use-existing', description="Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email", alias="ssh-target-configuration")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["allowed-urls", "hide-session-recording", "json", "kexalgs", "keyboard-layout", "legacy-ssh-algorithm", "rdp-target-configuration", "ssh-target-configuration", "token", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayUpdateRemoteAccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayUpdateRemoteAccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed-urls": obj.get("allowed-urls") if obj.get("allowed-urls") is not None else 'use-existing',
            "hide-session-recording": obj.get("hide-session-recording"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "kexalgs": obj.get("kexalgs") if obj.get("kexalgs") is not None else 'use-existing',
            "keyboard-layout": obj.get("keyboard-layout") if obj.get("keyboard-layout") is not None else 'use-existing',
            "legacy-ssh-algorithm": obj.get("legacy-ssh-algorithm"),
            "rdp-target-configuration": obj.get("rdp-target-configuration") if obj.get("rdp-target-configuration") is not None else 'use-existing',
            "ssh-target-configuration": obj.get("ssh-target-configuration") if obj.get("ssh-target-configuration") is not None else 'use-existing',
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


