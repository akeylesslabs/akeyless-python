# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GatewayUpdateRemoteAccess(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed_urls': 'str',
        'hide_session_recording': 'str',
        'json': 'bool',
        'kexalgs': 'str',
        'keyboard_layout': 'str',
        'legacy_ssh_algorithm': 'str',
        'rdp_target_configuration': 'str',
        'ssh_target_configuration': 'str',
        'token': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'allowed_urls': 'allowed-urls',
        'hide_session_recording': 'hide-session-recording',
        'json': 'json',
        'kexalgs': 'kexalgs',
        'keyboard_layout': 'keyboard-layout',
        'legacy_ssh_algorithm': 'legacy-ssh-algorithm',
        'rdp_target_configuration': 'rdp-target-configuration',
        'ssh_target_configuration': 'ssh-target-configuration',
        'token': 'token',
        'uid_token': 'uid-token'
    }

    def __init__(self, allowed_urls='use-existing', hide_session_recording=None, json=False, kexalgs='use-existing', keyboard_layout='use-existing', legacy_ssh_algorithm=None, rdp_target_configuration='use-existing', ssh_target_configuration='use-existing', token=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """GatewayUpdateRemoteAccess - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allowed_urls = None
        self._hide_session_recording = None
        self._json = None
        self._kexalgs = None
        self._keyboard_layout = None
        self._legacy_ssh_algorithm = None
        self._rdp_target_configuration = None
        self._ssh_target_configuration = None
        self._token = None
        self._uid_token = None
        self.discriminator = None

        if allowed_urls is not None:
            self.allowed_urls = allowed_urls
        if hide_session_recording is not None:
            self.hide_session_recording = hide_session_recording
        if json is not None:
            self.json = json
        if kexalgs is not None:
            self.kexalgs = kexalgs
        if keyboard_layout is not None:
            self.keyboard_layout = keyboard_layout
        if legacy_ssh_algorithm is not None:
            self.legacy_ssh_algorithm = legacy_ssh_algorithm
        if rdp_target_configuration is not None:
            self.rdp_target_configuration = rdp_target_configuration
        if ssh_target_configuration is not None:
            self.ssh_target_configuration = ssh_target_configuration
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def allowed_urls(self):
        """Gets the allowed_urls of this GatewayUpdateRemoteAccess.  # noqa: E501

        List of valid URLs to redirect from the Portal back to the remote access server (in a comma-delimited list)  # noqa: E501

        :return: The allowed_urls of this GatewayUpdateRemoteAccess.  # noqa: E501
        :rtype: str
        """
        return self._allowed_urls

    @allowed_urls.setter
    def allowed_urls(self, allowed_urls):
        """Sets the allowed_urls of this GatewayUpdateRemoteAccess.

        List of valid URLs to redirect from the Portal back to the remote access server (in a comma-delimited list)  # noqa: E501

        :param allowed_urls: The allowed_urls of this GatewayUpdateRemoteAccess.  # noqa: E501
        :type: str
        """

        self._allowed_urls = allowed_urls

    @property
    def hide_session_recording(self):
        """Gets the hide_session_recording of this GatewayUpdateRemoteAccess.  # noqa: E501

        Specifies whether to show/hide if the session is currently recorded [true/false]  # noqa: E501

        :return: The hide_session_recording of this GatewayUpdateRemoteAccess.  # noqa: E501
        :rtype: str
        """
        return self._hide_session_recording

    @hide_session_recording.setter
    def hide_session_recording(self, hide_session_recording):
        """Sets the hide_session_recording of this GatewayUpdateRemoteAccess.

        Specifies whether to show/hide if the session is currently recorded [true/false]  # noqa: E501

        :param hide_session_recording: The hide_session_recording of this GatewayUpdateRemoteAccess.  # noqa: E501
        :type: str
        """

        self._hide_session_recording = hide_session_recording

    @property
    def json(self):
        """Gets the json of this GatewayUpdateRemoteAccess.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this GatewayUpdateRemoteAccess.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this GatewayUpdateRemoteAccess.

        Set output format to JSON  # noqa: E501

        :param json: The json of this GatewayUpdateRemoteAccess.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def kexalgs(self):
        """Gets the kexalgs of this GatewayUpdateRemoteAccess.  # noqa: E501

        Decide which algorithm will be used as part of the SSH initial hand-shake process  # noqa: E501

        :return: The kexalgs of this GatewayUpdateRemoteAccess.  # noqa: E501
        :rtype: str
        """
        return self._kexalgs

    @kexalgs.setter
    def kexalgs(self, kexalgs):
        """Sets the kexalgs of this GatewayUpdateRemoteAccess.

        Decide which algorithm will be used as part of the SSH initial hand-shake process  # noqa: E501

        :param kexalgs: The kexalgs of this GatewayUpdateRemoteAccess.  # noqa: E501
        :type: str
        """

        self._kexalgs = kexalgs

    @property
    def keyboard_layout(self):
        """Gets the keyboard_layout of this GatewayUpdateRemoteAccess.  # noqa: E501

        Enable support for additional keyboard layouts  # noqa: E501

        :return: The keyboard_layout of this GatewayUpdateRemoteAccess.  # noqa: E501
        :rtype: str
        """
        return self._keyboard_layout

    @keyboard_layout.setter
    def keyboard_layout(self, keyboard_layout):
        """Sets the keyboard_layout of this GatewayUpdateRemoteAccess.

        Enable support for additional keyboard layouts  # noqa: E501

        :param keyboard_layout: The keyboard_layout of this GatewayUpdateRemoteAccess.  # noqa: E501
        :type: str
        """

        self._keyboard_layout = keyboard_layout

    @property
    def legacy_ssh_algorithm(self):
        """Gets the legacy_ssh_algorithm of this GatewayUpdateRemoteAccess.  # noqa: E501

        Signs SSH certificates using legacy ssh-rsa-cert-01@openssh.com signing algorithm [true/false]  # noqa: E501

        :return: The legacy_ssh_algorithm of this GatewayUpdateRemoteAccess.  # noqa: E501
        :rtype: str
        """
        return self._legacy_ssh_algorithm

    @legacy_ssh_algorithm.setter
    def legacy_ssh_algorithm(self, legacy_ssh_algorithm):
        """Sets the legacy_ssh_algorithm of this GatewayUpdateRemoteAccess.

        Signs SSH certificates using legacy ssh-rsa-cert-01@openssh.com signing algorithm [true/false]  # noqa: E501

        :param legacy_ssh_algorithm: The legacy_ssh_algorithm of this GatewayUpdateRemoteAccess.  # noqa: E501
        :type: str
        """

        self._legacy_ssh_algorithm = legacy_ssh_algorithm

    @property
    def rdp_target_configuration(self):
        """Gets the rdp_target_configuration of this GatewayUpdateRemoteAccess.  # noqa: E501

        Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email  # noqa: E501

        :return: The rdp_target_configuration of this GatewayUpdateRemoteAccess.  # noqa: E501
        :rtype: str
        """
        return self._rdp_target_configuration

    @rdp_target_configuration.setter
    def rdp_target_configuration(self, rdp_target_configuration):
        """Sets the rdp_target_configuration of this GatewayUpdateRemoteAccess.

        Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email  # noqa: E501

        :param rdp_target_configuration: The rdp_target_configuration of this GatewayUpdateRemoteAccess.  # noqa: E501
        :type: str
        """

        self._rdp_target_configuration = rdp_target_configuration

    @property
    def ssh_target_configuration(self):
        """Gets the ssh_target_configuration of this GatewayUpdateRemoteAccess.  # noqa: E501

        Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email  # noqa: E501

        :return: The ssh_target_configuration of this GatewayUpdateRemoteAccess.  # noqa: E501
        :rtype: str
        """
        return self._ssh_target_configuration

    @ssh_target_configuration.setter
    def ssh_target_configuration(self, ssh_target_configuration):
        """Sets the ssh_target_configuration of this GatewayUpdateRemoteAccess.

        Specify the usernameSubClaim that exists inside the IDP JWT, e.g. email  # noqa: E501

        :param ssh_target_configuration: The ssh_target_configuration of this GatewayUpdateRemoteAccess.  # noqa: E501
        :type: str
        """

        self._ssh_target_configuration = ssh_target_configuration

    @property
    def token(self):
        """Gets the token of this GatewayUpdateRemoteAccess.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this GatewayUpdateRemoteAccess.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GatewayUpdateRemoteAccess.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this GatewayUpdateRemoteAccess.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this GatewayUpdateRemoteAccess.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this GatewayUpdateRemoteAccess.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this GatewayUpdateRemoteAccess.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this GatewayUpdateRemoteAccess.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GatewayUpdateRemoteAccess):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GatewayUpdateRemoteAccess):
            return True

        return self.to_dict() != other.to_dict()
