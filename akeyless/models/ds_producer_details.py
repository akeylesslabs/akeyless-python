# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class DSProducerDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_token_manager_id': 'str',
        'acl_rules': 'list[str]',
        'active': 'bool',
        'admin_name': 'str',
        'admin_pwd': 'str',
        'admin_rotation_interval_days': 'int',
        'administrative_port': 'str',
        'artifactory_admin_apikey': 'str',
        'artifactory_admin_username': 'str',
        'artifactory_base_url': 'str',
        'artifactory_token_audience': 'str',
        'artifactory_token_scope': 'str',
        'authorization_port': 'str',
        'aws_access_key_id': 'str',
        'aws_access_mode': 'str',
        'aws_region': 'str',
        'aws_role_arns': 'str',
        'aws_secret_access_key': 'str',
        'aws_session_token': 'str',
        'aws_user_console_access': 'bool',
        'aws_user_groups': 'str',
        'aws_user_policies': 'str',
        'aws_user_programmatic_access': 'bool',
        'azure_app_object_id': 'str',
        'azure_client_id': 'str',
        'azure_client_secret': 'str',
        'azure_fixed_user_name_sub_claim_key': 'str',
        'azure_fixed_user_only': 'bool',
        'azure_resource_group_name': 'str',
        'azure_resource_name': 'str',
        'azure_subscription_id': 'str',
        'azure_tenant_id': 'str',
        'azure_user_groups_obj_id': 'str',
        'azure_user_portal_access': 'bool',
        'azure_user_programmatic_access': 'bool',
        'azure_user_roles_template_id': 'str',
        'cassandra_creation_statements': 'str',
        'chef_organizations': 'str',
        'chef_server_access_mode': 'str',
        'chef_server_host_name': 'str',
        'chef_server_key': 'str',
        'chef_server_port': 'str',
        'chef_server_url': 'str',
        'chef_server_username': 'str',
        'chef_skip_ssl': 'bool',
        'client_authentication_type': 'str',
        'cloud_service_provider': 'str',
        'connection_type': 'str',
        'create_sync_url': 'str',
        'db_client_id': 'str',
        'db_client_secret': 'str',
        'db_host_name': 'str',
        'db_isolation_level': 'str',
        'db_max_idle_conns': 'str',
        'db_max_open_conns': 'str',
        'db_name': 'str',
        'db_port': 'str',
        'db_private_key': 'str',
        'db_private_key_passphrase': 'str',
        'db_pwd': 'str',
        'db_server_certificates': 'str',
        'db_server_name': 'str',
        'db_tenant_id': 'str',
        'db_user_name': 'str',
        'delete_protection': 'bool',
        'dynamic_secret_id': 'int',
        'dynamic_secret_key': 'str',
        'dynamic_secret_name': 'str',
        'dynamic_secret_type': 'str',
        'eks_access_key_id': 'str',
        'eks_assume_role': 'str',
        'eks_cluster_ca_certificate': 'str',
        'eks_cluster_endpoint': 'str',
        'eks_cluster_name': 'str',
        'eks_region': 'str',
        'eks_secret_access_key': 'str',
        'enable_admin_rotation': 'bool',
        'enforce_replay_prevention': 'bool',
        'externally_provided_user': 'str',
        'failure_message': 'str',
        'fixed_user_only': 'str',
        'gcp_key_algo': 'str',
        'gcp_role_bindings': 'dict(str, list[str])',
        'gcp_service_account_email': 'str',
        'gcp_service_account_key': 'str',
        'gcp_service_account_key_base64': 'str',
        'gcp_service_account_type': 'str',
        'gcp_tmp_service_account_name': 'str',
        'gcp_token_lifetime': 'str',
        'gcp_token_scope': 'str',
        'gcp_token_type': 'str',
        'github_app_id': 'int',
        'github_app_private_key': 'str',
        'github_base_url': 'str',
        'github_installation_id': 'int',
        'github_installation_token_permissions': 'dict(str, str)',
        'github_installation_token_repositories': 'list[str]',
        'github_installation_token_repositories_ids': 'list[int]',
        'github_repository_path': 'str',
        'gke_cluster_ca_certificate': 'str',
        'gke_cluster_endpoint': 'str',
        'gke_cluster_name': 'str',
        'gke_service_account_key': 'str',
        'gke_service_account_name': 'str',
        'grant_types': 'list[str]',
        'groups': 'str',
        'hanadb_creation_statements': 'str',
        'hanadb_revocation_statements': 'str',
        'host_name': 'str',
        'host_port': 'str',
        'implementation_type': 'str',
        'is_fixed_user': 'str',
        'issuer': 'str',
        'item_targets_assoc': 'list[ItemTargetAssociation]',
        'jwks': 'str',
        'jwks_url': 'str',
        'k8s_allowed_namespaces': 'str',
        'k8s_auth_type': 'str',
        'k8s_bearer_token': 'str',
        'k8s_client_cert_data': 'str',
        'k8s_client_key_data': 'str',
        'k8s_cluster_ca_certificate': 'str',
        'k8s_cluster_endpoint': 'str',
        'k8s_dynamic_mode': 'bool',
        'k8s_multiple_doc_yaml_temp_definition': 'list[int]',
        'k8s_namespace': 'str',
        'k8s_role_name': 'str',
        'k8s_role_type': 'str',
        'k8s_service_account': 'str',
        'last_admin_rotation': 'int',
        'ldap_audience': 'str',
        'ldap_bind_dn': 'str',
        'ldap_bind_password': 'str',
        'ldap_certificate': 'str',
        'ldap_group_dn': 'str',
        'ldap_token_expiration': 'str',
        'ldap_url': 'str',
        'ldap_user_attr': 'str',
        'ldap_user_dn': 'str',
        'metadata': 'str',
        'mongodb_atlas_api_private_key': 'str',
        'mongodb_atlas_api_public_key': 'str',
        'mongodb_atlas_project_id': 'str',
        'mongodb_custom_data': 'str',
        'mongodb_db_name': 'str',
        'mongodb_default_auth_db': 'str',
        'mongodb_host_port': 'str',
        'mongodb_is_atlas': 'bool',
        'mongodb_password': 'str',
        'mongodb_roles': 'str',
        'mongodb_uri_connection': 'str',
        'mongodb_uri_options': 'str',
        'mongodb_username': 'str',
        'mssql_creation_statements': 'str',
        'mssql_revocation_statements': 'str',
        'mysql_creation_statements': 'str',
        'mysql_revocation_statements': 'str',
        'oracle_creation_statements': 'str',
        'password': 'str',
        'password_length': 'int',
        'password_policy': 'str',
        'payload': 'str',
        'ping_url': 'str',
        'postgres_creation_statements': 'str',
        'postgres_revocation_statements': 'str',
        'privileged_user': 'str',
        'rabbitmq_server_password': 'str',
        'rabbitmq_server_uri': 'str',
        'rabbitmq_server_user': 'str',
        'rabbitmq_user_conf_permission': 'str',
        'rabbitmq_user_read_permission': 'str',
        'rabbitmq_user_tags': 'str',
        'rabbitmq_user_vhost': 'str',
        'rabbitmq_user_write_permission': 'str',
        'redirect_uris': 'list[str]',
        'redshift_creation_statements': 'str',
        'restricted_scopes': 'list[str]',
        'revoke_sync_url': 'str',
        'rotate_sync_url': 'str',
        'scopes': 'list[str]',
        'secure_remote_access_details': 'SecureRemoteAccess',
        'session_extension_warn_interval_min': 'int',
        'sf_account': 'str',
        'sf_user_role': 'str',
        'sf_warehouse_name': 'str',
        'should_stop': 'str',
        'signing_algorithm': 'str',
        'ssl_connection_certificate': 'str',
        'ssl_connection_mode': 'bool',
        'subject_dn': 'str',
        'tags': 'list[str]',
        'timeout_seconds': 'int',
        'use_gw_cloud_identity': 'bool',
        'use_gw_service_account': 'bool',
        'user_name': 'str',
        'user_password': 'str',
        'user_principal_name': 'str',
        'user_ttl': 'str',
        'username_length': 'int',
        'username_policy': 'str',
        'venafi_allow_subdomains': 'bool',
        'venafi_allowed_domains': 'list[str]',
        'venafi_api_key': 'str',
        'venafi_auto_generated_folder': 'str',
        'venafi_base_url': 'str',
        'venafi_root_first_in_chain': 'bool',
        'venafi_sign_using_akeyless_pki': 'bool',
        'venafi_signer_key_name': 'str',
        'venafi_store_private_key': 'bool',
        'venafi_tpp_access_token': 'str',
        'venafi_tpp_client_id': 'str',
        'venafi_tpp_password': 'str',
        'venafi_tpp_refresh_token': 'str',
        'venafi_tpp_username': 'str',
        'venafi_use_tpp': 'bool',
        'venafi_zone': 'str',
        'warn_before_user_expiration_min': 'int'
    }

    attribute_map = {
        'access_token_manager_id': 'access_token_manager_id',
        'acl_rules': 'acl_rules',
        'active': 'active',
        'admin_name': 'admin_name',
        'admin_pwd': 'admin_pwd',
        'admin_rotation_interval_days': 'admin_rotation_interval_days',
        'administrative_port': 'administrative_port',
        'artifactory_admin_apikey': 'artifactory_admin_apikey',
        'artifactory_admin_username': 'artifactory_admin_username',
        'artifactory_base_url': 'artifactory_base_url',
        'artifactory_token_audience': 'artifactory_token_audience',
        'artifactory_token_scope': 'artifactory_token_scope',
        'authorization_port': 'authorization_port',
        'aws_access_key_id': 'aws_access_key_id',
        'aws_access_mode': 'aws_access_mode',
        'aws_region': 'aws_region',
        'aws_role_arns': 'aws_role_arns',
        'aws_secret_access_key': 'aws_secret_access_key',
        'aws_session_token': 'aws_session_token',
        'aws_user_console_access': 'aws_user_console_access',
        'aws_user_groups': 'aws_user_groups',
        'aws_user_policies': 'aws_user_policies',
        'aws_user_programmatic_access': 'aws_user_programmatic_access',
        'azure_app_object_id': 'azure_app_object_id',
        'azure_client_id': 'azure_client_id',
        'azure_client_secret': 'azure_client_secret',
        'azure_fixed_user_name_sub_claim_key': 'azure_fixed_user_name_sub_claim_key',
        'azure_fixed_user_only': 'azure_fixed_user_only',
        'azure_resource_group_name': 'azure_resource_group_name',
        'azure_resource_name': 'azure_resource_name',
        'azure_subscription_id': 'azure_subscription_id',
        'azure_tenant_id': 'azure_tenant_id',
        'azure_user_groups_obj_id': 'azure_user_groups_obj_id',
        'azure_user_portal_access': 'azure_user_portal_access',
        'azure_user_programmatic_access': 'azure_user_programmatic_access',
        'azure_user_roles_template_id': 'azure_user_roles_template_id',
        'cassandra_creation_statements': 'cassandra_creation_statements',
        'chef_organizations': 'chef_organizations',
        'chef_server_access_mode': 'chef_server_access_mode',
        'chef_server_host_name': 'chef_server_host_name',
        'chef_server_key': 'chef_server_key',
        'chef_server_port': 'chef_server_port',
        'chef_server_url': 'chef_server_url',
        'chef_server_username': 'chef_server_username',
        'chef_skip_ssl': 'chef_skip_ssl',
        'client_authentication_type': 'client_authentication_type',
        'cloud_service_provider': 'cloud_service_provider',
        'connection_type': 'connection_type',
        'create_sync_url': 'create_sync_url',
        'db_client_id': 'db_client_id',
        'db_client_secret': 'db_client_secret',
        'db_host_name': 'db_host_name',
        'db_isolation_level': 'db_isolation_level',
        'db_max_idle_conns': 'db_max_idle_conns',
        'db_max_open_conns': 'db_max_open_conns',
        'db_name': 'db_name',
        'db_port': 'db_port',
        'db_private_key': 'db_private_key',
        'db_private_key_passphrase': 'db_private_key_passphrase',
        'db_pwd': 'db_pwd',
        'db_server_certificates': 'db_server_certificates',
        'db_server_name': 'db_server_name',
        'db_tenant_id': 'db_tenant_id',
        'db_user_name': 'db_user_name',
        'delete_protection': 'delete_protection',
        'dynamic_secret_id': 'dynamic_secret_id',
        'dynamic_secret_key': 'dynamic_secret_key',
        'dynamic_secret_name': 'dynamic_secret_name',
        'dynamic_secret_type': 'dynamic_secret_type',
        'eks_access_key_id': 'eks_access_key_id',
        'eks_assume_role': 'eks_assume_role',
        'eks_cluster_ca_certificate': 'eks_cluster_ca_certificate',
        'eks_cluster_endpoint': 'eks_cluster_endpoint',
        'eks_cluster_name': 'eks_cluster_name',
        'eks_region': 'eks_region',
        'eks_secret_access_key': 'eks_secret_access_key',
        'enable_admin_rotation': 'enable_admin_rotation',
        'enforce_replay_prevention': 'enforce_replay_prevention',
        'externally_provided_user': 'externally_provided_user',
        'failure_message': 'failure_message',
        'fixed_user_only': 'fixed_user_only',
        'gcp_key_algo': 'gcp_key_algo',
        'gcp_role_bindings': 'gcp_role_bindings',
        'gcp_service_account_email': 'gcp_service_account_email',
        'gcp_service_account_key': 'gcp_service_account_key',
        'gcp_service_account_key_base64': 'gcp_service_account_key_base64',
        'gcp_service_account_type': 'gcp_service_account_type',
        'gcp_tmp_service_account_name': 'gcp_tmp_service_account_name',
        'gcp_token_lifetime': 'gcp_token_lifetime',
        'gcp_token_scope': 'gcp_token_scope',
        'gcp_token_type': 'gcp_token_type',
        'github_app_id': 'github_app_id',
        'github_app_private_key': 'github_app_private_key',
        'github_base_url': 'github_base_url',
        'github_installation_id': 'github_installation_id',
        'github_installation_token_permissions': 'github_installation_token_permissions',
        'github_installation_token_repositories': 'github_installation_token_repositories',
        'github_installation_token_repositories_ids': 'github_installation_token_repositories_ids',
        'github_repository_path': 'github_repository_path',
        'gke_cluster_ca_certificate': 'gke_cluster_ca_certificate',
        'gke_cluster_endpoint': 'gke_cluster_endpoint',
        'gke_cluster_name': 'gke_cluster_name',
        'gke_service_account_key': 'gke_service_account_key',
        'gke_service_account_name': 'gke_service_account_name',
        'grant_types': 'grant_types',
        'groups': 'groups',
        'hanadb_creation_statements': 'hanadb_creation_statements',
        'hanadb_revocation_statements': 'hanadb_revocation_statements',
        'host_name': 'host_name',
        'host_port': 'host_port',
        'implementation_type': 'implementation_type',
        'is_fixed_user': 'is_fixed_user',
        'issuer': 'issuer',
        'item_targets_assoc': 'item_targets_assoc',
        'jwks': 'jwks',
        'jwks_url': 'jwks_url',
        'k8s_allowed_namespaces': 'k8s_allowed_namespaces',
        'k8s_auth_type': 'k8s_auth_type',
        'k8s_bearer_token': 'k8s_bearer_token',
        'k8s_client_cert_data': 'k8s_client_cert_data',
        'k8s_client_key_data': 'k8s_client_key_data',
        'k8s_cluster_ca_certificate': 'k8s_cluster_ca_certificate',
        'k8s_cluster_endpoint': 'k8s_cluster_endpoint',
        'k8s_dynamic_mode': 'k8s_dynamic_mode',
        'k8s_multiple_doc_yaml_temp_definition': 'k8s_multiple_doc_yaml_temp_definition',
        'k8s_namespace': 'k8s_namespace',
        'k8s_role_name': 'k8s_role_name',
        'k8s_role_type': 'k8s_role_type',
        'k8s_service_account': 'k8s_service_account',
        'last_admin_rotation': 'last_admin_rotation',
        'ldap_audience': 'ldap_audience',
        'ldap_bind_dn': 'ldap_bind_dn',
        'ldap_bind_password': 'ldap_bind_password',
        'ldap_certificate': 'ldap_certificate',
        'ldap_group_dn': 'ldap_group_dn',
        'ldap_token_expiration': 'ldap_token_expiration',
        'ldap_url': 'ldap_url',
        'ldap_user_attr': 'ldap_user_attr',
        'ldap_user_dn': 'ldap_user_dn',
        'metadata': 'metadata',
        'mongodb_atlas_api_private_key': 'mongodb_atlas_api_private_key',
        'mongodb_atlas_api_public_key': 'mongodb_atlas_api_public_key',
        'mongodb_atlas_project_id': 'mongodb_atlas_project_id',
        'mongodb_custom_data': 'mongodb_custom_data',
        'mongodb_db_name': 'mongodb_db_name',
        'mongodb_default_auth_db': 'mongodb_default_auth_db',
        'mongodb_host_port': 'mongodb_host_port',
        'mongodb_is_atlas': 'mongodb_is_atlas',
        'mongodb_password': 'mongodb_password',
        'mongodb_roles': 'mongodb_roles',
        'mongodb_uri_connection': 'mongodb_uri_connection',
        'mongodb_uri_options': 'mongodb_uri_options',
        'mongodb_username': 'mongodb_username',
        'mssql_creation_statements': 'mssql_creation_statements',
        'mssql_revocation_statements': 'mssql_revocation_statements',
        'mysql_creation_statements': 'mysql_creation_statements',
        'mysql_revocation_statements': 'mysql_revocation_statements',
        'oracle_creation_statements': 'oracle_creation_statements',
        'password': 'password',
        'password_length': 'password_length',
        'password_policy': 'password_policy',
        'payload': 'payload',
        'ping_url': 'ping_url',
        'postgres_creation_statements': 'postgres_creation_statements',
        'postgres_revocation_statements': 'postgres_revocation_statements',
        'privileged_user': 'privileged_user',
        'rabbitmq_server_password': 'rabbitmq_server_password',
        'rabbitmq_server_uri': 'rabbitmq_server_uri',
        'rabbitmq_server_user': 'rabbitmq_server_user',
        'rabbitmq_user_conf_permission': 'rabbitmq_user_conf_permission',
        'rabbitmq_user_read_permission': 'rabbitmq_user_read_permission',
        'rabbitmq_user_tags': 'rabbitmq_user_tags',
        'rabbitmq_user_vhost': 'rabbitmq_user_vhost',
        'rabbitmq_user_write_permission': 'rabbitmq_user_write_permission',
        'redirect_uris': 'redirect_uris',
        'redshift_creation_statements': 'redshift_creation_statements',
        'restricted_scopes': 'restricted_scopes',
        'revoke_sync_url': 'revoke_sync_url',
        'rotate_sync_url': 'rotate_sync_url',
        'scopes': 'scopes',
        'secure_remote_access_details': 'secure_remote_access_details',
        'session_extension_warn_interval_min': 'session_extension_warn_interval_min',
        'sf_account': 'sf_account',
        'sf_user_role': 'sf_user_role',
        'sf_warehouse_name': 'sf_warehouse_name',
        'should_stop': 'should_stop',
        'signing_algorithm': 'signing_algorithm',
        'ssl_connection_certificate': 'ssl_connection_certificate',
        'ssl_connection_mode': 'ssl_connection_mode',
        'subject_dn': 'subject_dn',
        'tags': 'tags',
        'timeout_seconds': 'timeout_seconds',
        'use_gw_cloud_identity': 'use_gw_cloud_identity',
        'use_gw_service_account': 'use_gw_service_account',
        'user_name': 'user_name',
        'user_password': 'user_password',
        'user_principal_name': 'user_principal_name',
        'user_ttl': 'user_ttl',
        'username_length': 'username_length',
        'username_policy': 'username_policy',
        'venafi_allow_subdomains': 'venafi_allow_subdomains',
        'venafi_allowed_domains': 'venafi_allowed_domains',
        'venafi_api_key': 'venafi_api_key',
        'venafi_auto_generated_folder': 'venafi_auto_generated_folder',
        'venafi_base_url': 'venafi_base_url',
        'venafi_root_first_in_chain': 'venafi_root_first_in_chain',
        'venafi_sign_using_akeyless_pki': 'venafi_sign_using_akeyless_pki',
        'venafi_signer_key_name': 'venafi_signer_key_name',
        'venafi_store_private_key': 'venafi_store_private_key',
        'venafi_tpp_access_token': 'venafi_tpp_access_token',
        'venafi_tpp_client_id': 'venafi_tpp_client_id',
        'venafi_tpp_password': 'venafi_tpp_password',
        'venafi_tpp_refresh_token': 'venafi_tpp_refresh_token',
        'venafi_tpp_username': 'venafi_tpp_username',
        'venafi_use_tpp': 'venafi_use_tpp',
        'venafi_zone': 'venafi_zone',
        'warn_before_user_expiration_min': 'warn_before_user_expiration_min'
    }

    def __init__(self, access_token_manager_id=None, acl_rules=None, active=None, admin_name=None, admin_pwd=None, admin_rotation_interval_days=None, administrative_port=None, artifactory_admin_apikey=None, artifactory_admin_username=None, artifactory_base_url=None, artifactory_token_audience=None, artifactory_token_scope=None, authorization_port=None, aws_access_key_id=None, aws_access_mode=None, aws_region=None, aws_role_arns=None, aws_secret_access_key=None, aws_session_token=None, aws_user_console_access=None, aws_user_groups=None, aws_user_policies=None, aws_user_programmatic_access=None, azure_app_object_id=None, azure_client_id=None, azure_client_secret=None, azure_fixed_user_name_sub_claim_key=None, azure_fixed_user_only=None, azure_resource_group_name=None, azure_resource_name=None, azure_subscription_id=None, azure_tenant_id=None, azure_user_groups_obj_id=None, azure_user_portal_access=None, azure_user_programmatic_access=None, azure_user_roles_template_id=None, cassandra_creation_statements=None, chef_organizations=None, chef_server_access_mode=None, chef_server_host_name=None, chef_server_key=None, chef_server_port=None, chef_server_url=None, chef_server_username=None, chef_skip_ssl=None, client_authentication_type=None, cloud_service_provider=None, connection_type=None, create_sync_url=None, db_client_id=None, db_client_secret=None, db_host_name=None, db_isolation_level=None, db_max_idle_conns=None, db_max_open_conns=None, db_name=None, db_port=None, db_private_key=None, db_private_key_passphrase=None, db_pwd=None, db_server_certificates=None, db_server_name=None, db_tenant_id=None, db_user_name=None, delete_protection=None, dynamic_secret_id=None, dynamic_secret_key=None, dynamic_secret_name=None, dynamic_secret_type=None, eks_access_key_id=None, eks_assume_role=None, eks_cluster_ca_certificate=None, eks_cluster_endpoint=None, eks_cluster_name=None, eks_region=None, eks_secret_access_key=None, enable_admin_rotation=None, enforce_replay_prevention=None, externally_provided_user=None, failure_message=None, fixed_user_only=None, gcp_key_algo=None, gcp_role_bindings=None, gcp_service_account_email=None, gcp_service_account_key=None, gcp_service_account_key_base64=None, gcp_service_account_type=None, gcp_tmp_service_account_name=None, gcp_token_lifetime=None, gcp_token_scope=None, gcp_token_type=None, github_app_id=None, github_app_private_key=None, github_base_url=None, github_installation_id=None, github_installation_token_permissions=None, github_installation_token_repositories=None, github_installation_token_repositories_ids=None, github_repository_path=None, gke_cluster_ca_certificate=None, gke_cluster_endpoint=None, gke_cluster_name=None, gke_service_account_key=None, gke_service_account_name=None, grant_types=None, groups=None, hanadb_creation_statements=None, hanadb_revocation_statements=None, host_name=None, host_port=None, implementation_type=None, is_fixed_user=None, issuer=None, item_targets_assoc=None, jwks=None, jwks_url=None, k8s_allowed_namespaces=None, k8s_auth_type=None, k8s_bearer_token=None, k8s_client_cert_data=None, k8s_client_key_data=None, k8s_cluster_ca_certificate=None, k8s_cluster_endpoint=None, k8s_dynamic_mode=None, k8s_multiple_doc_yaml_temp_definition=None, k8s_namespace=None, k8s_role_name=None, k8s_role_type=None, k8s_service_account=None, last_admin_rotation=None, ldap_audience=None, ldap_bind_dn=None, ldap_bind_password=None, ldap_certificate=None, ldap_group_dn=None, ldap_token_expiration=None, ldap_url=None, ldap_user_attr=None, ldap_user_dn=None, metadata=None, mongodb_atlas_api_private_key=None, mongodb_atlas_api_public_key=None, mongodb_atlas_project_id=None, mongodb_custom_data=None, mongodb_db_name=None, mongodb_default_auth_db=None, mongodb_host_port=None, mongodb_is_atlas=None, mongodb_password=None, mongodb_roles=None, mongodb_uri_connection=None, mongodb_uri_options=None, mongodb_username=None, mssql_creation_statements=None, mssql_revocation_statements=None, mysql_creation_statements=None, mysql_revocation_statements=None, oracle_creation_statements=None, password=None, password_length=None, password_policy=None, payload=None, ping_url=None, postgres_creation_statements=None, postgres_revocation_statements=None, privileged_user=None, rabbitmq_server_password=None, rabbitmq_server_uri=None, rabbitmq_server_user=None, rabbitmq_user_conf_permission=None, rabbitmq_user_read_permission=None, rabbitmq_user_tags=None, rabbitmq_user_vhost=None, rabbitmq_user_write_permission=None, redirect_uris=None, redshift_creation_statements=None, restricted_scopes=None, revoke_sync_url=None, rotate_sync_url=None, scopes=None, secure_remote_access_details=None, session_extension_warn_interval_min=None, sf_account=None, sf_user_role=None, sf_warehouse_name=None, should_stop=None, signing_algorithm=None, ssl_connection_certificate=None, ssl_connection_mode=None, subject_dn=None, tags=None, timeout_seconds=None, use_gw_cloud_identity=None, use_gw_service_account=None, user_name=None, user_password=None, user_principal_name=None, user_ttl=None, username_length=None, username_policy=None, venafi_allow_subdomains=None, venafi_allowed_domains=None, venafi_api_key=None, venafi_auto_generated_folder=None, venafi_base_url=None, venafi_root_first_in_chain=None, venafi_sign_using_akeyless_pki=None, venafi_signer_key_name=None, venafi_store_private_key=None, venafi_tpp_access_token=None, venafi_tpp_client_id=None, venafi_tpp_password=None, venafi_tpp_refresh_token=None, venafi_tpp_username=None, venafi_use_tpp=None, venafi_zone=None, warn_before_user_expiration_min=None, local_vars_configuration=None):  # noqa: E501
        """DSProducerDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_token_manager_id = None
        self._acl_rules = None
        self._active = None
        self._admin_name = None
        self._admin_pwd = None
        self._admin_rotation_interval_days = None
        self._administrative_port = None
        self._artifactory_admin_apikey = None
        self._artifactory_admin_username = None
        self._artifactory_base_url = None
        self._artifactory_token_audience = None
        self._artifactory_token_scope = None
        self._authorization_port = None
        self._aws_access_key_id = None
        self._aws_access_mode = None
        self._aws_region = None
        self._aws_role_arns = None
        self._aws_secret_access_key = None
        self._aws_session_token = None
        self._aws_user_console_access = None
        self._aws_user_groups = None
        self._aws_user_policies = None
        self._aws_user_programmatic_access = None
        self._azure_app_object_id = None
        self._azure_client_id = None
        self._azure_client_secret = None
        self._azure_fixed_user_name_sub_claim_key = None
        self._azure_fixed_user_only = None
        self._azure_resource_group_name = None
        self._azure_resource_name = None
        self._azure_subscription_id = None
        self._azure_tenant_id = None
        self._azure_user_groups_obj_id = None
        self._azure_user_portal_access = None
        self._azure_user_programmatic_access = None
        self._azure_user_roles_template_id = None
        self._cassandra_creation_statements = None
        self._chef_organizations = None
        self._chef_server_access_mode = None
        self._chef_server_host_name = None
        self._chef_server_key = None
        self._chef_server_port = None
        self._chef_server_url = None
        self._chef_server_username = None
        self._chef_skip_ssl = None
        self._client_authentication_type = None
        self._cloud_service_provider = None
        self._connection_type = None
        self._create_sync_url = None
        self._db_client_id = None
        self._db_client_secret = None
        self._db_host_name = None
        self._db_isolation_level = None
        self._db_max_idle_conns = None
        self._db_max_open_conns = None
        self._db_name = None
        self._db_port = None
        self._db_private_key = None
        self._db_private_key_passphrase = None
        self._db_pwd = None
        self._db_server_certificates = None
        self._db_server_name = None
        self._db_tenant_id = None
        self._db_user_name = None
        self._delete_protection = None
        self._dynamic_secret_id = None
        self._dynamic_secret_key = None
        self._dynamic_secret_name = None
        self._dynamic_secret_type = None
        self._eks_access_key_id = None
        self._eks_assume_role = None
        self._eks_cluster_ca_certificate = None
        self._eks_cluster_endpoint = None
        self._eks_cluster_name = None
        self._eks_region = None
        self._eks_secret_access_key = None
        self._enable_admin_rotation = None
        self._enforce_replay_prevention = None
        self._externally_provided_user = None
        self._failure_message = None
        self._fixed_user_only = None
        self._gcp_key_algo = None
        self._gcp_role_bindings = None
        self._gcp_service_account_email = None
        self._gcp_service_account_key = None
        self._gcp_service_account_key_base64 = None
        self._gcp_service_account_type = None
        self._gcp_tmp_service_account_name = None
        self._gcp_token_lifetime = None
        self._gcp_token_scope = None
        self._gcp_token_type = None
        self._github_app_id = None
        self._github_app_private_key = None
        self._github_base_url = None
        self._github_installation_id = None
        self._github_installation_token_permissions = None
        self._github_installation_token_repositories = None
        self._github_installation_token_repositories_ids = None
        self._github_repository_path = None
        self._gke_cluster_ca_certificate = None
        self._gke_cluster_endpoint = None
        self._gke_cluster_name = None
        self._gke_service_account_key = None
        self._gke_service_account_name = None
        self._grant_types = None
        self._groups = None
        self._hanadb_creation_statements = None
        self._hanadb_revocation_statements = None
        self._host_name = None
        self._host_port = None
        self._implementation_type = None
        self._is_fixed_user = None
        self._issuer = None
        self._item_targets_assoc = None
        self._jwks = None
        self._jwks_url = None
        self._k8s_allowed_namespaces = None
        self._k8s_auth_type = None
        self._k8s_bearer_token = None
        self._k8s_client_cert_data = None
        self._k8s_client_key_data = None
        self._k8s_cluster_ca_certificate = None
        self._k8s_cluster_endpoint = None
        self._k8s_dynamic_mode = None
        self._k8s_multiple_doc_yaml_temp_definition = None
        self._k8s_namespace = None
        self._k8s_role_name = None
        self._k8s_role_type = None
        self._k8s_service_account = None
        self._last_admin_rotation = None
        self._ldap_audience = None
        self._ldap_bind_dn = None
        self._ldap_bind_password = None
        self._ldap_certificate = None
        self._ldap_group_dn = None
        self._ldap_token_expiration = None
        self._ldap_url = None
        self._ldap_user_attr = None
        self._ldap_user_dn = None
        self._metadata = None
        self._mongodb_atlas_api_private_key = None
        self._mongodb_atlas_api_public_key = None
        self._mongodb_atlas_project_id = None
        self._mongodb_custom_data = None
        self._mongodb_db_name = None
        self._mongodb_default_auth_db = None
        self._mongodb_host_port = None
        self._mongodb_is_atlas = None
        self._mongodb_password = None
        self._mongodb_roles = None
        self._mongodb_uri_connection = None
        self._mongodb_uri_options = None
        self._mongodb_username = None
        self._mssql_creation_statements = None
        self._mssql_revocation_statements = None
        self._mysql_creation_statements = None
        self._mysql_revocation_statements = None
        self._oracle_creation_statements = None
        self._password = None
        self._password_length = None
        self._password_policy = None
        self._payload = None
        self._ping_url = None
        self._postgres_creation_statements = None
        self._postgres_revocation_statements = None
        self._privileged_user = None
        self._rabbitmq_server_password = None
        self._rabbitmq_server_uri = None
        self._rabbitmq_server_user = None
        self._rabbitmq_user_conf_permission = None
        self._rabbitmq_user_read_permission = None
        self._rabbitmq_user_tags = None
        self._rabbitmq_user_vhost = None
        self._rabbitmq_user_write_permission = None
        self._redirect_uris = None
        self._redshift_creation_statements = None
        self._restricted_scopes = None
        self._revoke_sync_url = None
        self._rotate_sync_url = None
        self._scopes = None
        self._secure_remote_access_details = None
        self._session_extension_warn_interval_min = None
        self._sf_account = None
        self._sf_user_role = None
        self._sf_warehouse_name = None
        self._should_stop = None
        self._signing_algorithm = None
        self._ssl_connection_certificate = None
        self._ssl_connection_mode = None
        self._subject_dn = None
        self._tags = None
        self._timeout_seconds = None
        self._use_gw_cloud_identity = None
        self._use_gw_service_account = None
        self._user_name = None
        self._user_password = None
        self._user_principal_name = None
        self._user_ttl = None
        self._username_length = None
        self._username_policy = None
        self._venafi_allow_subdomains = None
        self._venafi_allowed_domains = None
        self._venafi_api_key = None
        self._venafi_auto_generated_folder = None
        self._venafi_base_url = None
        self._venafi_root_first_in_chain = None
        self._venafi_sign_using_akeyless_pki = None
        self._venafi_signer_key_name = None
        self._venafi_store_private_key = None
        self._venafi_tpp_access_token = None
        self._venafi_tpp_client_id = None
        self._venafi_tpp_password = None
        self._venafi_tpp_refresh_token = None
        self._venafi_tpp_username = None
        self._venafi_use_tpp = None
        self._venafi_zone = None
        self._warn_before_user_expiration_min = None
        self.discriminator = None

        if access_token_manager_id is not None:
            self.access_token_manager_id = access_token_manager_id
        if acl_rules is not None:
            self.acl_rules = acl_rules
        if active is not None:
            self.active = active
        if admin_name is not None:
            self.admin_name = admin_name
        if admin_pwd is not None:
            self.admin_pwd = admin_pwd
        if admin_rotation_interval_days is not None:
            self.admin_rotation_interval_days = admin_rotation_interval_days
        if administrative_port is not None:
            self.administrative_port = administrative_port
        if artifactory_admin_apikey is not None:
            self.artifactory_admin_apikey = artifactory_admin_apikey
        if artifactory_admin_username is not None:
            self.artifactory_admin_username = artifactory_admin_username
        if artifactory_base_url is not None:
            self.artifactory_base_url = artifactory_base_url
        if artifactory_token_audience is not None:
            self.artifactory_token_audience = artifactory_token_audience
        if artifactory_token_scope is not None:
            self.artifactory_token_scope = artifactory_token_scope
        if authorization_port is not None:
            self.authorization_port = authorization_port
        if aws_access_key_id is not None:
            self.aws_access_key_id = aws_access_key_id
        if aws_access_mode is not None:
            self.aws_access_mode = aws_access_mode
        if aws_region is not None:
            self.aws_region = aws_region
        if aws_role_arns is not None:
            self.aws_role_arns = aws_role_arns
        if aws_secret_access_key is not None:
            self.aws_secret_access_key = aws_secret_access_key
        if aws_session_token is not None:
            self.aws_session_token = aws_session_token
        if aws_user_console_access is not None:
            self.aws_user_console_access = aws_user_console_access
        if aws_user_groups is not None:
            self.aws_user_groups = aws_user_groups
        if aws_user_policies is not None:
            self.aws_user_policies = aws_user_policies
        if aws_user_programmatic_access is not None:
            self.aws_user_programmatic_access = aws_user_programmatic_access
        if azure_app_object_id is not None:
            self.azure_app_object_id = azure_app_object_id
        if azure_client_id is not None:
            self.azure_client_id = azure_client_id
        if azure_client_secret is not None:
            self.azure_client_secret = azure_client_secret
        if azure_fixed_user_name_sub_claim_key is not None:
            self.azure_fixed_user_name_sub_claim_key = azure_fixed_user_name_sub_claim_key
        if azure_fixed_user_only is not None:
            self.azure_fixed_user_only = azure_fixed_user_only
        if azure_resource_group_name is not None:
            self.azure_resource_group_name = azure_resource_group_name
        if azure_resource_name is not None:
            self.azure_resource_name = azure_resource_name
        if azure_subscription_id is not None:
            self.azure_subscription_id = azure_subscription_id
        if azure_tenant_id is not None:
            self.azure_tenant_id = azure_tenant_id
        if azure_user_groups_obj_id is not None:
            self.azure_user_groups_obj_id = azure_user_groups_obj_id
        if azure_user_portal_access is not None:
            self.azure_user_portal_access = azure_user_portal_access
        if azure_user_programmatic_access is not None:
            self.azure_user_programmatic_access = azure_user_programmatic_access
        if azure_user_roles_template_id is not None:
            self.azure_user_roles_template_id = azure_user_roles_template_id
        if cassandra_creation_statements is not None:
            self.cassandra_creation_statements = cassandra_creation_statements
        if chef_organizations is not None:
            self.chef_organizations = chef_organizations
        if chef_server_access_mode is not None:
            self.chef_server_access_mode = chef_server_access_mode
        if chef_server_host_name is not None:
            self.chef_server_host_name = chef_server_host_name
        if chef_server_key is not None:
            self.chef_server_key = chef_server_key
        if chef_server_port is not None:
            self.chef_server_port = chef_server_port
        if chef_server_url is not None:
            self.chef_server_url = chef_server_url
        if chef_server_username is not None:
            self.chef_server_username = chef_server_username
        if chef_skip_ssl is not None:
            self.chef_skip_ssl = chef_skip_ssl
        if client_authentication_type is not None:
            self.client_authentication_type = client_authentication_type
        if cloud_service_provider is not None:
            self.cloud_service_provider = cloud_service_provider
        if connection_type is not None:
            self.connection_type = connection_type
        if create_sync_url is not None:
            self.create_sync_url = create_sync_url
        if db_client_id is not None:
            self.db_client_id = db_client_id
        if db_client_secret is not None:
            self.db_client_secret = db_client_secret
        if db_host_name is not None:
            self.db_host_name = db_host_name
        if db_isolation_level is not None:
            self.db_isolation_level = db_isolation_level
        if db_max_idle_conns is not None:
            self.db_max_idle_conns = db_max_idle_conns
        if db_max_open_conns is not None:
            self.db_max_open_conns = db_max_open_conns
        if db_name is not None:
            self.db_name = db_name
        if db_port is not None:
            self.db_port = db_port
        if db_private_key is not None:
            self.db_private_key = db_private_key
        if db_private_key_passphrase is not None:
            self.db_private_key_passphrase = db_private_key_passphrase
        if db_pwd is not None:
            self.db_pwd = db_pwd
        if db_server_certificates is not None:
            self.db_server_certificates = db_server_certificates
        if db_server_name is not None:
            self.db_server_name = db_server_name
        if db_tenant_id is not None:
            self.db_tenant_id = db_tenant_id
        if db_user_name is not None:
            self.db_user_name = db_user_name
        if delete_protection is not None:
            self.delete_protection = delete_protection
        if dynamic_secret_id is not None:
            self.dynamic_secret_id = dynamic_secret_id
        if dynamic_secret_key is not None:
            self.dynamic_secret_key = dynamic_secret_key
        if dynamic_secret_name is not None:
            self.dynamic_secret_name = dynamic_secret_name
        if dynamic_secret_type is not None:
            self.dynamic_secret_type = dynamic_secret_type
        if eks_access_key_id is not None:
            self.eks_access_key_id = eks_access_key_id
        if eks_assume_role is not None:
            self.eks_assume_role = eks_assume_role
        if eks_cluster_ca_certificate is not None:
            self.eks_cluster_ca_certificate = eks_cluster_ca_certificate
        if eks_cluster_endpoint is not None:
            self.eks_cluster_endpoint = eks_cluster_endpoint
        if eks_cluster_name is not None:
            self.eks_cluster_name = eks_cluster_name
        if eks_region is not None:
            self.eks_region = eks_region
        if eks_secret_access_key is not None:
            self.eks_secret_access_key = eks_secret_access_key
        if enable_admin_rotation is not None:
            self.enable_admin_rotation = enable_admin_rotation
        if enforce_replay_prevention is not None:
            self.enforce_replay_prevention = enforce_replay_prevention
        if externally_provided_user is not None:
            self.externally_provided_user = externally_provided_user
        if failure_message is not None:
            self.failure_message = failure_message
        if fixed_user_only is not None:
            self.fixed_user_only = fixed_user_only
        if gcp_key_algo is not None:
            self.gcp_key_algo = gcp_key_algo
        if gcp_role_bindings is not None:
            self.gcp_role_bindings = gcp_role_bindings
        if gcp_service_account_email is not None:
            self.gcp_service_account_email = gcp_service_account_email
        if gcp_service_account_key is not None:
            self.gcp_service_account_key = gcp_service_account_key
        if gcp_service_account_key_base64 is not None:
            self.gcp_service_account_key_base64 = gcp_service_account_key_base64
        if gcp_service_account_type is not None:
            self.gcp_service_account_type = gcp_service_account_type
        if gcp_tmp_service_account_name is not None:
            self.gcp_tmp_service_account_name = gcp_tmp_service_account_name
        if gcp_token_lifetime is not None:
            self.gcp_token_lifetime = gcp_token_lifetime
        if gcp_token_scope is not None:
            self.gcp_token_scope = gcp_token_scope
        if gcp_token_type is not None:
            self.gcp_token_type = gcp_token_type
        if github_app_id is not None:
            self.github_app_id = github_app_id
        if github_app_private_key is not None:
            self.github_app_private_key = github_app_private_key
        if github_base_url is not None:
            self.github_base_url = github_base_url
        if github_installation_id is not None:
            self.github_installation_id = github_installation_id
        if github_installation_token_permissions is not None:
            self.github_installation_token_permissions = github_installation_token_permissions
        if github_installation_token_repositories is not None:
            self.github_installation_token_repositories = github_installation_token_repositories
        if github_installation_token_repositories_ids is not None:
            self.github_installation_token_repositories_ids = github_installation_token_repositories_ids
        if github_repository_path is not None:
            self.github_repository_path = github_repository_path
        if gke_cluster_ca_certificate is not None:
            self.gke_cluster_ca_certificate = gke_cluster_ca_certificate
        if gke_cluster_endpoint is not None:
            self.gke_cluster_endpoint = gke_cluster_endpoint
        if gke_cluster_name is not None:
            self.gke_cluster_name = gke_cluster_name
        if gke_service_account_key is not None:
            self.gke_service_account_key = gke_service_account_key
        if gke_service_account_name is not None:
            self.gke_service_account_name = gke_service_account_name
        if grant_types is not None:
            self.grant_types = grant_types
        if groups is not None:
            self.groups = groups
        if hanadb_creation_statements is not None:
            self.hanadb_creation_statements = hanadb_creation_statements
        if hanadb_revocation_statements is not None:
            self.hanadb_revocation_statements = hanadb_revocation_statements
        if host_name is not None:
            self.host_name = host_name
        if host_port is not None:
            self.host_port = host_port
        if implementation_type is not None:
            self.implementation_type = implementation_type
        if is_fixed_user is not None:
            self.is_fixed_user = is_fixed_user
        if issuer is not None:
            self.issuer = issuer
        if item_targets_assoc is not None:
            self.item_targets_assoc = item_targets_assoc
        if jwks is not None:
            self.jwks = jwks
        if jwks_url is not None:
            self.jwks_url = jwks_url
        if k8s_allowed_namespaces is not None:
            self.k8s_allowed_namespaces = k8s_allowed_namespaces
        if k8s_auth_type is not None:
            self.k8s_auth_type = k8s_auth_type
        if k8s_bearer_token is not None:
            self.k8s_bearer_token = k8s_bearer_token
        if k8s_client_cert_data is not None:
            self.k8s_client_cert_data = k8s_client_cert_data
        if k8s_client_key_data is not None:
            self.k8s_client_key_data = k8s_client_key_data
        if k8s_cluster_ca_certificate is not None:
            self.k8s_cluster_ca_certificate = k8s_cluster_ca_certificate
        if k8s_cluster_endpoint is not None:
            self.k8s_cluster_endpoint = k8s_cluster_endpoint
        if k8s_dynamic_mode is not None:
            self.k8s_dynamic_mode = k8s_dynamic_mode
        if k8s_multiple_doc_yaml_temp_definition is not None:
            self.k8s_multiple_doc_yaml_temp_definition = k8s_multiple_doc_yaml_temp_definition
        if k8s_namespace is not None:
            self.k8s_namespace = k8s_namespace
        if k8s_role_name is not None:
            self.k8s_role_name = k8s_role_name
        if k8s_role_type is not None:
            self.k8s_role_type = k8s_role_type
        if k8s_service_account is not None:
            self.k8s_service_account = k8s_service_account
        if last_admin_rotation is not None:
            self.last_admin_rotation = last_admin_rotation
        if ldap_audience is not None:
            self.ldap_audience = ldap_audience
        if ldap_bind_dn is not None:
            self.ldap_bind_dn = ldap_bind_dn
        if ldap_bind_password is not None:
            self.ldap_bind_password = ldap_bind_password
        if ldap_certificate is not None:
            self.ldap_certificate = ldap_certificate
        if ldap_group_dn is not None:
            self.ldap_group_dn = ldap_group_dn
        if ldap_token_expiration is not None:
            self.ldap_token_expiration = ldap_token_expiration
        if ldap_url is not None:
            self.ldap_url = ldap_url
        if ldap_user_attr is not None:
            self.ldap_user_attr = ldap_user_attr
        if ldap_user_dn is not None:
            self.ldap_user_dn = ldap_user_dn
        if metadata is not None:
            self.metadata = metadata
        if mongodb_atlas_api_private_key is not None:
            self.mongodb_atlas_api_private_key = mongodb_atlas_api_private_key
        if mongodb_atlas_api_public_key is not None:
            self.mongodb_atlas_api_public_key = mongodb_atlas_api_public_key
        if mongodb_atlas_project_id is not None:
            self.mongodb_atlas_project_id = mongodb_atlas_project_id
        if mongodb_custom_data is not None:
            self.mongodb_custom_data = mongodb_custom_data
        if mongodb_db_name is not None:
            self.mongodb_db_name = mongodb_db_name
        if mongodb_default_auth_db is not None:
            self.mongodb_default_auth_db = mongodb_default_auth_db
        if mongodb_host_port is not None:
            self.mongodb_host_port = mongodb_host_port
        if mongodb_is_atlas is not None:
            self.mongodb_is_atlas = mongodb_is_atlas
        if mongodb_password is not None:
            self.mongodb_password = mongodb_password
        if mongodb_roles is not None:
            self.mongodb_roles = mongodb_roles
        if mongodb_uri_connection is not None:
            self.mongodb_uri_connection = mongodb_uri_connection
        if mongodb_uri_options is not None:
            self.mongodb_uri_options = mongodb_uri_options
        if mongodb_username is not None:
            self.mongodb_username = mongodb_username
        if mssql_creation_statements is not None:
            self.mssql_creation_statements = mssql_creation_statements
        if mssql_revocation_statements is not None:
            self.mssql_revocation_statements = mssql_revocation_statements
        if mysql_creation_statements is not None:
            self.mysql_creation_statements = mysql_creation_statements
        if mysql_revocation_statements is not None:
            self.mysql_revocation_statements = mysql_revocation_statements
        if oracle_creation_statements is not None:
            self.oracle_creation_statements = oracle_creation_statements
        if password is not None:
            self.password = password
        if password_length is not None:
            self.password_length = password_length
        if password_policy is not None:
            self.password_policy = password_policy
        if payload is not None:
            self.payload = payload
        if ping_url is not None:
            self.ping_url = ping_url
        if postgres_creation_statements is not None:
            self.postgres_creation_statements = postgres_creation_statements
        if postgres_revocation_statements is not None:
            self.postgres_revocation_statements = postgres_revocation_statements
        if privileged_user is not None:
            self.privileged_user = privileged_user
        if rabbitmq_server_password is not None:
            self.rabbitmq_server_password = rabbitmq_server_password
        if rabbitmq_server_uri is not None:
            self.rabbitmq_server_uri = rabbitmq_server_uri
        if rabbitmq_server_user is not None:
            self.rabbitmq_server_user = rabbitmq_server_user
        if rabbitmq_user_conf_permission is not None:
            self.rabbitmq_user_conf_permission = rabbitmq_user_conf_permission
        if rabbitmq_user_read_permission is not None:
            self.rabbitmq_user_read_permission = rabbitmq_user_read_permission
        if rabbitmq_user_tags is not None:
            self.rabbitmq_user_tags = rabbitmq_user_tags
        if rabbitmq_user_vhost is not None:
            self.rabbitmq_user_vhost = rabbitmq_user_vhost
        if rabbitmq_user_write_permission is not None:
            self.rabbitmq_user_write_permission = rabbitmq_user_write_permission
        if redirect_uris is not None:
            self.redirect_uris = redirect_uris
        if redshift_creation_statements is not None:
            self.redshift_creation_statements = redshift_creation_statements
        if restricted_scopes is not None:
            self.restricted_scopes = restricted_scopes
        if revoke_sync_url is not None:
            self.revoke_sync_url = revoke_sync_url
        if rotate_sync_url is not None:
            self.rotate_sync_url = rotate_sync_url
        if scopes is not None:
            self.scopes = scopes
        if secure_remote_access_details is not None:
            self.secure_remote_access_details = secure_remote_access_details
        if session_extension_warn_interval_min is not None:
            self.session_extension_warn_interval_min = session_extension_warn_interval_min
        if sf_account is not None:
            self.sf_account = sf_account
        if sf_user_role is not None:
            self.sf_user_role = sf_user_role
        if sf_warehouse_name is not None:
            self.sf_warehouse_name = sf_warehouse_name
        if should_stop is not None:
            self.should_stop = should_stop
        if signing_algorithm is not None:
            self.signing_algorithm = signing_algorithm
        if ssl_connection_certificate is not None:
            self.ssl_connection_certificate = ssl_connection_certificate
        if ssl_connection_mode is not None:
            self.ssl_connection_mode = ssl_connection_mode
        if subject_dn is not None:
            self.subject_dn = subject_dn
        if tags is not None:
            self.tags = tags
        if timeout_seconds is not None:
            self.timeout_seconds = timeout_seconds
        if use_gw_cloud_identity is not None:
            self.use_gw_cloud_identity = use_gw_cloud_identity
        if use_gw_service_account is not None:
            self.use_gw_service_account = use_gw_service_account
        if user_name is not None:
            self.user_name = user_name
        if user_password is not None:
            self.user_password = user_password
        if user_principal_name is not None:
            self.user_principal_name = user_principal_name
        if user_ttl is not None:
            self.user_ttl = user_ttl
        if username_length is not None:
            self.username_length = username_length
        if username_policy is not None:
            self.username_policy = username_policy
        if venafi_allow_subdomains is not None:
            self.venafi_allow_subdomains = venafi_allow_subdomains
        if venafi_allowed_domains is not None:
            self.venafi_allowed_domains = venafi_allowed_domains
        if venafi_api_key is not None:
            self.venafi_api_key = venafi_api_key
        if venafi_auto_generated_folder is not None:
            self.venafi_auto_generated_folder = venafi_auto_generated_folder
        if venafi_base_url is not None:
            self.venafi_base_url = venafi_base_url
        if venafi_root_first_in_chain is not None:
            self.venafi_root_first_in_chain = venafi_root_first_in_chain
        if venafi_sign_using_akeyless_pki is not None:
            self.venafi_sign_using_akeyless_pki = venafi_sign_using_akeyless_pki
        if venafi_signer_key_name is not None:
            self.venafi_signer_key_name = venafi_signer_key_name
        if venafi_store_private_key is not None:
            self.venafi_store_private_key = venafi_store_private_key
        if venafi_tpp_access_token is not None:
            self.venafi_tpp_access_token = venafi_tpp_access_token
        if venafi_tpp_client_id is not None:
            self.venafi_tpp_client_id = venafi_tpp_client_id
        if venafi_tpp_password is not None:
            self.venafi_tpp_password = venafi_tpp_password
        if venafi_tpp_refresh_token is not None:
            self.venafi_tpp_refresh_token = venafi_tpp_refresh_token
        if venafi_tpp_username is not None:
            self.venafi_tpp_username = venafi_tpp_username
        if venafi_use_tpp is not None:
            self.venafi_use_tpp = venafi_use_tpp
        if venafi_zone is not None:
            self.venafi_zone = venafi_zone
        if warn_before_user_expiration_min is not None:
            self.warn_before_user_expiration_min = warn_before_user_expiration_min

    @property
    def access_token_manager_id(self):
        """Gets the access_token_manager_id of this DSProducerDetails.  # noqa: E501


        :return: The access_token_manager_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._access_token_manager_id

    @access_token_manager_id.setter
    def access_token_manager_id(self, access_token_manager_id):
        """Sets the access_token_manager_id of this DSProducerDetails.


        :param access_token_manager_id: The access_token_manager_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._access_token_manager_id = access_token_manager_id

    @property
    def acl_rules(self):
        """Gets the acl_rules of this DSProducerDetails.  # noqa: E501


        :return: The acl_rules of this DSProducerDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._acl_rules

    @acl_rules.setter
    def acl_rules(self, acl_rules):
        """Sets the acl_rules of this DSProducerDetails.


        :param acl_rules: The acl_rules of this DSProducerDetails.  # noqa: E501
        :type: list[str]
        """

        self._acl_rules = acl_rules

    @property
    def active(self):
        """Gets the active of this DSProducerDetails.  # noqa: E501


        :return: The active of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this DSProducerDetails.


        :param active: The active of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def admin_name(self):
        """Gets the admin_name of this DSProducerDetails.  # noqa: E501


        :return: The admin_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._admin_name

    @admin_name.setter
    def admin_name(self, admin_name):
        """Sets the admin_name of this DSProducerDetails.


        :param admin_name: The admin_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._admin_name = admin_name

    @property
    def admin_pwd(self):
        """Gets the admin_pwd of this DSProducerDetails.  # noqa: E501


        :return: The admin_pwd of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._admin_pwd

    @admin_pwd.setter
    def admin_pwd(self, admin_pwd):
        """Sets the admin_pwd of this DSProducerDetails.


        :param admin_pwd: The admin_pwd of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._admin_pwd = admin_pwd

    @property
    def admin_rotation_interval_days(self):
        """Gets the admin_rotation_interval_days of this DSProducerDetails.  # noqa: E501


        :return: The admin_rotation_interval_days of this DSProducerDetails.  # noqa: E501
        :rtype: int
        """
        return self._admin_rotation_interval_days

    @admin_rotation_interval_days.setter
    def admin_rotation_interval_days(self, admin_rotation_interval_days):
        """Sets the admin_rotation_interval_days of this DSProducerDetails.


        :param admin_rotation_interval_days: The admin_rotation_interval_days of this DSProducerDetails.  # noqa: E501
        :type: int
        """

        self._admin_rotation_interval_days = admin_rotation_interval_days

    @property
    def administrative_port(self):
        """Gets the administrative_port of this DSProducerDetails.  # noqa: E501


        :return: The administrative_port of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._administrative_port

    @administrative_port.setter
    def administrative_port(self, administrative_port):
        """Sets the administrative_port of this DSProducerDetails.


        :param administrative_port: The administrative_port of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._administrative_port = administrative_port

    @property
    def artifactory_admin_apikey(self):
        """Gets the artifactory_admin_apikey of this DSProducerDetails.  # noqa: E501


        :return: The artifactory_admin_apikey of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._artifactory_admin_apikey

    @artifactory_admin_apikey.setter
    def artifactory_admin_apikey(self, artifactory_admin_apikey):
        """Sets the artifactory_admin_apikey of this DSProducerDetails.


        :param artifactory_admin_apikey: The artifactory_admin_apikey of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._artifactory_admin_apikey = artifactory_admin_apikey

    @property
    def artifactory_admin_username(self):
        """Gets the artifactory_admin_username of this DSProducerDetails.  # noqa: E501


        :return: The artifactory_admin_username of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._artifactory_admin_username

    @artifactory_admin_username.setter
    def artifactory_admin_username(self, artifactory_admin_username):
        """Sets the artifactory_admin_username of this DSProducerDetails.


        :param artifactory_admin_username: The artifactory_admin_username of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._artifactory_admin_username = artifactory_admin_username

    @property
    def artifactory_base_url(self):
        """Gets the artifactory_base_url of this DSProducerDetails.  # noqa: E501


        :return: The artifactory_base_url of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._artifactory_base_url

    @artifactory_base_url.setter
    def artifactory_base_url(self, artifactory_base_url):
        """Sets the artifactory_base_url of this DSProducerDetails.


        :param artifactory_base_url: The artifactory_base_url of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._artifactory_base_url = artifactory_base_url

    @property
    def artifactory_token_audience(self):
        """Gets the artifactory_token_audience of this DSProducerDetails.  # noqa: E501


        :return: The artifactory_token_audience of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._artifactory_token_audience

    @artifactory_token_audience.setter
    def artifactory_token_audience(self, artifactory_token_audience):
        """Sets the artifactory_token_audience of this DSProducerDetails.


        :param artifactory_token_audience: The artifactory_token_audience of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._artifactory_token_audience = artifactory_token_audience

    @property
    def artifactory_token_scope(self):
        """Gets the artifactory_token_scope of this DSProducerDetails.  # noqa: E501


        :return: The artifactory_token_scope of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._artifactory_token_scope

    @artifactory_token_scope.setter
    def artifactory_token_scope(self, artifactory_token_scope):
        """Sets the artifactory_token_scope of this DSProducerDetails.


        :param artifactory_token_scope: The artifactory_token_scope of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._artifactory_token_scope = artifactory_token_scope

    @property
    def authorization_port(self):
        """Gets the authorization_port of this DSProducerDetails.  # noqa: E501


        :return: The authorization_port of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._authorization_port

    @authorization_port.setter
    def authorization_port(self, authorization_port):
        """Sets the authorization_port of this DSProducerDetails.


        :param authorization_port: The authorization_port of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._authorization_port = authorization_port

    @property
    def aws_access_key_id(self):
        """Gets the aws_access_key_id of this DSProducerDetails.  # noqa: E501


        :return: The aws_access_key_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._aws_access_key_id

    @aws_access_key_id.setter
    def aws_access_key_id(self, aws_access_key_id):
        """Sets the aws_access_key_id of this DSProducerDetails.


        :param aws_access_key_id: The aws_access_key_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._aws_access_key_id = aws_access_key_id

    @property
    def aws_access_mode(self):
        """Gets the aws_access_mode of this DSProducerDetails.  # noqa: E501


        :return: The aws_access_mode of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._aws_access_mode

    @aws_access_mode.setter
    def aws_access_mode(self, aws_access_mode):
        """Sets the aws_access_mode of this DSProducerDetails.


        :param aws_access_mode: The aws_access_mode of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._aws_access_mode = aws_access_mode

    @property
    def aws_region(self):
        """Gets the aws_region of this DSProducerDetails.  # noqa: E501


        :return: The aws_region of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """Sets the aws_region of this DSProducerDetails.


        :param aws_region: The aws_region of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._aws_region = aws_region

    @property
    def aws_role_arns(self):
        """Gets the aws_role_arns of this DSProducerDetails.  # noqa: E501


        :return: The aws_role_arns of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._aws_role_arns

    @aws_role_arns.setter
    def aws_role_arns(self, aws_role_arns):
        """Sets the aws_role_arns of this DSProducerDetails.


        :param aws_role_arns: The aws_role_arns of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._aws_role_arns = aws_role_arns

    @property
    def aws_secret_access_key(self):
        """Gets the aws_secret_access_key of this DSProducerDetails.  # noqa: E501


        :return: The aws_secret_access_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._aws_secret_access_key

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, aws_secret_access_key):
        """Sets the aws_secret_access_key of this DSProducerDetails.


        :param aws_secret_access_key: The aws_secret_access_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._aws_secret_access_key = aws_secret_access_key

    @property
    def aws_session_token(self):
        """Gets the aws_session_token of this DSProducerDetails.  # noqa: E501


        :return: The aws_session_token of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._aws_session_token

    @aws_session_token.setter
    def aws_session_token(self, aws_session_token):
        """Sets the aws_session_token of this DSProducerDetails.


        :param aws_session_token: The aws_session_token of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._aws_session_token = aws_session_token

    @property
    def aws_user_console_access(self):
        """Gets the aws_user_console_access of this DSProducerDetails.  # noqa: E501


        :return: The aws_user_console_access of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._aws_user_console_access

    @aws_user_console_access.setter
    def aws_user_console_access(self, aws_user_console_access):
        """Sets the aws_user_console_access of this DSProducerDetails.


        :param aws_user_console_access: The aws_user_console_access of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._aws_user_console_access = aws_user_console_access

    @property
    def aws_user_groups(self):
        """Gets the aws_user_groups of this DSProducerDetails.  # noqa: E501


        :return: The aws_user_groups of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._aws_user_groups

    @aws_user_groups.setter
    def aws_user_groups(self, aws_user_groups):
        """Sets the aws_user_groups of this DSProducerDetails.


        :param aws_user_groups: The aws_user_groups of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._aws_user_groups = aws_user_groups

    @property
    def aws_user_policies(self):
        """Gets the aws_user_policies of this DSProducerDetails.  # noqa: E501


        :return: The aws_user_policies of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._aws_user_policies

    @aws_user_policies.setter
    def aws_user_policies(self, aws_user_policies):
        """Sets the aws_user_policies of this DSProducerDetails.


        :param aws_user_policies: The aws_user_policies of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._aws_user_policies = aws_user_policies

    @property
    def aws_user_programmatic_access(self):
        """Gets the aws_user_programmatic_access of this DSProducerDetails.  # noqa: E501


        :return: The aws_user_programmatic_access of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._aws_user_programmatic_access

    @aws_user_programmatic_access.setter
    def aws_user_programmatic_access(self, aws_user_programmatic_access):
        """Sets the aws_user_programmatic_access of this DSProducerDetails.


        :param aws_user_programmatic_access: The aws_user_programmatic_access of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._aws_user_programmatic_access = aws_user_programmatic_access

    @property
    def azure_app_object_id(self):
        """Gets the azure_app_object_id of this DSProducerDetails.  # noqa: E501


        :return: The azure_app_object_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._azure_app_object_id

    @azure_app_object_id.setter
    def azure_app_object_id(self, azure_app_object_id):
        """Sets the azure_app_object_id of this DSProducerDetails.


        :param azure_app_object_id: The azure_app_object_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._azure_app_object_id = azure_app_object_id

    @property
    def azure_client_id(self):
        """Gets the azure_client_id of this DSProducerDetails.  # noqa: E501


        :return: The azure_client_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._azure_client_id

    @azure_client_id.setter
    def azure_client_id(self, azure_client_id):
        """Sets the azure_client_id of this DSProducerDetails.


        :param azure_client_id: The azure_client_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._azure_client_id = azure_client_id

    @property
    def azure_client_secret(self):
        """Gets the azure_client_secret of this DSProducerDetails.  # noqa: E501


        :return: The azure_client_secret of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._azure_client_secret

    @azure_client_secret.setter
    def azure_client_secret(self, azure_client_secret):
        """Sets the azure_client_secret of this DSProducerDetails.


        :param azure_client_secret: The azure_client_secret of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._azure_client_secret = azure_client_secret

    @property
    def azure_fixed_user_name_sub_claim_key(self):
        """Gets the azure_fixed_user_name_sub_claim_key of this DSProducerDetails.  # noqa: E501


        :return: The azure_fixed_user_name_sub_claim_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._azure_fixed_user_name_sub_claim_key

    @azure_fixed_user_name_sub_claim_key.setter
    def azure_fixed_user_name_sub_claim_key(self, azure_fixed_user_name_sub_claim_key):
        """Sets the azure_fixed_user_name_sub_claim_key of this DSProducerDetails.


        :param azure_fixed_user_name_sub_claim_key: The azure_fixed_user_name_sub_claim_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._azure_fixed_user_name_sub_claim_key = azure_fixed_user_name_sub_claim_key

    @property
    def azure_fixed_user_only(self):
        """Gets the azure_fixed_user_only of this DSProducerDetails.  # noqa: E501


        :return: The azure_fixed_user_only of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._azure_fixed_user_only

    @azure_fixed_user_only.setter
    def azure_fixed_user_only(self, azure_fixed_user_only):
        """Sets the azure_fixed_user_only of this DSProducerDetails.


        :param azure_fixed_user_only: The azure_fixed_user_only of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._azure_fixed_user_only = azure_fixed_user_only

    @property
    def azure_resource_group_name(self):
        """Gets the azure_resource_group_name of this DSProducerDetails.  # noqa: E501


        :return: The azure_resource_group_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._azure_resource_group_name

    @azure_resource_group_name.setter
    def azure_resource_group_name(self, azure_resource_group_name):
        """Sets the azure_resource_group_name of this DSProducerDetails.


        :param azure_resource_group_name: The azure_resource_group_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._azure_resource_group_name = azure_resource_group_name

    @property
    def azure_resource_name(self):
        """Gets the azure_resource_name of this DSProducerDetails.  # noqa: E501


        :return: The azure_resource_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._azure_resource_name

    @azure_resource_name.setter
    def azure_resource_name(self, azure_resource_name):
        """Sets the azure_resource_name of this DSProducerDetails.


        :param azure_resource_name: The azure_resource_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._azure_resource_name = azure_resource_name

    @property
    def azure_subscription_id(self):
        """Gets the azure_subscription_id of this DSProducerDetails.  # noqa: E501


        :return: The azure_subscription_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._azure_subscription_id

    @azure_subscription_id.setter
    def azure_subscription_id(self, azure_subscription_id):
        """Sets the azure_subscription_id of this DSProducerDetails.


        :param azure_subscription_id: The azure_subscription_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._azure_subscription_id = azure_subscription_id

    @property
    def azure_tenant_id(self):
        """Gets the azure_tenant_id of this DSProducerDetails.  # noqa: E501


        :return: The azure_tenant_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._azure_tenant_id

    @azure_tenant_id.setter
    def azure_tenant_id(self, azure_tenant_id):
        """Sets the azure_tenant_id of this DSProducerDetails.


        :param azure_tenant_id: The azure_tenant_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._azure_tenant_id = azure_tenant_id

    @property
    def azure_user_groups_obj_id(self):
        """Gets the azure_user_groups_obj_id of this DSProducerDetails.  # noqa: E501


        :return: The azure_user_groups_obj_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._azure_user_groups_obj_id

    @azure_user_groups_obj_id.setter
    def azure_user_groups_obj_id(self, azure_user_groups_obj_id):
        """Sets the azure_user_groups_obj_id of this DSProducerDetails.


        :param azure_user_groups_obj_id: The azure_user_groups_obj_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._azure_user_groups_obj_id = azure_user_groups_obj_id

    @property
    def azure_user_portal_access(self):
        """Gets the azure_user_portal_access of this DSProducerDetails.  # noqa: E501


        :return: The azure_user_portal_access of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._azure_user_portal_access

    @azure_user_portal_access.setter
    def azure_user_portal_access(self, azure_user_portal_access):
        """Sets the azure_user_portal_access of this DSProducerDetails.


        :param azure_user_portal_access: The azure_user_portal_access of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._azure_user_portal_access = azure_user_portal_access

    @property
    def azure_user_programmatic_access(self):
        """Gets the azure_user_programmatic_access of this DSProducerDetails.  # noqa: E501


        :return: The azure_user_programmatic_access of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._azure_user_programmatic_access

    @azure_user_programmatic_access.setter
    def azure_user_programmatic_access(self, azure_user_programmatic_access):
        """Sets the azure_user_programmatic_access of this DSProducerDetails.


        :param azure_user_programmatic_access: The azure_user_programmatic_access of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._azure_user_programmatic_access = azure_user_programmatic_access

    @property
    def azure_user_roles_template_id(self):
        """Gets the azure_user_roles_template_id of this DSProducerDetails.  # noqa: E501


        :return: The azure_user_roles_template_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._azure_user_roles_template_id

    @azure_user_roles_template_id.setter
    def azure_user_roles_template_id(self, azure_user_roles_template_id):
        """Sets the azure_user_roles_template_id of this DSProducerDetails.


        :param azure_user_roles_template_id: The azure_user_roles_template_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._azure_user_roles_template_id = azure_user_roles_template_id

    @property
    def cassandra_creation_statements(self):
        """Gets the cassandra_creation_statements of this DSProducerDetails.  # noqa: E501


        :return: The cassandra_creation_statements of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._cassandra_creation_statements

    @cassandra_creation_statements.setter
    def cassandra_creation_statements(self, cassandra_creation_statements):
        """Sets the cassandra_creation_statements of this DSProducerDetails.


        :param cassandra_creation_statements: The cassandra_creation_statements of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._cassandra_creation_statements = cassandra_creation_statements

    @property
    def chef_organizations(self):
        """Gets the chef_organizations of this DSProducerDetails.  # noqa: E501


        :return: The chef_organizations of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._chef_organizations

    @chef_organizations.setter
    def chef_organizations(self, chef_organizations):
        """Sets the chef_organizations of this DSProducerDetails.


        :param chef_organizations: The chef_organizations of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._chef_organizations = chef_organizations

    @property
    def chef_server_access_mode(self):
        """Gets the chef_server_access_mode of this DSProducerDetails.  # noqa: E501


        :return: The chef_server_access_mode of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._chef_server_access_mode

    @chef_server_access_mode.setter
    def chef_server_access_mode(self, chef_server_access_mode):
        """Sets the chef_server_access_mode of this DSProducerDetails.


        :param chef_server_access_mode: The chef_server_access_mode of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._chef_server_access_mode = chef_server_access_mode

    @property
    def chef_server_host_name(self):
        """Gets the chef_server_host_name of this DSProducerDetails.  # noqa: E501


        :return: The chef_server_host_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._chef_server_host_name

    @chef_server_host_name.setter
    def chef_server_host_name(self, chef_server_host_name):
        """Sets the chef_server_host_name of this DSProducerDetails.


        :param chef_server_host_name: The chef_server_host_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._chef_server_host_name = chef_server_host_name

    @property
    def chef_server_key(self):
        """Gets the chef_server_key of this DSProducerDetails.  # noqa: E501


        :return: The chef_server_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._chef_server_key

    @chef_server_key.setter
    def chef_server_key(self, chef_server_key):
        """Sets the chef_server_key of this DSProducerDetails.


        :param chef_server_key: The chef_server_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._chef_server_key = chef_server_key

    @property
    def chef_server_port(self):
        """Gets the chef_server_port of this DSProducerDetails.  # noqa: E501


        :return: The chef_server_port of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._chef_server_port

    @chef_server_port.setter
    def chef_server_port(self, chef_server_port):
        """Sets the chef_server_port of this DSProducerDetails.


        :param chef_server_port: The chef_server_port of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._chef_server_port = chef_server_port

    @property
    def chef_server_url(self):
        """Gets the chef_server_url of this DSProducerDetails.  # noqa: E501


        :return: The chef_server_url of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._chef_server_url

    @chef_server_url.setter
    def chef_server_url(self, chef_server_url):
        """Sets the chef_server_url of this DSProducerDetails.


        :param chef_server_url: The chef_server_url of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._chef_server_url = chef_server_url

    @property
    def chef_server_username(self):
        """Gets the chef_server_username of this DSProducerDetails.  # noqa: E501


        :return: The chef_server_username of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._chef_server_username

    @chef_server_username.setter
    def chef_server_username(self, chef_server_username):
        """Sets the chef_server_username of this DSProducerDetails.


        :param chef_server_username: The chef_server_username of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._chef_server_username = chef_server_username

    @property
    def chef_skip_ssl(self):
        """Gets the chef_skip_ssl of this DSProducerDetails.  # noqa: E501


        :return: The chef_skip_ssl of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._chef_skip_ssl

    @chef_skip_ssl.setter
    def chef_skip_ssl(self, chef_skip_ssl):
        """Sets the chef_skip_ssl of this DSProducerDetails.


        :param chef_skip_ssl: The chef_skip_ssl of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._chef_skip_ssl = chef_skip_ssl

    @property
    def client_authentication_type(self):
        """Gets the client_authentication_type of this DSProducerDetails.  # noqa: E501


        :return: The client_authentication_type of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._client_authentication_type

    @client_authentication_type.setter
    def client_authentication_type(self, client_authentication_type):
        """Sets the client_authentication_type of this DSProducerDetails.


        :param client_authentication_type: The client_authentication_type of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._client_authentication_type = client_authentication_type

    @property
    def cloud_service_provider(self):
        """Gets the cloud_service_provider of this DSProducerDetails.  # noqa: E501


        :return: The cloud_service_provider of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._cloud_service_provider

    @cloud_service_provider.setter
    def cloud_service_provider(self, cloud_service_provider):
        """Sets the cloud_service_provider of this DSProducerDetails.


        :param cloud_service_provider: The cloud_service_provider of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._cloud_service_provider = cloud_service_provider

    @property
    def connection_type(self):
        """Gets the connection_type of this DSProducerDetails.  # noqa: E501


        :return: The connection_type of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this DSProducerDetails.


        :param connection_type: The connection_type of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def create_sync_url(self):
        """Gets the create_sync_url of this DSProducerDetails.  # noqa: E501


        :return: The create_sync_url of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._create_sync_url

    @create_sync_url.setter
    def create_sync_url(self, create_sync_url):
        """Sets the create_sync_url of this DSProducerDetails.


        :param create_sync_url: The create_sync_url of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._create_sync_url = create_sync_url

    @property
    def db_client_id(self):
        """Gets the db_client_id of this DSProducerDetails.  # noqa: E501


        :return: The db_client_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_client_id

    @db_client_id.setter
    def db_client_id(self, db_client_id):
        """Sets the db_client_id of this DSProducerDetails.


        :param db_client_id: The db_client_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_client_id = db_client_id

    @property
    def db_client_secret(self):
        """Gets the db_client_secret of this DSProducerDetails.  # noqa: E501


        :return: The db_client_secret of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_client_secret

    @db_client_secret.setter
    def db_client_secret(self, db_client_secret):
        """Sets the db_client_secret of this DSProducerDetails.


        :param db_client_secret: The db_client_secret of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_client_secret = db_client_secret

    @property
    def db_host_name(self):
        """Gets the db_host_name of this DSProducerDetails.  # noqa: E501


        :return: The db_host_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_host_name

    @db_host_name.setter
    def db_host_name(self, db_host_name):
        """Sets the db_host_name of this DSProducerDetails.


        :param db_host_name: The db_host_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_host_name = db_host_name

    @property
    def db_isolation_level(self):
        """Gets the db_isolation_level of this DSProducerDetails.  # noqa: E501


        :return: The db_isolation_level of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_isolation_level

    @db_isolation_level.setter
    def db_isolation_level(self, db_isolation_level):
        """Sets the db_isolation_level of this DSProducerDetails.


        :param db_isolation_level: The db_isolation_level of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_isolation_level = db_isolation_level

    @property
    def db_max_idle_conns(self):
        """Gets the db_max_idle_conns of this DSProducerDetails.  # noqa: E501


        :return: The db_max_idle_conns of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_max_idle_conns

    @db_max_idle_conns.setter
    def db_max_idle_conns(self, db_max_idle_conns):
        """Sets the db_max_idle_conns of this DSProducerDetails.


        :param db_max_idle_conns: The db_max_idle_conns of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_max_idle_conns = db_max_idle_conns

    @property
    def db_max_open_conns(self):
        """Gets the db_max_open_conns of this DSProducerDetails.  # noqa: E501


        :return: The db_max_open_conns of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_max_open_conns

    @db_max_open_conns.setter
    def db_max_open_conns(self, db_max_open_conns):
        """Sets the db_max_open_conns of this DSProducerDetails.


        :param db_max_open_conns: The db_max_open_conns of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_max_open_conns = db_max_open_conns

    @property
    def db_name(self):
        """Gets the db_name of this DSProducerDetails.  # noqa: E501


        :return: The db_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this DSProducerDetails.


        :param db_name: The db_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_name = db_name

    @property
    def db_port(self):
        """Gets the db_port of this DSProducerDetails.  # noqa: E501


        :return: The db_port of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_port

    @db_port.setter
    def db_port(self, db_port):
        """Sets the db_port of this DSProducerDetails.


        :param db_port: The db_port of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_port = db_port

    @property
    def db_private_key(self):
        """Gets the db_private_key of this DSProducerDetails.  # noqa: E501

        (Optional) Private Key in PEM format  # noqa: E501

        :return: The db_private_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_private_key

    @db_private_key.setter
    def db_private_key(self, db_private_key):
        """Sets the db_private_key of this DSProducerDetails.

        (Optional) Private Key in PEM format  # noqa: E501

        :param db_private_key: The db_private_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_private_key = db_private_key

    @property
    def db_private_key_passphrase(self):
        """Gets the db_private_key_passphrase of this DSProducerDetails.  # noqa: E501


        :return: The db_private_key_passphrase of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_private_key_passphrase

    @db_private_key_passphrase.setter
    def db_private_key_passphrase(self, db_private_key_passphrase):
        """Sets the db_private_key_passphrase of this DSProducerDetails.


        :param db_private_key_passphrase: The db_private_key_passphrase of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_private_key_passphrase = db_private_key_passphrase

    @property
    def db_pwd(self):
        """Gets the db_pwd of this DSProducerDetails.  # noqa: E501


        :return: The db_pwd of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_pwd

    @db_pwd.setter
    def db_pwd(self, db_pwd):
        """Sets the db_pwd of this DSProducerDetails.


        :param db_pwd: The db_pwd of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_pwd = db_pwd

    @property
    def db_server_certificates(self):
        """Gets the db_server_certificates of this DSProducerDetails.  # noqa: E501

        (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host's root CA set.  # noqa: E501

        :return: The db_server_certificates of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_server_certificates

    @db_server_certificates.setter
    def db_server_certificates(self, db_server_certificates):
        """Sets the db_server_certificates of this DSProducerDetails.

        (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host's root CA set.  # noqa: E501

        :param db_server_certificates: The db_server_certificates of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_server_certificates = db_server_certificates

    @property
    def db_server_name(self):
        """Gets the db_server_name of this DSProducerDetails.  # noqa: E501

        (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client's handshake to support virtual hosting unless it is an IP address.  # noqa: E501

        :return: The db_server_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_server_name

    @db_server_name.setter
    def db_server_name(self, db_server_name):
        """Sets the db_server_name of this DSProducerDetails.

        (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client's handshake to support virtual hosting unless it is an IP address.  # noqa: E501

        :param db_server_name: The db_server_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_server_name = db_server_name

    @property
    def db_tenant_id(self):
        """Gets the db_tenant_id of this DSProducerDetails.  # noqa: E501


        :return: The db_tenant_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_tenant_id

    @db_tenant_id.setter
    def db_tenant_id(self, db_tenant_id):
        """Sets the db_tenant_id of this DSProducerDetails.


        :param db_tenant_id: The db_tenant_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_tenant_id = db_tenant_id

    @property
    def db_user_name(self):
        """Gets the db_user_name of this DSProducerDetails.  # noqa: E501


        :return: The db_user_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_user_name

    @db_user_name.setter
    def db_user_name(self, db_user_name):
        """Sets the db_user_name of this DSProducerDetails.


        :param db_user_name: The db_user_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._db_user_name = db_user_name

    @property
    def delete_protection(self):
        """Gets the delete_protection of this DSProducerDetails.  # noqa: E501


        :return: The delete_protection of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._delete_protection

    @delete_protection.setter
    def delete_protection(self, delete_protection):
        """Sets the delete_protection of this DSProducerDetails.


        :param delete_protection: The delete_protection of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._delete_protection = delete_protection

    @property
    def dynamic_secret_id(self):
        """Gets the dynamic_secret_id of this DSProducerDetails.  # noqa: E501


        :return: The dynamic_secret_id of this DSProducerDetails.  # noqa: E501
        :rtype: int
        """
        return self._dynamic_secret_id

    @dynamic_secret_id.setter
    def dynamic_secret_id(self, dynamic_secret_id):
        """Sets the dynamic_secret_id of this DSProducerDetails.


        :param dynamic_secret_id: The dynamic_secret_id of this DSProducerDetails.  # noqa: E501
        :type: int
        """

        self._dynamic_secret_id = dynamic_secret_id

    @property
    def dynamic_secret_key(self):
        """Gets the dynamic_secret_key of this DSProducerDetails.  # noqa: E501


        :return: The dynamic_secret_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_secret_key

    @dynamic_secret_key.setter
    def dynamic_secret_key(self, dynamic_secret_key):
        """Sets the dynamic_secret_key of this DSProducerDetails.


        :param dynamic_secret_key: The dynamic_secret_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._dynamic_secret_key = dynamic_secret_key

    @property
    def dynamic_secret_name(self):
        """Gets the dynamic_secret_name of this DSProducerDetails.  # noqa: E501


        :return: The dynamic_secret_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_secret_name

    @dynamic_secret_name.setter
    def dynamic_secret_name(self, dynamic_secret_name):
        """Sets the dynamic_secret_name of this DSProducerDetails.


        :param dynamic_secret_name: The dynamic_secret_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._dynamic_secret_name = dynamic_secret_name

    @property
    def dynamic_secret_type(self):
        """Gets the dynamic_secret_type of this DSProducerDetails.  # noqa: E501


        :return: The dynamic_secret_type of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_secret_type

    @dynamic_secret_type.setter
    def dynamic_secret_type(self, dynamic_secret_type):
        """Sets the dynamic_secret_type of this DSProducerDetails.


        :param dynamic_secret_type: The dynamic_secret_type of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._dynamic_secret_type = dynamic_secret_type

    @property
    def eks_access_key_id(self):
        """Gets the eks_access_key_id of this DSProducerDetails.  # noqa: E501


        :return: The eks_access_key_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_access_key_id

    @eks_access_key_id.setter
    def eks_access_key_id(self, eks_access_key_id):
        """Sets the eks_access_key_id of this DSProducerDetails.


        :param eks_access_key_id: The eks_access_key_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._eks_access_key_id = eks_access_key_id

    @property
    def eks_assume_role(self):
        """Gets the eks_assume_role of this DSProducerDetails.  # noqa: E501


        :return: The eks_assume_role of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_assume_role

    @eks_assume_role.setter
    def eks_assume_role(self, eks_assume_role):
        """Sets the eks_assume_role of this DSProducerDetails.


        :param eks_assume_role: The eks_assume_role of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._eks_assume_role = eks_assume_role

    @property
    def eks_cluster_ca_certificate(self):
        """Gets the eks_cluster_ca_certificate of this DSProducerDetails.  # noqa: E501


        :return: The eks_cluster_ca_certificate of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_cluster_ca_certificate

    @eks_cluster_ca_certificate.setter
    def eks_cluster_ca_certificate(self, eks_cluster_ca_certificate):
        """Sets the eks_cluster_ca_certificate of this DSProducerDetails.


        :param eks_cluster_ca_certificate: The eks_cluster_ca_certificate of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._eks_cluster_ca_certificate = eks_cluster_ca_certificate

    @property
    def eks_cluster_endpoint(self):
        """Gets the eks_cluster_endpoint of this DSProducerDetails.  # noqa: E501


        :return: The eks_cluster_endpoint of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_cluster_endpoint

    @eks_cluster_endpoint.setter
    def eks_cluster_endpoint(self, eks_cluster_endpoint):
        """Sets the eks_cluster_endpoint of this DSProducerDetails.


        :param eks_cluster_endpoint: The eks_cluster_endpoint of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._eks_cluster_endpoint = eks_cluster_endpoint

    @property
    def eks_cluster_name(self):
        """Gets the eks_cluster_name of this DSProducerDetails.  # noqa: E501


        :return: The eks_cluster_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_cluster_name

    @eks_cluster_name.setter
    def eks_cluster_name(self, eks_cluster_name):
        """Sets the eks_cluster_name of this DSProducerDetails.


        :param eks_cluster_name: The eks_cluster_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._eks_cluster_name = eks_cluster_name

    @property
    def eks_region(self):
        """Gets the eks_region of this DSProducerDetails.  # noqa: E501


        :return: The eks_region of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_region

    @eks_region.setter
    def eks_region(self, eks_region):
        """Sets the eks_region of this DSProducerDetails.


        :param eks_region: The eks_region of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._eks_region = eks_region

    @property
    def eks_secret_access_key(self):
        """Gets the eks_secret_access_key of this DSProducerDetails.  # noqa: E501


        :return: The eks_secret_access_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_secret_access_key

    @eks_secret_access_key.setter
    def eks_secret_access_key(self, eks_secret_access_key):
        """Sets the eks_secret_access_key of this DSProducerDetails.


        :param eks_secret_access_key: The eks_secret_access_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._eks_secret_access_key = eks_secret_access_key

    @property
    def enable_admin_rotation(self):
        """Gets the enable_admin_rotation of this DSProducerDetails.  # noqa: E501


        :return: The enable_admin_rotation of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._enable_admin_rotation

    @enable_admin_rotation.setter
    def enable_admin_rotation(self, enable_admin_rotation):
        """Sets the enable_admin_rotation of this DSProducerDetails.


        :param enable_admin_rotation: The enable_admin_rotation of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._enable_admin_rotation = enable_admin_rotation

    @property
    def enforce_replay_prevention(self):
        """Gets the enforce_replay_prevention of this DSProducerDetails.  # noqa: E501

        relevant for PRIVATE_KEY_JWT client authentication type  # noqa: E501

        :return: The enforce_replay_prevention of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_replay_prevention

    @enforce_replay_prevention.setter
    def enforce_replay_prevention(self, enforce_replay_prevention):
        """Sets the enforce_replay_prevention of this DSProducerDetails.

        relevant for PRIVATE_KEY_JWT client authentication type  # noqa: E501

        :param enforce_replay_prevention: The enforce_replay_prevention of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._enforce_replay_prevention = enforce_replay_prevention

    @property
    def externally_provided_user(self):
        """Gets the externally_provided_user of this DSProducerDetails.  # noqa: E501


        :return: The externally_provided_user of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._externally_provided_user

    @externally_provided_user.setter
    def externally_provided_user(self, externally_provided_user):
        """Sets the externally_provided_user of this DSProducerDetails.


        :param externally_provided_user: The externally_provided_user of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._externally_provided_user = externally_provided_user

    @property
    def failure_message(self):
        """Gets the failure_message of this DSProducerDetails.  # noqa: E501


        :return: The failure_message of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this DSProducerDetails.


        :param failure_message: The failure_message of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def fixed_user_only(self):
        """Gets the fixed_user_only of this DSProducerDetails.  # noqa: E501


        :return: The fixed_user_only of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._fixed_user_only

    @fixed_user_only.setter
    def fixed_user_only(self, fixed_user_only):
        """Sets the fixed_user_only of this DSProducerDetails.


        :param fixed_user_only: The fixed_user_only of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._fixed_user_only = fixed_user_only

    @property
    def gcp_key_algo(self):
        """Gets the gcp_key_algo of this DSProducerDetails.  # noqa: E501


        :return: The gcp_key_algo of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gcp_key_algo

    @gcp_key_algo.setter
    def gcp_key_algo(self, gcp_key_algo):
        """Sets the gcp_key_algo of this DSProducerDetails.


        :param gcp_key_algo: The gcp_key_algo of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gcp_key_algo = gcp_key_algo

    @property
    def gcp_role_bindings(self):
        """Gets the gcp_role_bindings of this DSProducerDetails.  # noqa: E501


        :return: The gcp_role_bindings of this DSProducerDetails.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._gcp_role_bindings

    @gcp_role_bindings.setter
    def gcp_role_bindings(self, gcp_role_bindings):
        """Sets the gcp_role_bindings of this DSProducerDetails.


        :param gcp_role_bindings: The gcp_role_bindings of this DSProducerDetails.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._gcp_role_bindings = gcp_role_bindings

    @property
    def gcp_service_account_email(self):
        """Gets the gcp_service_account_email of this DSProducerDetails.  # noqa: E501

        GCPServiceAccountEmail overrides the deprecated field from the target  # noqa: E501

        :return: The gcp_service_account_email of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gcp_service_account_email

    @gcp_service_account_email.setter
    def gcp_service_account_email(self, gcp_service_account_email):
        """Sets the gcp_service_account_email of this DSProducerDetails.

        GCPServiceAccountEmail overrides the deprecated field from the target  # noqa: E501

        :param gcp_service_account_email: The gcp_service_account_email of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gcp_service_account_email = gcp_service_account_email

    @property
    def gcp_service_account_key(self):
        """Gets the gcp_service_account_key of this DSProducerDetails.  # noqa: E501


        :return: The gcp_service_account_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gcp_service_account_key

    @gcp_service_account_key.setter
    def gcp_service_account_key(self, gcp_service_account_key):
        """Sets the gcp_service_account_key of this DSProducerDetails.


        :param gcp_service_account_key: The gcp_service_account_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gcp_service_account_key = gcp_service_account_key

    @property
    def gcp_service_account_key_base64(self):
        """Gets the gcp_service_account_key_base64 of this DSProducerDetails.  # noqa: E501


        :return: The gcp_service_account_key_base64 of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gcp_service_account_key_base64

    @gcp_service_account_key_base64.setter
    def gcp_service_account_key_base64(self, gcp_service_account_key_base64):
        """Sets the gcp_service_account_key_base64 of this DSProducerDetails.


        :param gcp_service_account_key_base64: The gcp_service_account_key_base64 of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gcp_service_account_key_base64 = gcp_service_account_key_base64

    @property
    def gcp_service_account_type(self):
        """Gets the gcp_service_account_type of this DSProducerDetails.  # noqa: E501


        :return: The gcp_service_account_type of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gcp_service_account_type

    @gcp_service_account_type.setter
    def gcp_service_account_type(self, gcp_service_account_type):
        """Sets the gcp_service_account_type of this DSProducerDetails.


        :param gcp_service_account_type: The gcp_service_account_type of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gcp_service_account_type = gcp_service_account_type

    @property
    def gcp_tmp_service_account_name(self):
        """Gets the gcp_tmp_service_account_name of this DSProducerDetails.  # noqa: E501


        :return: The gcp_tmp_service_account_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gcp_tmp_service_account_name

    @gcp_tmp_service_account_name.setter
    def gcp_tmp_service_account_name(self, gcp_tmp_service_account_name):
        """Sets the gcp_tmp_service_account_name of this DSProducerDetails.


        :param gcp_tmp_service_account_name: The gcp_tmp_service_account_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gcp_tmp_service_account_name = gcp_tmp_service_account_name

    @property
    def gcp_token_lifetime(self):
        """Gets the gcp_token_lifetime of this DSProducerDetails.  # noqa: E501


        :return: The gcp_token_lifetime of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gcp_token_lifetime

    @gcp_token_lifetime.setter
    def gcp_token_lifetime(self, gcp_token_lifetime):
        """Sets the gcp_token_lifetime of this DSProducerDetails.


        :param gcp_token_lifetime: The gcp_token_lifetime of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gcp_token_lifetime = gcp_token_lifetime

    @property
    def gcp_token_scope(self):
        """Gets the gcp_token_scope of this DSProducerDetails.  # noqa: E501


        :return: The gcp_token_scope of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gcp_token_scope

    @gcp_token_scope.setter
    def gcp_token_scope(self, gcp_token_scope):
        """Sets the gcp_token_scope of this DSProducerDetails.


        :param gcp_token_scope: The gcp_token_scope of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gcp_token_scope = gcp_token_scope

    @property
    def gcp_token_type(self):
        """Gets the gcp_token_type of this DSProducerDetails.  # noqa: E501


        :return: The gcp_token_type of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gcp_token_type

    @gcp_token_type.setter
    def gcp_token_type(self, gcp_token_type):
        """Sets the gcp_token_type of this DSProducerDetails.


        :param gcp_token_type: The gcp_token_type of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gcp_token_type = gcp_token_type

    @property
    def github_app_id(self):
        """Gets the github_app_id of this DSProducerDetails.  # noqa: E501


        :return: The github_app_id of this DSProducerDetails.  # noqa: E501
        :rtype: int
        """
        return self._github_app_id

    @github_app_id.setter
    def github_app_id(self, github_app_id):
        """Sets the github_app_id of this DSProducerDetails.


        :param github_app_id: The github_app_id of this DSProducerDetails.  # noqa: E501
        :type: int
        """

        self._github_app_id = github_app_id

    @property
    def github_app_private_key(self):
        """Gets the github_app_private_key of this DSProducerDetails.  # noqa: E501


        :return: The github_app_private_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._github_app_private_key

    @github_app_private_key.setter
    def github_app_private_key(self, github_app_private_key):
        """Sets the github_app_private_key of this DSProducerDetails.


        :param github_app_private_key: The github_app_private_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._github_app_private_key = github_app_private_key

    @property
    def github_base_url(self):
        """Gets the github_base_url of this DSProducerDetails.  # noqa: E501


        :return: The github_base_url of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._github_base_url

    @github_base_url.setter
    def github_base_url(self, github_base_url):
        """Sets the github_base_url of this DSProducerDetails.


        :param github_base_url: The github_base_url of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._github_base_url = github_base_url

    @property
    def github_installation_id(self):
        """Gets the github_installation_id of this DSProducerDetails.  # noqa: E501


        :return: The github_installation_id of this DSProducerDetails.  # noqa: E501
        :rtype: int
        """
        return self._github_installation_id

    @github_installation_id.setter
    def github_installation_id(self, github_installation_id):
        """Sets the github_installation_id of this DSProducerDetails.


        :param github_installation_id: The github_installation_id of this DSProducerDetails.  # noqa: E501
        :type: int
        """

        self._github_installation_id = github_installation_id

    @property
    def github_installation_token_permissions(self):
        """Gets the github_installation_token_permissions of this DSProducerDetails.  # noqa: E501


        :return: The github_installation_token_permissions of this DSProducerDetails.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._github_installation_token_permissions

    @github_installation_token_permissions.setter
    def github_installation_token_permissions(self, github_installation_token_permissions):
        """Sets the github_installation_token_permissions of this DSProducerDetails.


        :param github_installation_token_permissions: The github_installation_token_permissions of this DSProducerDetails.  # noqa: E501
        :type: dict(str, str)
        """

        self._github_installation_token_permissions = github_installation_token_permissions

    @property
    def github_installation_token_repositories(self):
        """Gets the github_installation_token_repositories of this DSProducerDetails.  # noqa: E501


        :return: The github_installation_token_repositories of this DSProducerDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._github_installation_token_repositories

    @github_installation_token_repositories.setter
    def github_installation_token_repositories(self, github_installation_token_repositories):
        """Sets the github_installation_token_repositories of this DSProducerDetails.


        :param github_installation_token_repositories: The github_installation_token_repositories of this DSProducerDetails.  # noqa: E501
        :type: list[str]
        """

        self._github_installation_token_repositories = github_installation_token_repositories

    @property
    def github_installation_token_repositories_ids(self):
        """Gets the github_installation_token_repositories_ids of this DSProducerDetails.  # noqa: E501


        :return: The github_installation_token_repositories_ids of this DSProducerDetails.  # noqa: E501
        :rtype: list[int]
        """
        return self._github_installation_token_repositories_ids

    @github_installation_token_repositories_ids.setter
    def github_installation_token_repositories_ids(self, github_installation_token_repositories_ids):
        """Sets the github_installation_token_repositories_ids of this DSProducerDetails.


        :param github_installation_token_repositories_ids: The github_installation_token_repositories_ids of this DSProducerDetails.  # noqa: E501
        :type: list[int]
        """

        self._github_installation_token_repositories_ids = github_installation_token_repositories_ids

    @property
    def github_repository_path(self):
        """Gets the github_repository_path of this DSProducerDetails.  # noqa: E501


        :return: The github_repository_path of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._github_repository_path

    @github_repository_path.setter
    def github_repository_path(self, github_repository_path):
        """Sets the github_repository_path of this DSProducerDetails.


        :param github_repository_path: The github_repository_path of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._github_repository_path = github_repository_path

    @property
    def gke_cluster_ca_certificate(self):
        """Gets the gke_cluster_ca_certificate of this DSProducerDetails.  # noqa: E501


        :return: The gke_cluster_ca_certificate of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gke_cluster_ca_certificate

    @gke_cluster_ca_certificate.setter
    def gke_cluster_ca_certificate(self, gke_cluster_ca_certificate):
        """Sets the gke_cluster_ca_certificate of this DSProducerDetails.


        :param gke_cluster_ca_certificate: The gke_cluster_ca_certificate of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gke_cluster_ca_certificate = gke_cluster_ca_certificate

    @property
    def gke_cluster_endpoint(self):
        """Gets the gke_cluster_endpoint of this DSProducerDetails.  # noqa: E501


        :return: The gke_cluster_endpoint of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gke_cluster_endpoint

    @gke_cluster_endpoint.setter
    def gke_cluster_endpoint(self, gke_cluster_endpoint):
        """Sets the gke_cluster_endpoint of this DSProducerDetails.


        :param gke_cluster_endpoint: The gke_cluster_endpoint of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gke_cluster_endpoint = gke_cluster_endpoint

    @property
    def gke_cluster_name(self):
        """Gets the gke_cluster_name of this DSProducerDetails.  # noqa: E501


        :return: The gke_cluster_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gke_cluster_name

    @gke_cluster_name.setter
    def gke_cluster_name(self, gke_cluster_name):
        """Sets the gke_cluster_name of this DSProducerDetails.


        :param gke_cluster_name: The gke_cluster_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gke_cluster_name = gke_cluster_name

    @property
    def gke_service_account_key(self):
        """Gets the gke_service_account_key of this DSProducerDetails.  # noqa: E501


        :return: The gke_service_account_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gke_service_account_key

    @gke_service_account_key.setter
    def gke_service_account_key(self, gke_service_account_key):
        """Sets the gke_service_account_key of this DSProducerDetails.


        :param gke_service_account_key: The gke_service_account_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gke_service_account_key = gke_service_account_key

    @property
    def gke_service_account_name(self):
        """Gets the gke_service_account_name of this DSProducerDetails.  # noqa: E501


        :return: The gke_service_account_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._gke_service_account_name

    @gke_service_account_name.setter
    def gke_service_account_name(self, gke_service_account_name):
        """Sets the gke_service_account_name of this DSProducerDetails.


        :param gke_service_account_name: The gke_service_account_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._gke_service_account_name = gke_service_account_name

    @property
    def grant_types(self):
        """Gets the grant_types of this DSProducerDetails.  # noqa: E501


        :return: The grant_types of this DSProducerDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """Sets the grant_types of this DSProducerDetails.


        :param grant_types: The grant_types of this DSProducerDetails.  # noqa: E501
        :type: list[str]
        """

        self._grant_types = grant_types

    @property
    def groups(self):
        """Gets the groups of this DSProducerDetails.  # noqa: E501


        :return: The groups of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this DSProducerDetails.


        :param groups: The groups of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._groups = groups

    @property
    def hanadb_creation_statements(self):
        """Gets the hanadb_creation_statements of this DSProducerDetails.  # noqa: E501


        :return: The hanadb_creation_statements of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._hanadb_creation_statements

    @hanadb_creation_statements.setter
    def hanadb_creation_statements(self, hanadb_creation_statements):
        """Sets the hanadb_creation_statements of this DSProducerDetails.


        :param hanadb_creation_statements: The hanadb_creation_statements of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._hanadb_creation_statements = hanadb_creation_statements

    @property
    def hanadb_revocation_statements(self):
        """Gets the hanadb_revocation_statements of this DSProducerDetails.  # noqa: E501


        :return: The hanadb_revocation_statements of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._hanadb_revocation_statements

    @hanadb_revocation_statements.setter
    def hanadb_revocation_statements(self, hanadb_revocation_statements):
        """Sets the hanadb_revocation_statements of this DSProducerDetails.


        :param hanadb_revocation_statements: The hanadb_revocation_statements of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._hanadb_revocation_statements = hanadb_revocation_statements

    @property
    def host_name(self):
        """Gets the host_name of this DSProducerDetails.  # noqa: E501


        :return: The host_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this DSProducerDetails.


        :param host_name: The host_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._host_name = host_name

    @property
    def host_port(self):
        """Gets the host_port of this DSProducerDetails.  # noqa: E501


        :return: The host_port of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._host_port

    @host_port.setter
    def host_port(self, host_port):
        """Sets the host_port of this DSProducerDetails.


        :param host_port: The host_port of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._host_port = host_port

    @property
    def implementation_type(self):
        """Gets the implementation_type of this DSProducerDetails.  # noqa: E501


        :return: The implementation_type of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._implementation_type

    @implementation_type.setter
    def implementation_type(self, implementation_type):
        """Sets the implementation_type of this DSProducerDetails.


        :param implementation_type: The implementation_type of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._implementation_type = implementation_type

    @property
    def is_fixed_user(self):
        """Gets the is_fixed_user of this DSProducerDetails.  # noqa: E501


        :return: The is_fixed_user of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._is_fixed_user

    @is_fixed_user.setter
    def is_fixed_user(self, is_fixed_user):
        """Sets the is_fixed_user of this DSProducerDetails.


        :param is_fixed_user: The is_fixed_user of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._is_fixed_user = is_fixed_user

    @property
    def issuer(self):
        """Gets the issuer of this DSProducerDetails.  # noqa: E501

        relevant for CLIENT_TLS_CERTIFICATE client authentication type  # noqa: E501

        :return: The issuer of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this DSProducerDetails.

        relevant for CLIENT_TLS_CERTIFICATE client authentication type  # noqa: E501

        :param issuer: The issuer of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def item_targets_assoc(self):
        """Gets the item_targets_assoc of this DSProducerDetails.  # noqa: E501


        :return: The item_targets_assoc of this DSProducerDetails.  # noqa: E501
        :rtype: list[ItemTargetAssociation]
        """
        return self._item_targets_assoc

    @item_targets_assoc.setter
    def item_targets_assoc(self, item_targets_assoc):
        """Sets the item_targets_assoc of this DSProducerDetails.


        :param item_targets_assoc: The item_targets_assoc of this DSProducerDetails.  # noqa: E501
        :type: list[ItemTargetAssociation]
        """

        self._item_targets_assoc = item_targets_assoc

    @property
    def jwks(self):
        """Gets the jwks of this DSProducerDetails.  # noqa: E501


        :return: The jwks of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._jwks

    @jwks.setter
    def jwks(self, jwks):
        """Sets the jwks of this DSProducerDetails.


        :param jwks: The jwks of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._jwks = jwks

    @property
    def jwks_url(self):
        """Gets the jwks_url of this DSProducerDetails.  # noqa: E501


        :return: The jwks_url of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._jwks_url

    @jwks_url.setter
    def jwks_url(self, jwks_url):
        """Sets the jwks_url of this DSProducerDetails.


        :param jwks_url: The jwks_url of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._jwks_url = jwks_url

    @property
    def k8s_allowed_namespaces(self):
        """Gets the k8s_allowed_namespaces of this DSProducerDetails.  # noqa: E501

        comma-separated list of allowed namespaces. Can hold just * which signifies that any namespace is allowed  # noqa: E501

        :return: The k8s_allowed_namespaces of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_allowed_namespaces

    @k8s_allowed_namespaces.setter
    def k8s_allowed_namespaces(self, k8s_allowed_namespaces):
        """Sets the k8s_allowed_namespaces of this DSProducerDetails.

        comma-separated list of allowed namespaces. Can hold just * which signifies that any namespace is allowed  # noqa: E501

        :param k8s_allowed_namespaces: The k8s_allowed_namespaces of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._k8s_allowed_namespaces = k8s_allowed_namespaces

    @property
    def k8s_auth_type(self):
        """Gets the k8s_auth_type of this DSProducerDetails.  # noqa: E501


        :return: The k8s_auth_type of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_auth_type

    @k8s_auth_type.setter
    def k8s_auth_type(self, k8s_auth_type):
        """Sets the k8s_auth_type of this DSProducerDetails.


        :param k8s_auth_type: The k8s_auth_type of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._k8s_auth_type = k8s_auth_type

    @property
    def k8s_bearer_token(self):
        """Gets the k8s_bearer_token of this DSProducerDetails.  # noqa: E501


        :return: The k8s_bearer_token of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_bearer_token

    @k8s_bearer_token.setter
    def k8s_bearer_token(self, k8s_bearer_token):
        """Sets the k8s_bearer_token of this DSProducerDetails.


        :param k8s_bearer_token: The k8s_bearer_token of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._k8s_bearer_token = k8s_bearer_token

    @property
    def k8s_client_cert_data(self):
        """Gets the k8s_client_cert_data of this DSProducerDetails.  # noqa: E501

        For K8s Client certificates authentication  # noqa: E501

        :return: The k8s_client_cert_data of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_client_cert_data

    @k8s_client_cert_data.setter
    def k8s_client_cert_data(self, k8s_client_cert_data):
        """Sets the k8s_client_cert_data of this DSProducerDetails.

        For K8s Client certificates authentication  # noqa: E501

        :param k8s_client_cert_data: The k8s_client_cert_data of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._k8s_client_cert_data = k8s_client_cert_data

    @property
    def k8s_client_key_data(self):
        """Gets the k8s_client_key_data of this DSProducerDetails.  # noqa: E501


        :return: The k8s_client_key_data of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_client_key_data

    @k8s_client_key_data.setter
    def k8s_client_key_data(self, k8s_client_key_data):
        """Sets the k8s_client_key_data of this DSProducerDetails.


        :param k8s_client_key_data: The k8s_client_key_data of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._k8s_client_key_data = k8s_client_key_data

    @property
    def k8s_cluster_ca_certificate(self):
        """Gets the k8s_cluster_ca_certificate of this DSProducerDetails.  # noqa: E501


        :return: The k8s_cluster_ca_certificate of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_cluster_ca_certificate

    @k8s_cluster_ca_certificate.setter
    def k8s_cluster_ca_certificate(self, k8s_cluster_ca_certificate):
        """Sets the k8s_cluster_ca_certificate of this DSProducerDetails.


        :param k8s_cluster_ca_certificate: The k8s_cluster_ca_certificate of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._k8s_cluster_ca_certificate = k8s_cluster_ca_certificate

    @property
    def k8s_cluster_endpoint(self):
        """Gets the k8s_cluster_endpoint of this DSProducerDetails.  # noqa: E501


        :return: The k8s_cluster_endpoint of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_cluster_endpoint

    @k8s_cluster_endpoint.setter
    def k8s_cluster_endpoint(self, k8s_cluster_endpoint):
        """Sets the k8s_cluster_endpoint of this DSProducerDetails.


        :param k8s_cluster_endpoint: The k8s_cluster_endpoint of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._k8s_cluster_endpoint = k8s_cluster_endpoint

    @property
    def k8s_dynamic_mode(self):
        """Gets the k8s_dynamic_mode of this DSProducerDetails.  # noqa: E501

        when native k8s is in dynamic mode, user can define allowed namespaces, K8sServiceAccount doesn't exist from the start and will only be created at time of getting dynamic secret value By default dynamic mode is false and producer behaves like it did before  # noqa: E501

        :return: The k8s_dynamic_mode of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._k8s_dynamic_mode

    @k8s_dynamic_mode.setter
    def k8s_dynamic_mode(self, k8s_dynamic_mode):
        """Sets the k8s_dynamic_mode of this DSProducerDetails.

        when native k8s is in dynamic mode, user can define allowed namespaces, K8sServiceAccount doesn't exist from the start and will only be created at time of getting dynamic secret value By default dynamic mode is false and producer behaves like it did before  # noqa: E501

        :param k8s_dynamic_mode: The k8s_dynamic_mode of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._k8s_dynamic_mode = k8s_dynamic_mode

    @property
    def k8s_multiple_doc_yaml_temp_definition(self):
        """Gets the k8s_multiple_doc_yaml_temp_definition of this DSProducerDetails.  # noqa: E501

        Yaml definition for creation of temporary objects. Field that can hold multiple docs from which following will be extracted: ServiceAccount, Role/ClusterRole and RoleBinding/ClusterRoleBinding. If ServiceAccount not specified - it will be generated automatically  # noqa: E501

        :return: The k8s_multiple_doc_yaml_temp_definition of this DSProducerDetails.  # noqa: E501
        :rtype: list[int]
        """
        return self._k8s_multiple_doc_yaml_temp_definition

    @k8s_multiple_doc_yaml_temp_definition.setter
    def k8s_multiple_doc_yaml_temp_definition(self, k8s_multiple_doc_yaml_temp_definition):
        """Sets the k8s_multiple_doc_yaml_temp_definition of this DSProducerDetails.

        Yaml definition for creation of temporary objects. Field that can hold multiple docs from which following will be extracted: ServiceAccount, Role/ClusterRole and RoleBinding/ClusterRoleBinding. If ServiceAccount not specified - it will be generated automatically  # noqa: E501

        :param k8s_multiple_doc_yaml_temp_definition: The k8s_multiple_doc_yaml_temp_definition of this DSProducerDetails.  # noqa: E501
        :type: list[int]
        """

        self._k8s_multiple_doc_yaml_temp_definition = k8s_multiple_doc_yaml_temp_definition

    @property
    def k8s_namespace(self):
        """Gets the k8s_namespace of this DSProducerDetails.  # noqa: E501


        :return: The k8s_namespace of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_namespace

    @k8s_namespace.setter
    def k8s_namespace(self, k8s_namespace):
        """Sets the k8s_namespace of this DSProducerDetails.


        :param k8s_namespace: The k8s_namespace of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._k8s_namespace = k8s_namespace

    @property
    def k8s_role_name(self):
        """Gets the k8s_role_name of this DSProducerDetails.  # noqa: E501

        Name of the pre-existing Role or ClusterRole to bind a generated service account to.  # noqa: E501

        :return: The k8s_role_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_role_name

    @k8s_role_name.setter
    def k8s_role_name(self, k8s_role_name):
        """Sets the k8s_role_name of this DSProducerDetails.

        Name of the pre-existing Role or ClusterRole to bind a generated service account to.  # noqa: E501

        :param k8s_role_name: The k8s_role_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._k8s_role_name = k8s_role_name

    @property
    def k8s_role_type(self):
        """Gets the k8s_role_type of this DSProducerDetails.  # noqa: E501


        :return: The k8s_role_type of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_role_type

    @k8s_role_type.setter
    def k8s_role_type(self, k8s_role_type):
        """Sets the k8s_role_type of this DSProducerDetails.


        :param k8s_role_type: The k8s_role_type of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._k8s_role_type = k8s_role_type

    @property
    def k8s_service_account(self):
        """Gets the k8s_service_account of this DSProducerDetails.  # noqa: E501


        :return: The k8s_service_account of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_service_account

    @k8s_service_account.setter
    def k8s_service_account(self, k8s_service_account):
        """Sets the k8s_service_account of this DSProducerDetails.


        :param k8s_service_account: The k8s_service_account of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._k8s_service_account = k8s_service_account

    @property
    def last_admin_rotation(self):
        """Gets the last_admin_rotation of this DSProducerDetails.  # noqa: E501


        :return: The last_admin_rotation of this DSProducerDetails.  # noqa: E501
        :rtype: int
        """
        return self._last_admin_rotation

    @last_admin_rotation.setter
    def last_admin_rotation(self, last_admin_rotation):
        """Sets the last_admin_rotation of this DSProducerDetails.


        :param last_admin_rotation: The last_admin_rotation of this DSProducerDetails.  # noqa: E501
        :type: int
        """

        self._last_admin_rotation = last_admin_rotation

    @property
    def ldap_audience(self):
        """Gets the ldap_audience of this DSProducerDetails.  # noqa: E501


        :return: The ldap_audience of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_audience

    @ldap_audience.setter
    def ldap_audience(self, ldap_audience):
        """Sets the ldap_audience of this DSProducerDetails.


        :param ldap_audience: The ldap_audience of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._ldap_audience = ldap_audience

    @property
    def ldap_bind_dn(self):
        """Gets the ldap_bind_dn of this DSProducerDetails.  # noqa: E501


        :return: The ldap_bind_dn of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_bind_dn

    @ldap_bind_dn.setter
    def ldap_bind_dn(self, ldap_bind_dn):
        """Sets the ldap_bind_dn of this DSProducerDetails.


        :param ldap_bind_dn: The ldap_bind_dn of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._ldap_bind_dn = ldap_bind_dn

    @property
    def ldap_bind_password(self):
        """Gets the ldap_bind_password of this DSProducerDetails.  # noqa: E501


        :return: The ldap_bind_password of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_bind_password

    @ldap_bind_password.setter
    def ldap_bind_password(self, ldap_bind_password):
        """Sets the ldap_bind_password of this DSProducerDetails.


        :param ldap_bind_password: The ldap_bind_password of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._ldap_bind_password = ldap_bind_password

    @property
    def ldap_certificate(self):
        """Gets the ldap_certificate of this DSProducerDetails.  # noqa: E501


        :return: The ldap_certificate of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_certificate

    @ldap_certificate.setter
    def ldap_certificate(self, ldap_certificate):
        """Sets the ldap_certificate of this DSProducerDetails.


        :param ldap_certificate: The ldap_certificate of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._ldap_certificate = ldap_certificate

    @property
    def ldap_group_dn(self):
        """Gets the ldap_group_dn of this DSProducerDetails.  # noqa: E501


        :return: The ldap_group_dn of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_group_dn

    @ldap_group_dn.setter
    def ldap_group_dn(self, ldap_group_dn):
        """Sets the ldap_group_dn of this DSProducerDetails.


        :param ldap_group_dn: The ldap_group_dn of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._ldap_group_dn = ldap_group_dn

    @property
    def ldap_token_expiration(self):
        """Gets the ldap_token_expiration of this DSProducerDetails.  # noqa: E501


        :return: The ldap_token_expiration of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_token_expiration

    @ldap_token_expiration.setter
    def ldap_token_expiration(self, ldap_token_expiration):
        """Sets the ldap_token_expiration of this DSProducerDetails.


        :param ldap_token_expiration: The ldap_token_expiration of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._ldap_token_expiration = ldap_token_expiration

    @property
    def ldap_url(self):
        """Gets the ldap_url of this DSProducerDetails.  # noqa: E501


        :return: The ldap_url of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_url

    @ldap_url.setter
    def ldap_url(self, ldap_url):
        """Sets the ldap_url of this DSProducerDetails.


        :param ldap_url: The ldap_url of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._ldap_url = ldap_url

    @property
    def ldap_user_attr(self):
        """Gets the ldap_user_attr of this DSProducerDetails.  # noqa: E501


        :return: The ldap_user_attr of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_user_attr

    @ldap_user_attr.setter
    def ldap_user_attr(self, ldap_user_attr):
        """Sets the ldap_user_attr of this DSProducerDetails.


        :param ldap_user_attr: The ldap_user_attr of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._ldap_user_attr = ldap_user_attr

    @property
    def ldap_user_dn(self):
        """Gets the ldap_user_dn of this DSProducerDetails.  # noqa: E501


        :return: The ldap_user_dn of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_user_dn

    @ldap_user_dn.setter
    def ldap_user_dn(self, ldap_user_dn):
        """Sets the ldap_user_dn of this DSProducerDetails.


        :param ldap_user_dn: The ldap_user_dn of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._ldap_user_dn = ldap_user_dn

    @property
    def metadata(self):
        """Gets the metadata of this DSProducerDetails.  # noqa: E501


        :return: The metadata of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DSProducerDetails.


        :param metadata: The metadata of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._metadata = metadata

    @property
    def mongodb_atlas_api_private_key(self):
        """Gets the mongodb_atlas_api_private_key of this DSProducerDetails.  # noqa: E501


        :return: The mongodb_atlas_api_private_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_atlas_api_private_key

    @mongodb_atlas_api_private_key.setter
    def mongodb_atlas_api_private_key(self, mongodb_atlas_api_private_key):
        """Sets the mongodb_atlas_api_private_key of this DSProducerDetails.


        :param mongodb_atlas_api_private_key: The mongodb_atlas_api_private_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_atlas_api_private_key = mongodb_atlas_api_private_key

    @property
    def mongodb_atlas_api_public_key(self):
        """Gets the mongodb_atlas_api_public_key of this DSProducerDetails.  # noqa: E501


        :return: The mongodb_atlas_api_public_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_atlas_api_public_key

    @mongodb_atlas_api_public_key.setter
    def mongodb_atlas_api_public_key(self, mongodb_atlas_api_public_key):
        """Sets the mongodb_atlas_api_public_key of this DSProducerDetails.


        :param mongodb_atlas_api_public_key: The mongodb_atlas_api_public_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_atlas_api_public_key = mongodb_atlas_api_public_key

    @property
    def mongodb_atlas_project_id(self):
        """Gets the mongodb_atlas_project_id of this DSProducerDetails.  # noqa: E501

        mongodb atlas fields  # noqa: E501

        :return: The mongodb_atlas_project_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_atlas_project_id

    @mongodb_atlas_project_id.setter
    def mongodb_atlas_project_id(self, mongodb_atlas_project_id):
        """Sets the mongodb_atlas_project_id of this DSProducerDetails.

        mongodb atlas fields  # noqa: E501

        :param mongodb_atlas_project_id: The mongodb_atlas_project_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_atlas_project_id = mongodb_atlas_project_id

    @property
    def mongodb_custom_data(self):
        """Gets the mongodb_custom_data of this DSProducerDetails.  # noqa: E501


        :return: The mongodb_custom_data of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_custom_data

    @mongodb_custom_data.setter
    def mongodb_custom_data(self, mongodb_custom_data):
        """Sets the mongodb_custom_data of this DSProducerDetails.


        :param mongodb_custom_data: The mongodb_custom_data of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_custom_data = mongodb_custom_data

    @property
    def mongodb_db_name(self):
        """Gets the mongodb_db_name of this DSProducerDetails.  # noqa: E501

        common fields  # noqa: E501

        :return: The mongodb_db_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_db_name

    @mongodb_db_name.setter
    def mongodb_db_name(self, mongodb_db_name):
        """Sets the mongodb_db_name of this DSProducerDetails.

        common fields  # noqa: E501

        :param mongodb_db_name: The mongodb_db_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_db_name = mongodb_db_name

    @property
    def mongodb_default_auth_db(self):
        """Gets the mongodb_default_auth_db of this DSProducerDetails.  # noqa: E501


        :return: The mongodb_default_auth_db of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_default_auth_db

    @mongodb_default_auth_db.setter
    def mongodb_default_auth_db(self, mongodb_default_auth_db):
        """Sets the mongodb_default_auth_db of this DSProducerDetails.


        :param mongodb_default_auth_db: The mongodb_default_auth_db of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_default_auth_db = mongodb_default_auth_db

    @property
    def mongodb_host_port(self):
        """Gets the mongodb_host_port of this DSProducerDetails.  # noqa: E501


        :return: The mongodb_host_port of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_host_port

    @mongodb_host_port.setter
    def mongodb_host_port(self, mongodb_host_port):
        """Sets the mongodb_host_port of this DSProducerDetails.


        :param mongodb_host_port: The mongodb_host_port of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_host_port = mongodb_host_port

    @property
    def mongodb_is_atlas(self):
        """Gets the mongodb_is_atlas of this DSProducerDetails.  # noqa: E501


        :return: The mongodb_is_atlas of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._mongodb_is_atlas

    @mongodb_is_atlas.setter
    def mongodb_is_atlas(self, mongodb_is_atlas):
        """Sets the mongodb_is_atlas of this DSProducerDetails.


        :param mongodb_is_atlas: The mongodb_is_atlas of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._mongodb_is_atlas = mongodb_is_atlas

    @property
    def mongodb_password(self):
        """Gets the mongodb_password of this DSProducerDetails.  # noqa: E501


        :return: The mongodb_password of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_password

    @mongodb_password.setter
    def mongodb_password(self, mongodb_password):
        """Sets the mongodb_password of this DSProducerDetails.


        :param mongodb_password: The mongodb_password of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_password = mongodb_password

    @property
    def mongodb_roles(self):
        """Gets the mongodb_roles of this DSProducerDetails.  # noqa: E501

        common fields  # noqa: E501

        :return: The mongodb_roles of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_roles

    @mongodb_roles.setter
    def mongodb_roles(self, mongodb_roles):
        """Sets the mongodb_roles of this DSProducerDetails.

        common fields  # noqa: E501

        :param mongodb_roles: The mongodb_roles of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_roles = mongodb_roles

    @property
    def mongodb_uri_connection(self):
        """Gets the mongodb_uri_connection of this DSProducerDetails.  # noqa: E501

        mongodb fields  # noqa: E501

        :return: The mongodb_uri_connection of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_uri_connection

    @mongodb_uri_connection.setter
    def mongodb_uri_connection(self, mongodb_uri_connection):
        """Sets the mongodb_uri_connection of this DSProducerDetails.

        mongodb fields  # noqa: E501

        :param mongodb_uri_connection: The mongodb_uri_connection of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_uri_connection = mongodb_uri_connection

    @property
    def mongodb_uri_options(self):
        """Gets the mongodb_uri_options of this DSProducerDetails.  # noqa: E501


        :return: The mongodb_uri_options of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_uri_options

    @mongodb_uri_options.setter
    def mongodb_uri_options(self, mongodb_uri_options):
        """Sets the mongodb_uri_options of this DSProducerDetails.


        :param mongodb_uri_options: The mongodb_uri_options of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_uri_options = mongodb_uri_options

    @property
    def mongodb_username(self):
        """Gets the mongodb_username of this DSProducerDetails.  # noqa: E501


        :return: The mongodb_username of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_username

    @mongodb_username.setter
    def mongodb_username(self, mongodb_username):
        """Sets the mongodb_username of this DSProducerDetails.


        :param mongodb_username: The mongodb_username of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mongodb_username = mongodb_username

    @property
    def mssql_creation_statements(self):
        """Gets the mssql_creation_statements of this DSProducerDetails.  # noqa: E501


        :return: The mssql_creation_statements of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mssql_creation_statements

    @mssql_creation_statements.setter
    def mssql_creation_statements(self, mssql_creation_statements):
        """Sets the mssql_creation_statements of this DSProducerDetails.


        :param mssql_creation_statements: The mssql_creation_statements of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mssql_creation_statements = mssql_creation_statements

    @property
    def mssql_revocation_statements(self):
        """Gets the mssql_revocation_statements of this DSProducerDetails.  # noqa: E501


        :return: The mssql_revocation_statements of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mssql_revocation_statements

    @mssql_revocation_statements.setter
    def mssql_revocation_statements(self, mssql_revocation_statements):
        """Sets the mssql_revocation_statements of this DSProducerDetails.


        :param mssql_revocation_statements: The mssql_revocation_statements of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mssql_revocation_statements = mssql_revocation_statements

    @property
    def mysql_creation_statements(self):
        """Gets the mysql_creation_statements of this DSProducerDetails.  # noqa: E501


        :return: The mysql_creation_statements of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mysql_creation_statements

    @mysql_creation_statements.setter
    def mysql_creation_statements(self, mysql_creation_statements):
        """Sets the mysql_creation_statements of this DSProducerDetails.


        :param mysql_creation_statements: The mysql_creation_statements of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mysql_creation_statements = mysql_creation_statements

    @property
    def mysql_revocation_statements(self):
        """Gets the mysql_revocation_statements of this DSProducerDetails.  # noqa: E501


        :return: The mysql_revocation_statements of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._mysql_revocation_statements

    @mysql_revocation_statements.setter
    def mysql_revocation_statements(self, mysql_revocation_statements):
        """Sets the mysql_revocation_statements of this DSProducerDetails.


        :param mysql_revocation_statements: The mysql_revocation_statements of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._mysql_revocation_statements = mysql_revocation_statements

    @property
    def oracle_creation_statements(self):
        """Gets the oracle_creation_statements of this DSProducerDetails.  # noqa: E501


        :return: The oracle_creation_statements of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._oracle_creation_statements

    @oracle_creation_statements.setter
    def oracle_creation_statements(self, oracle_creation_statements):
        """Sets the oracle_creation_statements of this DSProducerDetails.


        :param oracle_creation_statements: The oracle_creation_statements of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._oracle_creation_statements = oracle_creation_statements

    @property
    def password(self):
        """Gets the password of this DSProducerDetails.  # noqa: E501


        :return: The password of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DSProducerDetails.


        :param password: The password of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def password_length(self):
        """Gets the password_length of this DSProducerDetails.  # noqa: E501


        :return: The password_length of this DSProducerDetails.  # noqa: E501
        :rtype: int
        """
        return self._password_length

    @password_length.setter
    def password_length(self, password_length):
        """Sets the password_length of this DSProducerDetails.


        :param password_length: The password_length of this DSProducerDetails.  # noqa: E501
        :type: int
        """

        self._password_length = password_length

    @property
    def password_policy(self):
        """Gets the password_policy of this DSProducerDetails.  # noqa: E501


        :return: The password_policy of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._password_policy

    @password_policy.setter
    def password_policy(self, password_policy):
        """Sets the password_policy of this DSProducerDetails.


        :param password_policy: The password_policy of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._password_policy = password_policy

    @property
    def payload(self):
        """Gets the payload of this DSProducerDetails.  # noqa: E501


        :return: The payload of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this DSProducerDetails.


        :param payload: The payload of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def ping_url(self):
        """Gets the ping_url of this DSProducerDetails.  # noqa: E501


        :return: The ping_url of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ping_url

    @ping_url.setter
    def ping_url(self, ping_url):
        """Sets the ping_url of this DSProducerDetails.


        :param ping_url: The ping_url of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._ping_url = ping_url

    @property
    def postgres_creation_statements(self):
        """Gets the postgres_creation_statements of this DSProducerDetails.  # noqa: E501


        :return: The postgres_creation_statements of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._postgres_creation_statements

    @postgres_creation_statements.setter
    def postgres_creation_statements(self, postgres_creation_statements):
        """Sets the postgres_creation_statements of this DSProducerDetails.


        :param postgres_creation_statements: The postgres_creation_statements of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._postgres_creation_statements = postgres_creation_statements

    @property
    def postgres_revocation_statements(self):
        """Gets the postgres_revocation_statements of this DSProducerDetails.  # noqa: E501


        :return: The postgres_revocation_statements of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._postgres_revocation_statements

    @postgres_revocation_statements.setter
    def postgres_revocation_statements(self, postgres_revocation_statements):
        """Sets the postgres_revocation_statements of this DSProducerDetails.


        :param postgres_revocation_statements: The postgres_revocation_statements of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._postgres_revocation_statements = postgres_revocation_statements

    @property
    def privileged_user(self):
        """Gets the privileged_user of this DSProducerDetails.  # noqa: E501


        :return: The privileged_user of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._privileged_user

    @privileged_user.setter
    def privileged_user(self, privileged_user):
        """Sets the privileged_user of this DSProducerDetails.


        :param privileged_user: The privileged_user of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._privileged_user = privileged_user

    @property
    def rabbitmq_server_password(self):
        """Gets the rabbitmq_server_password of this DSProducerDetails.  # noqa: E501


        :return: The rabbitmq_server_password of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._rabbitmq_server_password

    @rabbitmq_server_password.setter
    def rabbitmq_server_password(self, rabbitmq_server_password):
        """Sets the rabbitmq_server_password of this DSProducerDetails.


        :param rabbitmq_server_password: The rabbitmq_server_password of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._rabbitmq_server_password = rabbitmq_server_password

    @property
    def rabbitmq_server_uri(self):
        """Gets the rabbitmq_server_uri of this DSProducerDetails.  # noqa: E501


        :return: The rabbitmq_server_uri of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._rabbitmq_server_uri

    @rabbitmq_server_uri.setter
    def rabbitmq_server_uri(self, rabbitmq_server_uri):
        """Sets the rabbitmq_server_uri of this DSProducerDetails.


        :param rabbitmq_server_uri: The rabbitmq_server_uri of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._rabbitmq_server_uri = rabbitmq_server_uri

    @property
    def rabbitmq_server_user(self):
        """Gets the rabbitmq_server_user of this DSProducerDetails.  # noqa: E501


        :return: The rabbitmq_server_user of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._rabbitmq_server_user

    @rabbitmq_server_user.setter
    def rabbitmq_server_user(self, rabbitmq_server_user):
        """Sets the rabbitmq_server_user of this DSProducerDetails.


        :param rabbitmq_server_user: The rabbitmq_server_user of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._rabbitmq_server_user = rabbitmq_server_user

    @property
    def rabbitmq_user_conf_permission(self):
        """Gets the rabbitmq_user_conf_permission of this DSProducerDetails.  # noqa: E501


        :return: The rabbitmq_user_conf_permission of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._rabbitmq_user_conf_permission

    @rabbitmq_user_conf_permission.setter
    def rabbitmq_user_conf_permission(self, rabbitmq_user_conf_permission):
        """Sets the rabbitmq_user_conf_permission of this DSProducerDetails.


        :param rabbitmq_user_conf_permission: The rabbitmq_user_conf_permission of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._rabbitmq_user_conf_permission = rabbitmq_user_conf_permission

    @property
    def rabbitmq_user_read_permission(self):
        """Gets the rabbitmq_user_read_permission of this DSProducerDetails.  # noqa: E501


        :return: The rabbitmq_user_read_permission of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._rabbitmq_user_read_permission

    @rabbitmq_user_read_permission.setter
    def rabbitmq_user_read_permission(self, rabbitmq_user_read_permission):
        """Sets the rabbitmq_user_read_permission of this DSProducerDetails.


        :param rabbitmq_user_read_permission: The rabbitmq_user_read_permission of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._rabbitmq_user_read_permission = rabbitmq_user_read_permission

    @property
    def rabbitmq_user_tags(self):
        """Gets the rabbitmq_user_tags of this DSProducerDetails.  # noqa: E501


        :return: The rabbitmq_user_tags of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._rabbitmq_user_tags

    @rabbitmq_user_tags.setter
    def rabbitmq_user_tags(self, rabbitmq_user_tags):
        """Sets the rabbitmq_user_tags of this DSProducerDetails.


        :param rabbitmq_user_tags: The rabbitmq_user_tags of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._rabbitmq_user_tags = rabbitmq_user_tags

    @property
    def rabbitmq_user_vhost(self):
        """Gets the rabbitmq_user_vhost of this DSProducerDetails.  # noqa: E501


        :return: The rabbitmq_user_vhost of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._rabbitmq_user_vhost

    @rabbitmq_user_vhost.setter
    def rabbitmq_user_vhost(self, rabbitmq_user_vhost):
        """Sets the rabbitmq_user_vhost of this DSProducerDetails.


        :param rabbitmq_user_vhost: The rabbitmq_user_vhost of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._rabbitmq_user_vhost = rabbitmq_user_vhost

    @property
    def rabbitmq_user_write_permission(self):
        """Gets the rabbitmq_user_write_permission of this DSProducerDetails.  # noqa: E501


        :return: The rabbitmq_user_write_permission of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._rabbitmq_user_write_permission

    @rabbitmq_user_write_permission.setter
    def rabbitmq_user_write_permission(self, rabbitmq_user_write_permission):
        """Sets the rabbitmq_user_write_permission of this DSProducerDetails.


        :param rabbitmq_user_write_permission: The rabbitmq_user_write_permission of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._rabbitmq_user_write_permission = rabbitmq_user_write_permission

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this DSProducerDetails.  # noqa: E501


        :return: The redirect_uris of this DSProducerDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this DSProducerDetails.


        :param redirect_uris: The redirect_uris of this DSProducerDetails.  # noqa: E501
        :type: list[str]
        """

        self._redirect_uris = redirect_uris

    @property
    def redshift_creation_statements(self):
        """Gets the redshift_creation_statements of this DSProducerDetails.  # noqa: E501


        :return: The redshift_creation_statements of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._redshift_creation_statements

    @redshift_creation_statements.setter
    def redshift_creation_statements(self, redshift_creation_statements):
        """Sets the redshift_creation_statements of this DSProducerDetails.


        :param redshift_creation_statements: The redshift_creation_statements of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._redshift_creation_statements = redshift_creation_statements

    @property
    def restricted_scopes(self):
        """Gets the restricted_scopes of this DSProducerDetails.  # noqa: E501


        :return: The restricted_scopes of this DSProducerDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._restricted_scopes

    @restricted_scopes.setter
    def restricted_scopes(self, restricted_scopes):
        """Sets the restricted_scopes of this DSProducerDetails.


        :param restricted_scopes: The restricted_scopes of this DSProducerDetails.  # noqa: E501
        :type: list[str]
        """

        self._restricted_scopes = restricted_scopes

    @property
    def revoke_sync_url(self):
        """Gets the revoke_sync_url of this DSProducerDetails.  # noqa: E501


        :return: The revoke_sync_url of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._revoke_sync_url

    @revoke_sync_url.setter
    def revoke_sync_url(self, revoke_sync_url):
        """Sets the revoke_sync_url of this DSProducerDetails.


        :param revoke_sync_url: The revoke_sync_url of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._revoke_sync_url = revoke_sync_url

    @property
    def rotate_sync_url(self):
        """Gets the rotate_sync_url of this DSProducerDetails.  # noqa: E501


        :return: The rotate_sync_url of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._rotate_sync_url

    @rotate_sync_url.setter
    def rotate_sync_url(self, rotate_sync_url):
        """Sets the rotate_sync_url of this DSProducerDetails.


        :param rotate_sync_url: The rotate_sync_url of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._rotate_sync_url = rotate_sync_url

    @property
    def scopes(self):
        """Gets the scopes of this DSProducerDetails.  # noqa: E501


        :return: The scopes of this DSProducerDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this DSProducerDetails.


        :param scopes: The scopes of this DSProducerDetails.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def secure_remote_access_details(self):
        """Gets the secure_remote_access_details of this DSProducerDetails.  # noqa: E501


        :return: The secure_remote_access_details of this DSProducerDetails.  # noqa: E501
        :rtype: SecureRemoteAccess
        """
        return self._secure_remote_access_details

    @secure_remote_access_details.setter
    def secure_remote_access_details(self, secure_remote_access_details):
        """Sets the secure_remote_access_details of this DSProducerDetails.


        :param secure_remote_access_details: The secure_remote_access_details of this DSProducerDetails.  # noqa: E501
        :type: SecureRemoteAccess
        """

        self._secure_remote_access_details = secure_remote_access_details

    @property
    def session_extension_warn_interval_min(self):
        """Gets the session_extension_warn_interval_min of this DSProducerDetails.  # noqa: E501


        :return: The session_extension_warn_interval_min of this DSProducerDetails.  # noqa: E501
        :rtype: int
        """
        return self._session_extension_warn_interval_min

    @session_extension_warn_interval_min.setter
    def session_extension_warn_interval_min(self, session_extension_warn_interval_min):
        """Sets the session_extension_warn_interval_min of this DSProducerDetails.


        :param session_extension_warn_interval_min: The session_extension_warn_interval_min of this DSProducerDetails.  # noqa: E501
        :type: int
        """

        self._session_extension_warn_interval_min = session_extension_warn_interval_min

    @property
    def sf_account(self):
        """Gets the sf_account of this DSProducerDetails.  # noqa: E501


        :return: The sf_account of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._sf_account

    @sf_account.setter
    def sf_account(self, sf_account):
        """Sets the sf_account of this DSProducerDetails.


        :param sf_account: The sf_account of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._sf_account = sf_account

    @property
    def sf_user_role(self):
        """Gets the sf_user_role of this DSProducerDetails.  # noqa: E501

        generated  users info  # noqa: E501

        :return: The sf_user_role of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._sf_user_role

    @sf_user_role.setter
    def sf_user_role(self, sf_user_role):
        """Sets the sf_user_role of this DSProducerDetails.

        generated  users info  # noqa: E501

        :param sf_user_role: The sf_user_role of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._sf_user_role = sf_user_role

    @property
    def sf_warehouse_name(self):
        """Gets the sf_warehouse_name of this DSProducerDetails.  # noqa: E501


        :return: The sf_warehouse_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._sf_warehouse_name

    @sf_warehouse_name.setter
    def sf_warehouse_name(self, sf_warehouse_name):
        """Sets the sf_warehouse_name of this DSProducerDetails.


        :param sf_warehouse_name: The sf_warehouse_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._sf_warehouse_name = sf_warehouse_name

    @property
    def should_stop(self):
        """Gets the should_stop of this DSProducerDetails.  # noqa: E501

        TODO delete this after migration  # noqa: E501

        :return: The should_stop of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._should_stop

    @should_stop.setter
    def should_stop(self, should_stop):
        """Sets the should_stop of this DSProducerDetails.

        TODO delete this after migration  # noqa: E501

        :param should_stop: The should_stop of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._should_stop = should_stop

    @property
    def signing_algorithm(self):
        """Gets the signing_algorithm of this DSProducerDetails.  # noqa: E501


        :return: The signing_algorithm of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._signing_algorithm

    @signing_algorithm.setter
    def signing_algorithm(self, signing_algorithm):
        """Sets the signing_algorithm of this DSProducerDetails.


        :param signing_algorithm: The signing_algorithm of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._signing_algorithm = signing_algorithm

    @property
    def ssl_connection_certificate(self):
        """Gets the ssl_connection_certificate of this DSProducerDetails.  # noqa: E501

        (Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field  # noqa: E501

        :return: The ssl_connection_certificate of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._ssl_connection_certificate

    @ssl_connection_certificate.setter
    def ssl_connection_certificate(self, ssl_connection_certificate):
        """Sets the ssl_connection_certificate of this DSProducerDetails.

        (Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field  # noqa: E501

        :param ssl_connection_certificate: The ssl_connection_certificate of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._ssl_connection_certificate = ssl_connection_certificate

    @property
    def ssl_connection_mode(self):
        """Gets the ssl_connection_mode of this DSProducerDetails.  # noqa: E501

        (Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB  # noqa: E501

        :return: The ssl_connection_mode of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_connection_mode

    @ssl_connection_mode.setter
    def ssl_connection_mode(self, ssl_connection_mode):
        """Sets the ssl_connection_mode of this DSProducerDetails.

        (Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB  # noqa: E501

        :param ssl_connection_mode: The ssl_connection_mode of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._ssl_connection_mode = ssl_connection_mode

    @property
    def subject_dn(self):
        """Gets the subject_dn of this DSProducerDetails.  # noqa: E501


        :return: The subject_dn of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._subject_dn

    @subject_dn.setter
    def subject_dn(self, subject_dn):
        """Sets the subject_dn of this DSProducerDetails.


        :param subject_dn: The subject_dn of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._subject_dn = subject_dn

    @property
    def tags(self):
        """Gets the tags of this DSProducerDetails.  # noqa: E501


        :return: The tags of this DSProducerDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DSProducerDetails.


        :param tags: The tags of this DSProducerDetails.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this DSProducerDetails.  # noqa: E501


        :return: The timeout_seconds of this DSProducerDetails.  # noqa: E501
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this DSProducerDetails.


        :param timeout_seconds: The timeout_seconds of this DSProducerDetails.  # noqa: E501
        :type: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def use_gw_cloud_identity(self):
        """Gets the use_gw_cloud_identity of this DSProducerDetails.  # noqa: E501


        :return: The use_gw_cloud_identity of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._use_gw_cloud_identity

    @use_gw_cloud_identity.setter
    def use_gw_cloud_identity(self, use_gw_cloud_identity):
        """Sets the use_gw_cloud_identity of this DSProducerDetails.


        :param use_gw_cloud_identity: The use_gw_cloud_identity of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._use_gw_cloud_identity = use_gw_cloud_identity

    @property
    def use_gw_service_account(self):
        """Gets the use_gw_service_account of this DSProducerDetails.  # noqa: E501


        :return: The use_gw_service_account of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._use_gw_service_account

    @use_gw_service_account.setter
    def use_gw_service_account(self, use_gw_service_account):
        """Sets the use_gw_service_account of this DSProducerDetails.


        :param use_gw_service_account: The use_gw_service_account of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._use_gw_service_account = use_gw_service_account

    @property
    def user_name(self):
        """Gets the user_name of this DSProducerDetails.  # noqa: E501


        :return: The user_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this DSProducerDetails.


        :param user_name: The user_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_password(self):
        """Gets the user_password of this DSProducerDetails.  # noqa: E501


        :return: The user_password of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_password

    @user_password.setter
    def user_password(self, user_password):
        """Sets the user_password of this DSProducerDetails.


        :param user_password: The user_password of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._user_password = user_password

    @property
    def user_principal_name(self):
        """Gets the user_principal_name of this DSProducerDetails.  # noqa: E501


        :return: The user_principal_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_principal_name

    @user_principal_name.setter
    def user_principal_name(self, user_principal_name):
        """Sets the user_principal_name of this DSProducerDetails.


        :param user_principal_name: The user_principal_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._user_principal_name = user_principal_name

    @property
    def user_ttl(self):
        """Gets the user_ttl of this DSProducerDetails.  # noqa: E501


        :return: The user_ttl of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._user_ttl

    @user_ttl.setter
    def user_ttl(self, user_ttl):
        """Sets the user_ttl of this DSProducerDetails.


        :param user_ttl: The user_ttl of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._user_ttl = user_ttl

    @property
    def username_length(self):
        """Gets the username_length of this DSProducerDetails.  # noqa: E501


        :return: The username_length of this DSProducerDetails.  # noqa: E501
        :rtype: int
        """
        return self._username_length

    @username_length.setter
    def username_length(self, username_length):
        """Sets the username_length of this DSProducerDetails.


        :param username_length: The username_length of this DSProducerDetails.  # noqa: E501
        :type: int
        """

        self._username_length = username_length

    @property
    def username_policy(self):
        """Gets the username_policy of this DSProducerDetails.  # noqa: E501


        :return: The username_policy of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._username_policy

    @username_policy.setter
    def username_policy(self, username_policy):
        """Sets the username_policy of this DSProducerDetails.


        :param username_policy: The username_policy of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._username_policy = username_policy

    @property
    def venafi_allow_subdomains(self):
        """Gets the venafi_allow_subdomains of this DSProducerDetails.  # noqa: E501


        :return: The venafi_allow_subdomains of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._venafi_allow_subdomains

    @venafi_allow_subdomains.setter
    def venafi_allow_subdomains(self, venafi_allow_subdomains):
        """Sets the venafi_allow_subdomains of this DSProducerDetails.


        :param venafi_allow_subdomains: The venafi_allow_subdomains of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._venafi_allow_subdomains = venafi_allow_subdomains

    @property
    def venafi_allowed_domains(self):
        """Gets the venafi_allowed_domains of this DSProducerDetails.  # noqa: E501


        :return: The venafi_allowed_domains of this DSProducerDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._venafi_allowed_domains

    @venafi_allowed_domains.setter
    def venafi_allowed_domains(self, venafi_allowed_domains):
        """Sets the venafi_allowed_domains of this DSProducerDetails.


        :param venafi_allowed_domains: The venafi_allowed_domains of this DSProducerDetails.  # noqa: E501
        :type: list[str]
        """

        self._venafi_allowed_domains = venafi_allowed_domains

    @property
    def venafi_api_key(self):
        """Gets the venafi_api_key of this DSProducerDetails.  # noqa: E501


        :return: The venafi_api_key of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._venafi_api_key

    @venafi_api_key.setter
    def venafi_api_key(self, venafi_api_key):
        """Sets the venafi_api_key of this DSProducerDetails.


        :param venafi_api_key: The venafi_api_key of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._venafi_api_key = venafi_api_key

    @property
    def venafi_auto_generated_folder(self):
        """Gets the venafi_auto_generated_folder of this DSProducerDetails.  # noqa: E501


        :return: The venafi_auto_generated_folder of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._venafi_auto_generated_folder

    @venafi_auto_generated_folder.setter
    def venafi_auto_generated_folder(self, venafi_auto_generated_folder):
        """Sets the venafi_auto_generated_folder of this DSProducerDetails.


        :param venafi_auto_generated_folder: The venafi_auto_generated_folder of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._venafi_auto_generated_folder = venafi_auto_generated_folder

    @property
    def venafi_base_url(self):
        """Gets the venafi_base_url of this DSProducerDetails.  # noqa: E501


        :return: The venafi_base_url of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._venafi_base_url

    @venafi_base_url.setter
    def venafi_base_url(self, venafi_base_url):
        """Sets the venafi_base_url of this DSProducerDetails.


        :param venafi_base_url: The venafi_base_url of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._venafi_base_url = venafi_base_url

    @property
    def venafi_root_first_in_chain(self):
        """Gets the venafi_root_first_in_chain of this DSProducerDetails.  # noqa: E501


        :return: The venafi_root_first_in_chain of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._venafi_root_first_in_chain

    @venafi_root_first_in_chain.setter
    def venafi_root_first_in_chain(self, venafi_root_first_in_chain):
        """Sets the venafi_root_first_in_chain of this DSProducerDetails.


        :param venafi_root_first_in_chain: The venafi_root_first_in_chain of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._venafi_root_first_in_chain = venafi_root_first_in_chain

    @property
    def venafi_sign_using_akeyless_pki(self):
        """Gets the venafi_sign_using_akeyless_pki of this DSProducerDetails.  # noqa: E501


        :return: The venafi_sign_using_akeyless_pki of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._venafi_sign_using_akeyless_pki

    @venafi_sign_using_akeyless_pki.setter
    def venafi_sign_using_akeyless_pki(self, venafi_sign_using_akeyless_pki):
        """Sets the venafi_sign_using_akeyless_pki of this DSProducerDetails.


        :param venafi_sign_using_akeyless_pki: The venafi_sign_using_akeyless_pki of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._venafi_sign_using_akeyless_pki = venafi_sign_using_akeyless_pki

    @property
    def venafi_signer_key_name(self):
        """Gets the venafi_signer_key_name of this DSProducerDetails.  # noqa: E501


        :return: The venafi_signer_key_name of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._venafi_signer_key_name

    @venafi_signer_key_name.setter
    def venafi_signer_key_name(self, venafi_signer_key_name):
        """Sets the venafi_signer_key_name of this DSProducerDetails.


        :param venafi_signer_key_name: The venafi_signer_key_name of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._venafi_signer_key_name = venafi_signer_key_name

    @property
    def venafi_store_private_key(self):
        """Gets the venafi_store_private_key of this DSProducerDetails.  # noqa: E501


        :return: The venafi_store_private_key of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._venafi_store_private_key

    @venafi_store_private_key.setter
    def venafi_store_private_key(self, venafi_store_private_key):
        """Sets the venafi_store_private_key of this DSProducerDetails.


        :param venafi_store_private_key: The venafi_store_private_key of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._venafi_store_private_key = venafi_store_private_key

    @property
    def venafi_tpp_access_token(self):
        """Gets the venafi_tpp_access_token of this DSProducerDetails.  # noqa: E501


        :return: The venafi_tpp_access_token of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._venafi_tpp_access_token

    @venafi_tpp_access_token.setter
    def venafi_tpp_access_token(self, venafi_tpp_access_token):
        """Sets the venafi_tpp_access_token of this DSProducerDetails.


        :param venafi_tpp_access_token: The venafi_tpp_access_token of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._venafi_tpp_access_token = venafi_tpp_access_token

    @property
    def venafi_tpp_client_id(self):
        """Gets the venafi_tpp_client_id of this DSProducerDetails.  # noqa: E501


        :return: The venafi_tpp_client_id of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._venafi_tpp_client_id

    @venafi_tpp_client_id.setter
    def venafi_tpp_client_id(self, venafi_tpp_client_id):
        """Sets the venafi_tpp_client_id of this DSProducerDetails.


        :param venafi_tpp_client_id: The venafi_tpp_client_id of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._venafi_tpp_client_id = venafi_tpp_client_id

    @property
    def venafi_tpp_password(self):
        """Gets the venafi_tpp_password of this DSProducerDetails.  # noqa: E501

        Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead  # noqa: E501

        :return: The venafi_tpp_password of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._venafi_tpp_password

    @venafi_tpp_password.setter
    def venafi_tpp_password(self, venafi_tpp_password):
        """Sets the venafi_tpp_password of this DSProducerDetails.

        Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead  # noqa: E501

        :param venafi_tpp_password: The venafi_tpp_password of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._venafi_tpp_password = venafi_tpp_password

    @property
    def venafi_tpp_refresh_token(self):
        """Gets the venafi_tpp_refresh_token of this DSProducerDetails.  # noqa: E501


        :return: The venafi_tpp_refresh_token of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._venafi_tpp_refresh_token

    @venafi_tpp_refresh_token.setter
    def venafi_tpp_refresh_token(self, venafi_tpp_refresh_token):
        """Sets the venafi_tpp_refresh_token of this DSProducerDetails.


        :param venafi_tpp_refresh_token: The venafi_tpp_refresh_token of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._venafi_tpp_refresh_token = venafi_tpp_refresh_token

    @property
    def venafi_tpp_username(self):
        """Gets the venafi_tpp_username of this DSProducerDetails.  # noqa: E501

        Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead  # noqa: E501

        :return: The venafi_tpp_username of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._venafi_tpp_username

    @venafi_tpp_username.setter
    def venafi_tpp_username(self, venafi_tpp_username):
        """Sets the venafi_tpp_username of this DSProducerDetails.

        Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead  # noqa: E501

        :param venafi_tpp_username: The venafi_tpp_username of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._venafi_tpp_username = venafi_tpp_username

    @property
    def venafi_use_tpp(self):
        """Gets the venafi_use_tpp of this DSProducerDetails.  # noqa: E501


        :return: The venafi_use_tpp of this DSProducerDetails.  # noqa: E501
        :rtype: bool
        """
        return self._venafi_use_tpp

    @venafi_use_tpp.setter
    def venafi_use_tpp(self, venafi_use_tpp):
        """Sets the venafi_use_tpp of this DSProducerDetails.


        :param venafi_use_tpp: The venafi_use_tpp of this DSProducerDetails.  # noqa: E501
        :type: bool
        """

        self._venafi_use_tpp = venafi_use_tpp

    @property
    def venafi_zone(self):
        """Gets the venafi_zone of this DSProducerDetails.  # noqa: E501


        :return: The venafi_zone of this DSProducerDetails.  # noqa: E501
        :rtype: str
        """
        return self._venafi_zone

    @venafi_zone.setter
    def venafi_zone(self, venafi_zone):
        """Sets the venafi_zone of this DSProducerDetails.


        :param venafi_zone: The venafi_zone of this DSProducerDetails.  # noqa: E501
        :type: str
        """

        self._venafi_zone = venafi_zone

    @property
    def warn_before_user_expiration_min(self):
        """Gets the warn_before_user_expiration_min of this DSProducerDetails.  # noqa: E501


        :return: The warn_before_user_expiration_min of this DSProducerDetails.  # noqa: E501
        :rtype: int
        """
        return self._warn_before_user_expiration_min

    @warn_before_user_expiration_min.setter
    def warn_before_user_expiration_min(self, warn_before_user_expiration_min):
        """Sets the warn_before_user_expiration_min of this DSProducerDetails.


        :param warn_before_user_expiration_min: The warn_before_user_expiration_min of this DSProducerDetails.  # noqa: E501
        :type: int
        """

        self._warn_before_user_expiration_min = warn_before_user_expiration_min

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DSProducerDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DSProducerDetails):
            return True

        return self.to_dict() != other.to_dict()
