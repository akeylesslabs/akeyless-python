# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.item_target_association import ItemTargetAssociation
from akeyless.models.secure_remote_access import SecureRemoteAccess
from akeyless.models.wallet_details import WalletDetails
from typing import Optional, Set
from typing_extensions import Self

class DSProducerDetails(BaseModel):
    """
    DSProducerDetails
    """ # noqa: E501
    access_token_manager_id: Optional[StrictStr] = None
    acl_rules: Optional[List[StrictStr]] = None
    active: Optional[StrictBool] = None
    admin_name: Optional[StrictStr] = None
    admin_pwd: Optional[StrictStr] = None
    admin_rotation_interval_days: Optional[StrictInt] = None
    administrative_port: Optional[StrictStr] = None
    artifactory_admin_apikey: Optional[StrictStr] = None
    artifactory_admin_username: Optional[StrictStr] = None
    artifactory_base_url: Optional[StrictStr] = None
    artifactory_token_audience: Optional[StrictStr] = None
    artifactory_token_scope: Optional[StrictStr] = None
    authorization_port: Optional[StrictStr] = None
    aws_access_key_id: Optional[StrictStr] = None
    aws_access_mode: Optional[StrictStr] = None
    aws_region: Optional[StrictStr] = None
    aws_role_arns: Optional[StrictStr] = None
    aws_secret_access_key: Optional[StrictStr] = None
    aws_session_tags: Optional[StrictStr] = None
    aws_session_token: Optional[StrictStr] = None
    aws_transitive_tag_keys: Optional[StrictStr] = None
    aws_user_console_access: Optional[StrictBool] = None
    aws_user_groups: Optional[StrictStr] = None
    aws_user_policies: Optional[StrictStr] = None
    aws_user_programmatic_access: Optional[StrictBool] = None
    azure_app_object_id: Optional[StrictStr] = None
    azure_client_id: Optional[StrictStr] = None
    azure_client_secret: Optional[StrictStr] = None
    azure_fixed_user_name_sub_claim_key: Optional[StrictStr] = None
    azure_fixed_user_only: Optional[StrictBool] = None
    azure_resource_group_name: Optional[StrictStr] = None
    azure_resource_name: Optional[StrictStr] = None
    azure_subscription_id: Optional[StrictStr] = None
    azure_tenant_id: Optional[StrictStr] = None
    azure_user_groups_obj_id: Optional[StrictStr] = None
    azure_user_portal_access: Optional[StrictBool] = None
    azure_user_programmatic_access: Optional[StrictBool] = None
    azure_user_roles_template_id: Optional[StrictStr] = None
    azure_username: Optional[StrictStr] = None
    cassandra_creation_statements: Optional[StrictStr] = None
    chef_organizations: Optional[StrictStr] = None
    chef_server_access_mode: Optional[StrictStr] = None
    chef_server_host_name: Optional[StrictStr] = None
    chef_server_key: Optional[StrictStr] = None
    chef_server_port: Optional[StrictStr] = None
    chef_server_url: Optional[StrictStr] = None
    chef_server_username: Optional[StrictStr] = None
    chef_skip_ssl: Optional[StrictBool] = None
    client_authentication_type: Optional[StrictStr] = None
    cloud_service_provider: Optional[StrictStr] = None
    cluster_mode: Optional[StrictBool] = None
    connection_type: Optional[StrictStr] = None
    create_sync_url: Optional[StrictStr] = None
    db_client_id: Optional[StrictStr] = None
    db_client_secret: Optional[StrictStr] = None
    db_host_name: Optional[StrictStr] = None
    db_isolation_level: Optional[StrictStr] = None
    db_max_idle_conns: Optional[StrictStr] = None
    db_max_open_conns: Optional[StrictStr] = None
    db_name: Optional[StrictStr] = None
    db_port: Optional[StrictStr] = None
    db_private_key: Optional[StrictStr] = Field(default=None, description="(Optional) Private Key in PEM format")
    db_private_key_passphrase: Optional[StrictStr] = None
    db_pwd: Optional[StrictStr] = None
    db_server_certificates: Optional[StrictStr] = Field(default=None, description="(Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host's root CA set.")
    db_server_name: Optional[StrictStr] = Field(default=None, description="(Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client's handshake to support virtual hosting unless it is an IP address.")
    db_tenant_id: Optional[StrictStr] = None
    db_user_name: Optional[StrictStr] = None
    delete_protection: Optional[StrictBool] = None
    dynamic_secret_id: Optional[StrictInt] = None
    dynamic_secret_key: Optional[StrictStr] = None
    dynamic_secret_name: Optional[StrictStr] = None
    dynamic_secret_type: Optional[StrictStr] = None
    eks_access_key_id: Optional[StrictStr] = None
    eks_assume_role: Optional[StrictStr] = None
    eks_cluster_ca_certificate: Optional[StrictStr] = None
    eks_cluster_endpoint: Optional[StrictStr] = None
    eks_cluster_name: Optional[StrictStr] = None
    eks_region: Optional[StrictStr] = None
    eks_secret_access_key: Optional[StrictStr] = None
    enable_admin_rotation: Optional[StrictBool] = None
    enforce_replay_prevention: Optional[StrictBool] = Field(default=None, description="relevant for PRIVATE_KEY_JWT client authentication type")
    expiration_date: Optional[datetime] = None
    externally_provided_user: Optional[StrictStr] = None
    failure_message: Optional[StrictStr] = None
    fixed_user_only: Optional[StrictStr] = None
    gcp_key_algo: Optional[StrictStr] = None
    gcp_role_bindings: Optional[Dict[str, List[StrictStr]]] = None
    gcp_service_account_email: Optional[StrictStr] = Field(default=None, description="GCPServiceAccountEmail overrides the deprecated field from the target")
    gcp_service_account_key: Optional[StrictStr] = None
    gcp_service_account_key_base64: Optional[StrictStr] = None
    gcp_service_account_key_id: Optional[StrictStr] = None
    gcp_service_account_type: Optional[StrictStr] = None
    gcp_tmp_service_account_name: Optional[StrictStr] = None
    gcp_token_lifetime: Optional[StrictStr] = None
    gcp_token_scope: Optional[StrictStr] = None
    gcp_token_type: Optional[StrictStr] = None
    github_app_id: Optional[StrictInt] = None
    github_app_private_key: Optional[StrictStr] = None
    github_base_url: Optional[StrictStr] = None
    github_installation_id: Optional[StrictInt] = None
    github_installation_token_permissions: Optional[Dict[str, StrictStr]] = None
    github_installation_token_repositories: Optional[List[StrictStr]] = None
    github_installation_token_repositories_ids: Optional[List[StrictInt]] = None
    github_organization_name: Optional[StrictStr] = None
    github_repository_path: Optional[StrictStr] = None
    gitlab_access_token: Optional[StrictStr] = None
    gitlab_access_type: Optional[StrictStr] = None
    gitlab_certificate: Optional[StrictStr] = None
    gitlab_group_name: Optional[StrictStr] = None
    gitlab_project_name: Optional[StrictStr] = None
    gitlab_role: Optional[StrictStr] = None
    gitlab_token_scope: Optional[List[StrictStr]] = None
    gitlab_url: Optional[StrictStr] = None
    gke_cluster_ca_certificate: Optional[StrictStr] = None
    gke_cluster_endpoint: Optional[StrictStr] = None
    gke_cluster_name: Optional[StrictStr] = None
    gke_service_account_key: Optional[StrictStr] = None
    gke_service_account_name: Optional[StrictStr] = None
    google_workspace_access_mode: Optional[StrictStr] = None
    google_workspace_admin_name: Optional[StrictStr] = None
    google_workspace_fixed_user_name_sub_claim_key: Optional[StrictStr] = None
    google_workspace_group_name: Optional[StrictStr] = None
    google_workspace_group_role: Optional[StrictStr] = None
    google_workspace_role_name: Optional[StrictStr] = None
    google_workspace_role_scope: Optional[StrictStr] = None
    grant_types: Optional[List[StrictStr]] = None
    groups: Optional[StrictStr] = None
    hanadb_creation_statements: Optional[StrictStr] = None
    hanadb_revocation_statements: Optional[StrictStr] = None
    host_name: Optional[StrictStr] = None
    host_port: Optional[StrictStr] = None
    implementation_type: Optional[StrictStr] = None
    is_fixed_user: Optional[StrictStr] = None
    issuer: Optional[StrictStr] = Field(default=None, description="relevant for CLIENT_TLS_CERTIFICATE client authentication type")
    item_targets_assoc: Optional[List[ItemTargetAssociation]] = None
    jwks: Optional[StrictStr] = None
    jwks_url: Optional[StrictStr] = None
    k8s_allowed_namespaces: Optional[StrictStr] = Field(default=None, description="comma-separated list of allowed namespaces. Can hold just * which signifies that any namespace is allowed")
    k8s_auth_type: Optional[StrictStr] = None
    k8s_bearer_token: Optional[StrictStr] = None
    k8s_client_cert_data: Optional[StrictStr] = Field(default=None, description="For K8s Client certificates authentication")
    k8s_client_key_data: Optional[StrictStr] = None
    k8s_cluster_ca_certificate: Optional[StrictStr] = None
    k8s_cluster_endpoint: Optional[StrictStr] = None
    k8s_cluster_name: Optional[StrictStr] = None
    k8s_dynamic_mode: Optional[StrictBool] = Field(default=None, description="when native k8s is in dynamic mode, user can define allowed namespaces, K8sServiceAccount doesn't exist from the start and will only be created at time of getting dynamic secret value By default dynamic mode is false and producer behaves like it did before")
    k8s_multiple_doc_yaml_temp_definition: Optional[List[StrictInt]] = Field(default=None, description="Yaml definition for creation of temporary objects. Field that can hold multiple docs from which following will be extracted: ServiceAccount, Role/ClusterRole and RoleBinding/ClusterRoleBinding. If ServiceAccount not specified - it will be generated automatically")
    k8s_namespace: Optional[StrictStr] = None
    k8s_role_name: Optional[StrictStr] = Field(default=None, description="Name of the pre-existing Role or ClusterRole to bind a generated service account to.")
    k8s_role_type: Optional[StrictStr] = None
    k8s_service_account: Optional[StrictStr] = None
    last_admin_rotation: Optional[StrictInt] = None
    ldap_audience: Optional[StrictStr] = None
    ldap_bind_dn: Optional[StrictStr] = None
    ldap_bind_password: Optional[StrictStr] = None
    ldap_certificate: Optional[StrictStr] = None
    ldap_fixed_user_name_sub_claim_key: Optional[StrictStr] = None
    ldap_fixed_user_type: Optional[StrictStr] = None
    ldap_group_dn: Optional[StrictStr] = None
    ldap_token_expiration: Optional[StrictStr] = None
    ldap_url: Optional[StrictStr] = None
    ldap_user_attr: Optional[StrictStr] = None
    ldap_user_dn: Optional[StrictStr] = None
    metadata: Optional[StrictStr] = None
    mongodb_atlas_api_private_key: Optional[StrictStr] = None
    mongodb_atlas_api_public_key: Optional[StrictStr] = None
    mongodb_atlas_project_id: Optional[StrictStr] = Field(default=None, description="mongodb atlas fields")
    mongodb_custom_data: Optional[StrictStr] = None
    mongodb_db_name: Optional[StrictStr] = Field(default=None, description="common fields")
    mongodb_default_auth_db: Optional[StrictStr] = None
    mongodb_host_port: Optional[StrictStr] = None
    mongodb_is_atlas: Optional[StrictBool] = None
    mongodb_password: Optional[StrictStr] = None
    mongodb_roles: Optional[StrictStr] = Field(default=None, description="common fields")
    mongodb_uri_connection: Optional[StrictStr] = Field(default=None, description="mongodb fields")
    mongodb_uri_options: Optional[StrictStr] = None
    mongodb_username: Optional[StrictStr] = None
    mssql_creation_statements: Optional[StrictStr] = None
    mssql_revocation_statements: Optional[StrictStr] = None
    mysql_creation_statements: Optional[StrictStr] = None
    mysql_revocation_statements: Optional[StrictStr] = None
    oracle_creation_statements: Optional[StrictStr] = None
    oracle_revocation_statements: Optional[StrictStr] = None
    oracle_wallet_details: Optional[WalletDetails] = None
    password: Optional[StrictStr] = None
    password_length: Optional[StrictInt] = None
    password_policy: Optional[StrictStr] = None
    payload: Optional[StrictStr] = None
    ping_url: Optional[StrictStr] = None
    postgres_creation_statements: Optional[StrictStr] = None
    postgres_revocation_statements: Optional[StrictStr] = None
    privileged_user: Optional[StrictStr] = None
    rabbitmq_server_password: Optional[StrictStr] = None
    rabbitmq_server_uri: Optional[StrictStr] = None
    rabbitmq_server_user: Optional[StrictStr] = None
    rabbitmq_user_conf_permission: Optional[StrictStr] = None
    rabbitmq_user_read_permission: Optional[StrictStr] = None
    rabbitmq_user_tags: Optional[StrictStr] = None
    rabbitmq_user_vhost: Optional[StrictStr] = None
    rabbitmq_user_write_permission: Optional[StrictStr] = None
    rdp_fixed_user_name_sub_claim_key: Optional[StrictStr] = None
    redirect_uris: Optional[List[StrictStr]] = None
    redshift_creation_statements: Optional[StrictStr] = None
    restricted_scopes: Optional[List[StrictStr]] = None
    revoke_sync_url: Optional[StrictStr] = None
    rotate_sync_url: Optional[StrictStr] = None
    scopes: Optional[List[StrictStr]] = None
    secure_remote_access_details: Optional[SecureRemoteAccess] = None
    session_extension_warn_interval_min: Optional[StrictInt] = None
    sf_account: Optional[StrictStr] = None
    sf_user_role: Optional[StrictStr] = Field(default=None, description="generated  users info")
    sf_warehouse_name: Optional[StrictStr] = None
    should_stop: Optional[StrictStr] = Field(default=None, description="TODO delete this after migration")
    signing_algorithm: Optional[StrictStr] = None
    ssl_connection_certificate: Optional[StrictStr] = Field(default=None, description="(Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field")
    ssl_connection_mode: Optional[StrictBool] = Field(default=None, description="(Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB")
    subject_dn: Optional[StrictStr] = None
    tags: Optional[List[StrictStr]] = None
    timeout_seconds: Optional[StrictInt] = None
    use_gw_cloud_identity: Optional[StrictBool] = None
    use_gw_service_account: Optional[StrictBool] = None
    user_name: Optional[StrictStr] = None
    user_password: Optional[StrictStr] = None
    user_principal_name: Optional[StrictStr] = None
    user_ttl: Optional[StrictStr] = None
    username_length: Optional[StrictInt] = None
    username_policy: Optional[StrictStr] = None
    venafi_allow_subdomains: Optional[StrictBool] = None
    venafi_allowed_domains: Optional[List[StrictStr]] = None
    venafi_api_key: Optional[StrictStr] = None
    venafi_auto_generated_folder: Optional[StrictStr] = None
    venafi_base_url: Optional[StrictStr] = None
    venafi_root_first_in_chain: Optional[StrictBool] = None
    venafi_sign_using_akeyless_pki: Optional[StrictBool] = None
    venafi_signer_key_name: Optional[StrictStr] = None
    venafi_store_private_key: Optional[StrictBool] = None
    venafi_tpp_access_token: Optional[StrictStr] = None
    venafi_tpp_client_id: Optional[StrictStr] = None
    venafi_tpp_password: Optional[StrictStr] = Field(default=None, description="Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead")
    venafi_tpp_refresh_token: Optional[StrictStr] = None
    venafi_tpp_username: Optional[StrictStr] = Field(default=None, description="Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead")
    venafi_use_tpp: Optional[StrictBool] = None
    venafi_zone: Optional[StrictStr] = None
    warn_before_user_expiration_min: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["access_token_manager_id", "acl_rules", "active", "admin_name", "admin_pwd", "admin_rotation_interval_days", "administrative_port", "artifactory_admin_apikey", "artifactory_admin_username", "artifactory_base_url", "artifactory_token_audience", "artifactory_token_scope", "authorization_port", "aws_access_key_id", "aws_access_mode", "aws_region", "aws_role_arns", "aws_secret_access_key", "aws_session_tags", "aws_session_token", "aws_transitive_tag_keys", "aws_user_console_access", "aws_user_groups", "aws_user_policies", "aws_user_programmatic_access", "azure_app_object_id", "azure_client_id", "azure_client_secret", "azure_fixed_user_name_sub_claim_key", "azure_fixed_user_only", "azure_resource_group_name", "azure_resource_name", "azure_subscription_id", "azure_tenant_id", "azure_user_groups_obj_id", "azure_user_portal_access", "azure_user_programmatic_access", "azure_user_roles_template_id", "azure_username", "cassandra_creation_statements", "chef_organizations", "chef_server_access_mode", "chef_server_host_name", "chef_server_key", "chef_server_port", "chef_server_url", "chef_server_username", "chef_skip_ssl", "client_authentication_type", "cloud_service_provider", "cluster_mode", "connection_type", "create_sync_url", "db_client_id", "db_client_secret", "db_host_name", "db_isolation_level", "db_max_idle_conns", "db_max_open_conns", "db_name", "db_port", "db_private_key", "db_private_key_passphrase", "db_pwd", "db_server_certificates", "db_server_name", "db_tenant_id", "db_user_name", "delete_protection", "dynamic_secret_id", "dynamic_secret_key", "dynamic_secret_name", "dynamic_secret_type", "eks_access_key_id", "eks_assume_role", "eks_cluster_ca_certificate", "eks_cluster_endpoint", "eks_cluster_name", "eks_region", "eks_secret_access_key", "enable_admin_rotation", "enforce_replay_prevention", "expiration_date", "externally_provided_user", "failure_message", "fixed_user_only", "gcp_key_algo", "gcp_role_bindings", "gcp_service_account_email", "gcp_service_account_key", "gcp_service_account_key_base64", "gcp_service_account_key_id", "gcp_service_account_type", "gcp_tmp_service_account_name", "gcp_token_lifetime", "gcp_token_scope", "gcp_token_type", "github_app_id", "github_app_private_key", "github_base_url", "github_installation_id", "github_installation_token_permissions", "github_installation_token_repositories", "github_installation_token_repositories_ids", "github_organization_name", "github_repository_path", "gitlab_access_token", "gitlab_access_type", "gitlab_certificate", "gitlab_group_name", "gitlab_project_name", "gitlab_role", "gitlab_token_scope", "gitlab_url", "gke_cluster_ca_certificate", "gke_cluster_endpoint", "gke_cluster_name", "gke_service_account_key", "gke_service_account_name", "google_workspace_access_mode", "google_workspace_admin_name", "google_workspace_fixed_user_name_sub_claim_key", "google_workspace_group_name", "google_workspace_group_role", "google_workspace_role_name", "google_workspace_role_scope", "grant_types", "groups", "hanadb_creation_statements", "hanadb_revocation_statements", "host_name", "host_port", "implementation_type", "is_fixed_user", "issuer", "item_targets_assoc", "jwks", "jwks_url", "k8s_allowed_namespaces", "k8s_auth_type", "k8s_bearer_token", "k8s_client_cert_data", "k8s_client_key_data", "k8s_cluster_ca_certificate", "k8s_cluster_endpoint", "k8s_cluster_name", "k8s_dynamic_mode", "k8s_multiple_doc_yaml_temp_definition", "k8s_namespace", "k8s_role_name", "k8s_role_type", "k8s_service_account", "last_admin_rotation", "ldap_audience", "ldap_bind_dn", "ldap_bind_password", "ldap_certificate", "ldap_fixed_user_name_sub_claim_key", "ldap_fixed_user_type", "ldap_group_dn", "ldap_token_expiration", "ldap_url", "ldap_user_attr", "ldap_user_dn", "metadata", "mongodb_atlas_api_private_key", "mongodb_atlas_api_public_key", "mongodb_atlas_project_id", "mongodb_custom_data", "mongodb_db_name", "mongodb_default_auth_db", "mongodb_host_port", "mongodb_is_atlas", "mongodb_password", "mongodb_roles", "mongodb_uri_connection", "mongodb_uri_options", "mongodb_username", "mssql_creation_statements", "mssql_revocation_statements", "mysql_creation_statements", "mysql_revocation_statements", "oracle_creation_statements", "oracle_revocation_statements", "oracle_wallet_details", "password", "password_length", "password_policy", "payload", "ping_url", "postgres_creation_statements", "postgres_revocation_statements", "privileged_user", "rabbitmq_server_password", "rabbitmq_server_uri", "rabbitmq_server_user", "rabbitmq_user_conf_permission", "rabbitmq_user_read_permission", "rabbitmq_user_tags", "rabbitmq_user_vhost", "rabbitmq_user_write_permission", "rdp_fixed_user_name_sub_claim_key", "redirect_uris", "redshift_creation_statements", "restricted_scopes", "revoke_sync_url", "rotate_sync_url", "scopes", "secure_remote_access_details", "session_extension_warn_interval_min", "sf_account", "sf_user_role", "sf_warehouse_name", "should_stop", "signing_algorithm", "ssl_connection_certificate", "ssl_connection_mode", "subject_dn", "tags", "timeout_seconds", "use_gw_cloud_identity", "use_gw_service_account", "user_name", "user_password", "user_principal_name", "user_ttl", "username_length", "username_policy", "venafi_allow_subdomains", "venafi_allowed_domains", "venafi_api_key", "venafi_auto_generated_folder", "venafi_base_url", "venafi_root_first_in_chain", "venafi_sign_using_akeyless_pki", "venafi_signer_key_name", "venafi_store_private_key", "venafi_tpp_access_token", "venafi_tpp_client_id", "venafi_tpp_password", "venafi_tpp_refresh_token", "venafi_tpp_username", "venafi_use_tpp", "venafi_zone", "warn_before_user_expiration_min"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DSProducerDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in item_targets_assoc (list)
        _items = []
        if self.item_targets_assoc:
            for _item_item_targets_assoc in self.item_targets_assoc:
                if _item_item_targets_assoc:
                    _items.append(_item_item_targets_assoc.to_dict())
            _dict['item_targets_assoc'] = _items
        # override the default output from pydantic by calling `to_dict()` of oracle_wallet_details
        if self.oracle_wallet_details:
            _dict['oracle_wallet_details'] = self.oracle_wallet_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secure_remote_access_details
        if self.secure_remote_access_details:
            _dict['secure_remote_access_details'] = self.secure_remote_access_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DSProducerDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_token_manager_id": obj.get("access_token_manager_id"),
            "acl_rules": obj.get("acl_rules"),
            "active": obj.get("active"),
            "admin_name": obj.get("admin_name"),
            "admin_pwd": obj.get("admin_pwd"),
            "admin_rotation_interval_days": obj.get("admin_rotation_interval_days"),
            "administrative_port": obj.get("administrative_port"),
            "artifactory_admin_apikey": obj.get("artifactory_admin_apikey"),
            "artifactory_admin_username": obj.get("artifactory_admin_username"),
            "artifactory_base_url": obj.get("artifactory_base_url"),
            "artifactory_token_audience": obj.get("artifactory_token_audience"),
            "artifactory_token_scope": obj.get("artifactory_token_scope"),
            "authorization_port": obj.get("authorization_port"),
            "aws_access_key_id": obj.get("aws_access_key_id"),
            "aws_access_mode": obj.get("aws_access_mode"),
            "aws_region": obj.get("aws_region"),
            "aws_role_arns": obj.get("aws_role_arns"),
            "aws_secret_access_key": obj.get("aws_secret_access_key"),
            "aws_session_tags": obj.get("aws_session_tags"),
            "aws_session_token": obj.get("aws_session_token"),
            "aws_transitive_tag_keys": obj.get("aws_transitive_tag_keys"),
            "aws_user_console_access": obj.get("aws_user_console_access"),
            "aws_user_groups": obj.get("aws_user_groups"),
            "aws_user_policies": obj.get("aws_user_policies"),
            "aws_user_programmatic_access": obj.get("aws_user_programmatic_access"),
            "azure_app_object_id": obj.get("azure_app_object_id"),
            "azure_client_id": obj.get("azure_client_id"),
            "azure_client_secret": obj.get("azure_client_secret"),
            "azure_fixed_user_name_sub_claim_key": obj.get("azure_fixed_user_name_sub_claim_key"),
            "azure_fixed_user_only": obj.get("azure_fixed_user_only"),
            "azure_resource_group_name": obj.get("azure_resource_group_name"),
            "azure_resource_name": obj.get("azure_resource_name"),
            "azure_subscription_id": obj.get("azure_subscription_id"),
            "azure_tenant_id": obj.get("azure_tenant_id"),
            "azure_user_groups_obj_id": obj.get("azure_user_groups_obj_id"),
            "azure_user_portal_access": obj.get("azure_user_portal_access"),
            "azure_user_programmatic_access": obj.get("azure_user_programmatic_access"),
            "azure_user_roles_template_id": obj.get("azure_user_roles_template_id"),
            "azure_username": obj.get("azure_username"),
            "cassandra_creation_statements": obj.get("cassandra_creation_statements"),
            "chef_organizations": obj.get("chef_organizations"),
            "chef_server_access_mode": obj.get("chef_server_access_mode"),
            "chef_server_host_name": obj.get("chef_server_host_name"),
            "chef_server_key": obj.get("chef_server_key"),
            "chef_server_port": obj.get("chef_server_port"),
            "chef_server_url": obj.get("chef_server_url"),
            "chef_server_username": obj.get("chef_server_username"),
            "chef_skip_ssl": obj.get("chef_skip_ssl"),
            "client_authentication_type": obj.get("client_authentication_type"),
            "cloud_service_provider": obj.get("cloud_service_provider"),
            "cluster_mode": obj.get("cluster_mode"),
            "connection_type": obj.get("connection_type"),
            "create_sync_url": obj.get("create_sync_url"),
            "db_client_id": obj.get("db_client_id"),
            "db_client_secret": obj.get("db_client_secret"),
            "db_host_name": obj.get("db_host_name"),
            "db_isolation_level": obj.get("db_isolation_level"),
            "db_max_idle_conns": obj.get("db_max_idle_conns"),
            "db_max_open_conns": obj.get("db_max_open_conns"),
            "db_name": obj.get("db_name"),
            "db_port": obj.get("db_port"),
            "db_private_key": obj.get("db_private_key"),
            "db_private_key_passphrase": obj.get("db_private_key_passphrase"),
            "db_pwd": obj.get("db_pwd"),
            "db_server_certificates": obj.get("db_server_certificates"),
            "db_server_name": obj.get("db_server_name"),
            "db_tenant_id": obj.get("db_tenant_id"),
            "db_user_name": obj.get("db_user_name"),
            "delete_protection": obj.get("delete_protection"),
            "dynamic_secret_id": obj.get("dynamic_secret_id"),
            "dynamic_secret_key": obj.get("dynamic_secret_key"),
            "dynamic_secret_name": obj.get("dynamic_secret_name"),
            "dynamic_secret_type": obj.get("dynamic_secret_type"),
            "eks_access_key_id": obj.get("eks_access_key_id"),
            "eks_assume_role": obj.get("eks_assume_role"),
            "eks_cluster_ca_certificate": obj.get("eks_cluster_ca_certificate"),
            "eks_cluster_endpoint": obj.get("eks_cluster_endpoint"),
            "eks_cluster_name": obj.get("eks_cluster_name"),
            "eks_region": obj.get("eks_region"),
            "eks_secret_access_key": obj.get("eks_secret_access_key"),
            "enable_admin_rotation": obj.get("enable_admin_rotation"),
            "enforce_replay_prevention": obj.get("enforce_replay_prevention"),
            "expiration_date": obj.get("expiration_date"),
            "externally_provided_user": obj.get("externally_provided_user"),
            "failure_message": obj.get("failure_message"),
            "fixed_user_only": obj.get("fixed_user_only"),
            "gcp_key_algo": obj.get("gcp_key_algo"),
            "gcp_role_bindings": obj.get("gcp_role_bindings"),
            "gcp_service_account_email": obj.get("gcp_service_account_email"),
            "gcp_service_account_key": obj.get("gcp_service_account_key"),
            "gcp_service_account_key_base64": obj.get("gcp_service_account_key_base64"),
            "gcp_service_account_key_id": obj.get("gcp_service_account_key_id"),
            "gcp_service_account_type": obj.get("gcp_service_account_type"),
            "gcp_tmp_service_account_name": obj.get("gcp_tmp_service_account_name"),
            "gcp_token_lifetime": obj.get("gcp_token_lifetime"),
            "gcp_token_scope": obj.get("gcp_token_scope"),
            "gcp_token_type": obj.get("gcp_token_type"),
            "github_app_id": obj.get("github_app_id"),
            "github_app_private_key": obj.get("github_app_private_key"),
            "github_base_url": obj.get("github_base_url"),
            "github_installation_id": obj.get("github_installation_id"),
            "github_installation_token_permissions": obj.get("github_installation_token_permissions"),
            "github_installation_token_repositories": obj.get("github_installation_token_repositories"),
            "github_installation_token_repositories_ids": obj.get("github_installation_token_repositories_ids"),
            "github_organization_name": obj.get("github_organization_name"),
            "github_repository_path": obj.get("github_repository_path"),
            "gitlab_access_token": obj.get("gitlab_access_token"),
            "gitlab_access_type": obj.get("gitlab_access_type"),
            "gitlab_certificate": obj.get("gitlab_certificate"),
            "gitlab_group_name": obj.get("gitlab_group_name"),
            "gitlab_project_name": obj.get("gitlab_project_name"),
            "gitlab_role": obj.get("gitlab_role"),
            "gitlab_token_scope": obj.get("gitlab_token_scope"),
            "gitlab_url": obj.get("gitlab_url"),
            "gke_cluster_ca_certificate": obj.get("gke_cluster_ca_certificate"),
            "gke_cluster_endpoint": obj.get("gke_cluster_endpoint"),
            "gke_cluster_name": obj.get("gke_cluster_name"),
            "gke_service_account_key": obj.get("gke_service_account_key"),
            "gke_service_account_name": obj.get("gke_service_account_name"),
            "google_workspace_access_mode": obj.get("google_workspace_access_mode"),
            "google_workspace_admin_name": obj.get("google_workspace_admin_name"),
            "google_workspace_fixed_user_name_sub_claim_key": obj.get("google_workspace_fixed_user_name_sub_claim_key"),
            "google_workspace_group_name": obj.get("google_workspace_group_name"),
            "google_workspace_group_role": obj.get("google_workspace_group_role"),
            "google_workspace_role_name": obj.get("google_workspace_role_name"),
            "google_workspace_role_scope": obj.get("google_workspace_role_scope"),
            "grant_types": obj.get("grant_types"),
            "groups": obj.get("groups"),
            "hanadb_creation_statements": obj.get("hanadb_creation_statements"),
            "hanadb_revocation_statements": obj.get("hanadb_revocation_statements"),
            "host_name": obj.get("host_name"),
            "host_port": obj.get("host_port"),
            "implementation_type": obj.get("implementation_type"),
            "is_fixed_user": obj.get("is_fixed_user"),
            "issuer": obj.get("issuer"),
            "item_targets_assoc": [ItemTargetAssociation.from_dict(_item) for _item in obj["item_targets_assoc"]] if obj.get("item_targets_assoc") is not None else None,
            "jwks": obj.get("jwks"),
            "jwks_url": obj.get("jwks_url"),
            "k8s_allowed_namespaces": obj.get("k8s_allowed_namespaces"),
            "k8s_auth_type": obj.get("k8s_auth_type"),
            "k8s_bearer_token": obj.get("k8s_bearer_token"),
            "k8s_client_cert_data": obj.get("k8s_client_cert_data"),
            "k8s_client_key_data": obj.get("k8s_client_key_data"),
            "k8s_cluster_ca_certificate": obj.get("k8s_cluster_ca_certificate"),
            "k8s_cluster_endpoint": obj.get("k8s_cluster_endpoint"),
            "k8s_cluster_name": obj.get("k8s_cluster_name"),
            "k8s_dynamic_mode": obj.get("k8s_dynamic_mode"),
            "k8s_multiple_doc_yaml_temp_definition": obj.get("k8s_multiple_doc_yaml_temp_definition"),
            "k8s_namespace": obj.get("k8s_namespace"),
            "k8s_role_name": obj.get("k8s_role_name"),
            "k8s_role_type": obj.get("k8s_role_type"),
            "k8s_service_account": obj.get("k8s_service_account"),
            "last_admin_rotation": obj.get("last_admin_rotation"),
            "ldap_audience": obj.get("ldap_audience"),
            "ldap_bind_dn": obj.get("ldap_bind_dn"),
            "ldap_bind_password": obj.get("ldap_bind_password"),
            "ldap_certificate": obj.get("ldap_certificate"),
            "ldap_fixed_user_name_sub_claim_key": obj.get("ldap_fixed_user_name_sub_claim_key"),
            "ldap_fixed_user_type": obj.get("ldap_fixed_user_type"),
            "ldap_group_dn": obj.get("ldap_group_dn"),
            "ldap_token_expiration": obj.get("ldap_token_expiration"),
            "ldap_url": obj.get("ldap_url"),
            "ldap_user_attr": obj.get("ldap_user_attr"),
            "ldap_user_dn": obj.get("ldap_user_dn"),
            "metadata": obj.get("metadata"),
            "mongodb_atlas_api_private_key": obj.get("mongodb_atlas_api_private_key"),
            "mongodb_atlas_api_public_key": obj.get("mongodb_atlas_api_public_key"),
            "mongodb_atlas_project_id": obj.get("mongodb_atlas_project_id"),
            "mongodb_custom_data": obj.get("mongodb_custom_data"),
            "mongodb_db_name": obj.get("mongodb_db_name"),
            "mongodb_default_auth_db": obj.get("mongodb_default_auth_db"),
            "mongodb_host_port": obj.get("mongodb_host_port"),
            "mongodb_is_atlas": obj.get("mongodb_is_atlas"),
            "mongodb_password": obj.get("mongodb_password"),
            "mongodb_roles": obj.get("mongodb_roles"),
            "mongodb_uri_connection": obj.get("mongodb_uri_connection"),
            "mongodb_uri_options": obj.get("mongodb_uri_options"),
            "mongodb_username": obj.get("mongodb_username"),
            "mssql_creation_statements": obj.get("mssql_creation_statements"),
            "mssql_revocation_statements": obj.get("mssql_revocation_statements"),
            "mysql_creation_statements": obj.get("mysql_creation_statements"),
            "mysql_revocation_statements": obj.get("mysql_revocation_statements"),
            "oracle_creation_statements": obj.get("oracle_creation_statements"),
            "oracle_revocation_statements": obj.get("oracle_revocation_statements"),
            "oracle_wallet_details": WalletDetails.from_dict(obj["oracle_wallet_details"]) if obj.get("oracle_wallet_details") is not None else None,
            "password": obj.get("password"),
            "password_length": obj.get("password_length"),
            "password_policy": obj.get("password_policy"),
            "payload": obj.get("payload"),
            "ping_url": obj.get("ping_url"),
            "postgres_creation_statements": obj.get("postgres_creation_statements"),
            "postgres_revocation_statements": obj.get("postgres_revocation_statements"),
            "privileged_user": obj.get("privileged_user"),
            "rabbitmq_server_password": obj.get("rabbitmq_server_password"),
            "rabbitmq_server_uri": obj.get("rabbitmq_server_uri"),
            "rabbitmq_server_user": obj.get("rabbitmq_server_user"),
            "rabbitmq_user_conf_permission": obj.get("rabbitmq_user_conf_permission"),
            "rabbitmq_user_read_permission": obj.get("rabbitmq_user_read_permission"),
            "rabbitmq_user_tags": obj.get("rabbitmq_user_tags"),
            "rabbitmq_user_vhost": obj.get("rabbitmq_user_vhost"),
            "rabbitmq_user_write_permission": obj.get("rabbitmq_user_write_permission"),
            "rdp_fixed_user_name_sub_claim_key": obj.get("rdp_fixed_user_name_sub_claim_key"),
            "redirect_uris": obj.get("redirect_uris"),
            "redshift_creation_statements": obj.get("redshift_creation_statements"),
            "restricted_scopes": obj.get("restricted_scopes"),
            "revoke_sync_url": obj.get("revoke_sync_url"),
            "rotate_sync_url": obj.get("rotate_sync_url"),
            "scopes": obj.get("scopes"),
            "secure_remote_access_details": SecureRemoteAccess.from_dict(obj["secure_remote_access_details"]) if obj.get("secure_remote_access_details") is not None else None,
            "session_extension_warn_interval_min": obj.get("session_extension_warn_interval_min"),
            "sf_account": obj.get("sf_account"),
            "sf_user_role": obj.get("sf_user_role"),
            "sf_warehouse_name": obj.get("sf_warehouse_name"),
            "should_stop": obj.get("should_stop"),
            "signing_algorithm": obj.get("signing_algorithm"),
            "ssl_connection_certificate": obj.get("ssl_connection_certificate"),
            "ssl_connection_mode": obj.get("ssl_connection_mode"),
            "subject_dn": obj.get("subject_dn"),
            "tags": obj.get("tags"),
            "timeout_seconds": obj.get("timeout_seconds"),
            "use_gw_cloud_identity": obj.get("use_gw_cloud_identity"),
            "use_gw_service_account": obj.get("use_gw_service_account"),
            "user_name": obj.get("user_name"),
            "user_password": obj.get("user_password"),
            "user_principal_name": obj.get("user_principal_name"),
            "user_ttl": obj.get("user_ttl"),
            "username_length": obj.get("username_length"),
            "username_policy": obj.get("username_policy"),
            "venafi_allow_subdomains": obj.get("venafi_allow_subdomains"),
            "venafi_allowed_domains": obj.get("venafi_allowed_domains"),
            "venafi_api_key": obj.get("venafi_api_key"),
            "venafi_auto_generated_folder": obj.get("venafi_auto_generated_folder"),
            "venafi_base_url": obj.get("venafi_base_url"),
            "venafi_root_first_in_chain": obj.get("venafi_root_first_in_chain"),
            "venafi_sign_using_akeyless_pki": obj.get("venafi_sign_using_akeyless_pki"),
            "venafi_signer_key_name": obj.get("venafi_signer_key_name"),
            "venafi_store_private_key": obj.get("venafi_store_private_key"),
            "venafi_tpp_access_token": obj.get("venafi_tpp_access_token"),
            "venafi_tpp_client_id": obj.get("venafi_tpp_client_id"),
            "venafi_tpp_password": obj.get("venafi_tpp_password"),
            "venafi_tpp_refresh_token": obj.get("venafi_tpp_refresh_token"),
            "venafi_tpp_username": obj.get("venafi_tpp_username"),
            "venafi_use_tpp": obj.get("venafi_use_tpp"),
            "venafi_zone": obj.get("venafi_zone"),
            "warn_before_user_expiration_min": obj.get("warn_before_user_expiration_min")
        })
        return _obj


