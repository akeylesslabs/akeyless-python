# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GatewayUpdateRemoteAccessRdpRecordings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws_storage_access_key_id': 'str',
        'aws_storage_bucket_name': 'str',
        'aws_storage_bucket_prefix': 'str',
        'aws_storage_region': 'str',
        'aws_storage_secret_access_key': 'str',
        'azure_storage_account_name': 'str',
        'azure_storage_client_id': 'str',
        'azure_storage_client_secret': 'str',
        'azure_storage_container_name': 'str',
        'azure_storage_tenant_id': 'str',
        'json': 'bool',
        'rdp_session_recording': 'str',
        'rdp_session_storage': 'str',
        'token': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'aws_storage_access_key_id': 'aws-storage-access-key-id',
        'aws_storage_bucket_name': 'aws-storage-bucket-name',
        'aws_storage_bucket_prefix': 'aws-storage-bucket-prefix',
        'aws_storage_region': 'aws-storage-region',
        'aws_storage_secret_access_key': 'aws-storage-secret-access-key',
        'azure_storage_account_name': 'azure-storage-account-name',
        'azure_storage_client_id': 'azure-storage-client-id',
        'azure_storage_client_secret': 'azure-storage-client-secret',
        'azure_storage_container_name': 'azure-storage-container-name',
        'azure_storage_tenant_id': 'azure-storage-tenant-id',
        'json': 'json',
        'rdp_session_recording': 'rdp-session-recording',
        'rdp_session_storage': 'rdp-session-storage',
        'token': 'token',
        'uid_token': 'uid-token'
    }

    def __init__(self, aws_storage_access_key_id=None, aws_storage_bucket_name=None, aws_storage_bucket_prefix=None, aws_storage_region=None, aws_storage_secret_access_key=None, azure_storage_account_name=None, azure_storage_client_id=None, azure_storage_client_secret=None, azure_storage_container_name=None, azure_storage_tenant_id=None, json=False, rdp_session_recording=None, rdp_session_storage=None, token=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """GatewayUpdateRemoteAccessRdpRecordings - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aws_storage_access_key_id = None
        self._aws_storage_bucket_name = None
        self._aws_storage_bucket_prefix = None
        self._aws_storage_region = None
        self._aws_storage_secret_access_key = None
        self._azure_storage_account_name = None
        self._azure_storage_client_id = None
        self._azure_storage_client_secret = None
        self._azure_storage_container_name = None
        self._azure_storage_tenant_id = None
        self._json = None
        self._rdp_session_recording = None
        self._rdp_session_storage = None
        self._token = None
        self._uid_token = None
        self.discriminator = None

        if aws_storage_access_key_id is not None:
            self.aws_storage_access_key_id = aws_storage_access_key_id
        if aws_storage_bucket_name is not None:
            self.aws_storage_bucket_name = aws_storage_bucket_name
        if aws_storage_bucket_prefix is not None:
            self.aws_storage_bucket_prefix = aws_storage_bucket_prefix
        if aws_storage_region is not None:
            self.aws_storage_region = aws_storage_region
        if aws_storage_secret_access_key is not None:
            self.aws_storage_secret_access_key = aws_storage_secret_access_key
        if azure_storage_account_name is not None:
            self.azure_storage_account_name = azure_storage_account_name
        if azure_storage_client_id is not None:
            self.azure_storage_client_id = azure_storage_client_id
        if azure_storage_client_secret is not None:
            self.azure_storage_client_secret = azure_storage_client_secret
        if azure_storage_container_name is not None:
            self.azure_storage_container_name = azure_storage_container_name
        if azure_storage_tenant_id is not None:
            self.azure_storage_tenant_id = azure_storage_tenant_id
        if json is not None:
            self.json = json
        if rdp_session_recording is not None:
            self.rdp_session_recording = rdp_session_recording
        if rdp_session_storage is not None:
            self.rdp_session_storage = rdp_session_storage
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def aws_storage_access_key_id(self):
        """Gets the aws_storage_access_key_id of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        AWS access key id. For more information refer to https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html  # noqa: E501

        :return: The aws_storage_access_key_id of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._aws_storage_access_key_id

    @aws_storage_access_key_id.setter
    def aws_storage_access_key_id(self, aws_storage_access_key_id):
        """Sets the aws_storage_access_key_id of this GatewayUpdateRemoteAccessRdpRecordings.

        AWS access key id. For more information refer to https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html  # noqa: E501

        :param aws_storage_access_key_id: The aws_storage_access_key_id of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._aws_storage_access_key_id = aws_storage_access_key_id

    @property
    def aws_storage_bucket_name(self):
        """Gets the aws_storage_bucket_name of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        The AWS bucket name. For more information refer to https://docs.aws.amazon.com/s3/  # noqa: E501

        :return: The aws_storage_bucket_name of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._aws_storage_bucket_name

    @aws_storage_bucket_name.setter
    def aws_storage_bucket_name(self, aws_storage_bucket_name):
        """Sets the aws_storage_bucket_name of this GatewayUpdateRemoteAccessRdpRecordings.

        The AWS bucket name. For more information refer to https://docs.aws.amazon.com/s3/  # noqa: E501

        :param aws_storage_bucket_name: The aws_storage_bucket_name of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._aws_storage_bucket_name = aws_storage_bucket_name

    @property
    def aws_storage_bucket_prefix(self):
        """Gets the aws_storage_bucket_prefix of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        The folder name in S3 bucket. For more information refer to https://docs.aws.amazon.com/s3/  # noqa: E501

        :return: The aws_storage_bucket_prefix of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._aws_storage_bucket_prefix

    @aws_storage_bucket_prefix.setter
    def aws_storage_bucket_prefix(self, aws_storage_bucket_prefix):
        """Sets the aws_storage_bucket_prefix of this GatewayUpdateRemoteAccessRdpRecordings.

        The folder name in S3 bucket. For more information refer to https://docs.aws.amazon.com/s3/  # noqa: E501

        :param aws_storage_bucket_prefix: The aws_storage_bucket_prefix of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._aws_storage_bucket_prefix = aws_storage_bucket_prefix

    @property
    def aws_storage_region(self):
        """Gets the aws_storage_region of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        The region where the storage is located  # noqa: E501

        :return: The aws_storage_region of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._aws_storage_region

    @aws_storage_region.setter
    def aws_storage_region(self, aws_storage_region):
        """Sets the aws_storage_region of this GatewayUpdateRemoteAccessRdpRecordings.

        The region where the storage is located  # noqa: E501

        :param aws_storage_region: The aws_storage_region of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._aws_storage_region = aws_storage_region

    @property
    def aws_storage_secret_access_key(self):
        """Gets the aws_storage_secret_access_key of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        AWS secret access key. For more information refer to https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html  # noqa: E501

        :return: The aws_storage_secret_access_key of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._aws_storage_secret_access_key

    @aws_storage_secret_access_key.setter
    def aws_storage_secret_access_key(self, aws_storage_secret_access_key):
        """Sets the aws_storage_secret_access_key of this GatewayUpdateRemoteAccessRdpRecordings.

        AWS secret access key. For more information refer to https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html  # noqa: E501

        :param aws_storage_secret_access_key: The aws_storage_secret_access_key of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._aws_storage_secret_access_key = aws_storage_secret_access_key

    @property
    def azure_storage_account_name(self):
        """Gets the azure_storage_account_name of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        Azure account name. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-overview  # noqa: E501

        :return: The azure_storage_account_name of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._azure_storage_account_name

    @azure_storage_account_name.setter
    def azure_storage_account_name(self, azure_storage_account_name):
        """Sets the azure_storage_account_name of this GatewayUpdateRemoteAccessRdpRecordings.

        Azure account name. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-overview  # noqa: E501

        :param azure_storage_account_name: The azure_storage_account_name of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._azure_storage_account_name = azure_storage_account_name

    @property
    def azure_storage_client_id(self):
        """Gets the azure_storage_client_id of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        Azure client id. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-get-info?tabs=portal  # noqa: E501

        :return: The azure_storage_client_id of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._azure_storage_client_id

    @azure_storage_client_id.setter
    def azure_storage_client_id(self, azure_storage_client_id):
        """Sets the azure_storage_client_id of this GatewayUpdateRemoteAccessRdpRecordings.

        Azure client id. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-get-info?tabs=portal  # noqa: E501

        :param azure_storage_client_id: The azure_storage_client_id of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._azure_storage_client_id = azure_storage_client_id

    @property
    def azure_storage_client_secret(self):
        """Gets the azure_storage_client_secret of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        Azure client secret. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-get-info?tabs=portal  # noqa: E501

        :return: The azure_storage_client_secret of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._azure_storage_client_secret

    @azure_storage_client_secret.setter
    def azure_storage_client_secret(self, azure_storage_client_secret):
        """Sets the azure_storage_client_secret of this GatewayUpdateRemoteAccessRdpRecordings.

        Azure client secret. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-get-info?tabs=portal  # noqa: E501

        :param azure_storage_client_secret: The azure_storage_client_secret of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._azure_storage_client_secret = azure_storage_client_secret

    @property
    def azure_storage_container_name(self):
        """Gets the azure_storage_container_name of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        Azure container name. For more information refer to https://learn.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata  # noqa: E501

        :return: The azure_storage_container_name of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._azure_storage_container_name

    @azure_storage_container_name.setter
    def azure_storage_container_name(self, azure_storage_container_name):
        """Sets the azure_storage_container_name of this GatewayUpdateRemoteAccessRdpRecordings.

        Azure container name. For more information refer to https://learn.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata  # noqa: E501

        :param azure_storage_container_name: The azure_storage_container_name of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._azure_storage_container_name = azure_storage_container_name

    @property
    def azure_storage_tenant_id(self):
        """Gets the azure_storage_tenant_id of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        Azure tenant id. For more information refer to https://learn.microsoft.com/en-us/entra/fundamentals/how-to-find-tenant  # noqa: E501

        :return: The azure_storage_tenant_id of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._azure_storage_tenant_id

    @azure_storage_tenant_id.setter
    def azure_storage_tenant_id(self, azure_storage_tenant_id):
        """Sets the azure_storage_tenant_id of this GatewayUpdateRemoteAccessRdpRecordings.

        Azure tenant id. For more information refer to https://learn.microsoft.com/en-us/entra/fundamentals/how-to-find-tenant  # noqa: E501

        :param azure_storage_tenant_id: The azure_storage_tenant_id of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._azure_storage_tenant_id = azure_storage_tenant_id

    @property
    def json(self):
        """Gets the json of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this GatewayUpdateRemoteAccessRdpRecordings.

        Set output format to JSON  # noqa: E501

        :param json: The json of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def rdp_session_recording(self):
        """Gets the rdp_session_recording of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        Enable recording of rdp session [true/false]  # noqa: E501

        :return: The rdp_session_recording of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._rdp_session_recording

    @rdp_session_recording.setter
    def rdp_session_recording(self, rdp_session_recording):
        """Sets the rdp_session_recording of this GatewayUpdateRemoteAccessRdpRecordings.

        Enable recording of rdp session [true/false]  # noqa: E501

        :param rdp_session_recording: The rdp_session_recording of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._rdp_session_recording = rdp_session_recording

    @property
    def rdp_session_storage(self):
        """Gets the rdp_session_storage of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        Rdp session recording storage destination [local/aws/azure]  # noqa: E501

        :return: The rdp_session_storage of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._rdp_session_storage

    @rdp_session_storage.setter
    def rdp_session_storage(self, rdp_session_storage):
        """Sets the rdp_session_storage of this GatewayUpdateRemoteAccessRdpRecordings.

        Rdp session recording storage destination [local/aws/azure]  # noqa: E501

        :param rdp_session_storage: The rdp_session_storage of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._rdp_session_storage = rdp_session_storage

    @property
    def token(self):
        """Gets the token of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GatewayUpdateRemoteAccessRdpRecordings.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this GatewayUpdateRemoteAccessRdpRecordings.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this GatewayUpdateRemoteAccessRdpRecordings.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GatewayUpdateRemoteAccessRdpRecordings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GatewayUpdateRemoteAccessRdpRecordings):
            return True

        return self.to_dict() != other.to_dict()
