# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayUpdateRemoteAccessRdpRecordings(BaseModel):
    """
    gatewayUpdateRemoteAccessRdpRecordings is a command that update remote access rdp recording config
    """ # noqa: E501
    aws_storage_access_key_id: Optional[StrictStr] = Field(default=None, description="AWS access key id. For more information refer to https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html", alias="aws-storage-access-key-id")
    aws_storage_bucket_name: Optional[StrictStr] = Field(default=None, description="The AWS bucket name. For more information refer to https://docs.aws.amazon.com/s3/", alias="aws-storage-bucket-name")
    aws_storage_bucket_prefix: Optional[StrictStr] = Field(default=None, description="The folder name in S3 bucket. For more information refer to https://docs.aws.amazon.com/s3/", alias="aws-storage-bucket-prefix")
    aws_storage_region: Optional[StrictStr] = Field(default=None, description="The region where the storage is located", alias="aws-storage-region")
    aws_storage_secret_access_key: Optional[StrictStr] = Field(default=None, description="AWS secret access key. For more information refer to https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html", alias="aws-storage-secret-access-key")
    azure_storage_account_name: Optional[StrictStr] = Field(default=None, description="Azure account name. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-overview", alias="azure-storage-account-name")
    azure_storage_client_id: Optional[StrictStr] = Field(default=None, description="Azure client id. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-get-info?tabs=portal", alias="azure-storage-client-id")
    azure_storage_client_secret: Optional[StrictStr] = Field(default=None, description="Azure client secret. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-get-info?tabs=portal", alias="azure-storage-client-secret")
    azure_storage_container_name: Optional[StrictStr] = Field(default=None, description="Azure container name. For more information refer to https://learn.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata", alias="azure-storage-container-name")
    azure_storage_tenant_id: Optional[StrictStr] = Field(default=None, description="Azure tenant id. For more information refer to https://learn.microsoft.com/en-us/entra/fundamentals/how-to-find-tenant", alias="azure-storage-tenant-id")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    rdp_session_recording: Optional[StrictStr] = Field(default=None, description="Enable recording of rdp session [true/false]", alias="rdp-session-recording")
    rdp_session_storage: Optional[StrictStr] = Field(default=None, description="Rdp session recording storage destination [local/aws/azure]", alias="rdp-session-storage")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["aws-storage-access-key-id", "aws-storage-bucket-name", "aws-storage-bucket-prefix", "aws-storage-region", "aws-storage-secret-access-key", "azure-storage-account-name", "azure-storage-client-id", "azure-storage-client-secret", "azure-storage-container-name", "azure-storage-tenant-id", "json", "rdp-session-recording", "rdp-session-storage", "token", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayUpdateRemoteAccessRdpRecordings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayUpdateRemoteAccessRdpRecordings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aws-storage-access-key-id": obj.get("aws-storage-access-key-id"),
            "aws-storage-bucket-name": obj.get("aws-storage-bucket-name"),
            "aws-storage-bucket-prefix": obj.get("aws-storage-bucket-prefix"),
            "aws-storage-region": obj.get("aws-storage-region"),
            "aws-storage-secret-access-key": obj.get("aws-storage-secret-access-key"),
            "azure-storage-account-name": obj.get("azure-storage-account-name"),
            "azure-storage-client-id": obj.get("azure-storage-client-id"),
            "azure-storage-client-secret": obj.get("azure-storage-client-secret"),
            "azure-storage-container-name": obj.get("azure-storage-container-name"),
            "azure-storage-tenant-id": obj.get("azure-storage-tenant-id"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "rdp-session-recording": obj.get("rdp-session-recording"),
            "rdp-session-storage": obj.get("rdp-session-storage"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


