# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateWindowsTarget(BaseModel):
    """
    createWindowsTarget is a command that creates a new windows target. [Deprecated: Use target-create-windows command]
    """ # noqa: E501
    certificate: Optional[StrictStr] = Field(default=None, description="SSL CA certificate in base64 encoding generated from a trusted Certificate Authority (CA)")
    connection_type: Optional[StrictStr] = Field(default='credentials', description="Type of connection to Windows Server [credentials/parent-target]", alias="connection-type")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    domain: Optional[StrictStr] = Field(default=None, description="User domain name")
    hostname: StrictStr = Field(description="Server hostname")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    key: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)")
    max_versions: Optional[StrictStr] = Field(default=None, description="Set the maximum number of versions, limited by the account settings defaults.", alias="max-versions")
    name: StrictStr = Field(description="Target name")
    parent_target_name: Optional[StrictStr] = Field(default=None, description="Name of the parent target, relevant only when connection-type is parent-target", alias="parent-target-name")
    password: StrictStr = Field(description="Privileged user password")
    port: Optional[StrictStr] = Field(default='5986', description="Server WinRM port")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    use_tls: Optional[StrictStr] = Field(default='true', description="Enable/Disable TLS for WinRM over HTTPS [true/false]", alias="use-tls")
    username: StrictStr = Field(description="Privileged username")
    __properties: ClassVar[List[str]] = ["certificate", "connection-type", "description", "domain", "hostname", "json", "key", "max-versions", "name", "parent-target-name", "password", "port", "token", "uid-token", "use-tls", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateWindowsTarget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateWindowsTarget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificate": obj.get("certificate"),
            "connection-type": obj.get("connection-type") if obj.get("connection-type") is not None else 'credentials',
            "description": obj.get("description"),
            "domain": obj.get("domain"),
            "hostname": obj.get("hostname"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "key": obj.get("key"),
            "max-versions": obj.get("max-versions"),
            "name": obj.get("name"),
            "parent-target-name": obj.get("parent-target-name"),
            "password": obj.get("password") if obj.get("password") is not None else 'dummy_value',
            "port": obj.get("port") if obj.get("port") is not None else '5986',
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "use-tls": obj.get("use-tls") if obj.get("use-tls") is not None else 'true',
            "username": obj.get("username") if obj.get("username") is not None else 'dummy_value'
        })
        return _obj


