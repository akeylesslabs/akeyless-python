# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class UpdateItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accessibility': 'str',
        'add_tag': 'list[str]',
        'cert_file_data': 'str',
        'delete_protection': 'str',
        'description': 'str',
        'json': 'bool',
        'name': 'str',
        'new_metadata': 'str',
        'new_name': 'str',
        'rm_tag': 'list[str]',
        'rotate_after_disconnect': 'str',
        'secure_access_add_host': 'list[str]',
        'secure_access_allow_external_user': 'str',
        'secure_access_allow_port_forwading': 'bool',
        'secure_access_aws_account_id': 'str',
        'secure_access_aws_native_cli': 'bool',
        'secure_access_aws_region': 'str',
        'secure_access_bastion_api': 'str',
        'secure_access_bastion_issuer': 'str',
        'secure_access_bastion_ssh': 'str',
        'secure_access_cluster_endpoint': 'str',
        'secure_access_dashboard_url': 'str',
        'secure_access_db_name': 'str',
        'secure_access_db_schema': 'str',
        'secure_access_enable': 'str',
        'secure_access_host': 'list[str]',
        'secure_access_rd_gateway_server': 'str',
        'secure_access_rdp_domain': 'str',
        'secure_access_rdp_user': 'str',
        'secure_access_rm_host': 'list[str]',
        'secure_access_ssh_creds': 'str',
        'secure_access_ssh_creds_user': 'str',
        'secure_access_url': 'str',
        'secure_access_use_internal_bastion': 'bool',
        'secure_access_web_browsing': 'bool',
        'secure_access_web_proxy': 'bool',
        'token': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'accessibility': 'accessibility',
        'add_tag': 'add-tag',
        'cert_file_data': 'cert-file-data',
        'delete_protection': 'delete_protection',
        'description': 'description',
        'json': 'json',
        'name': 'name',
        'new_metadata': 'new-metadata',
        'new_name': 'new-name',
        'rm_tag': 'rm-tag',
        'rotate_after_disconnect': 'rotate-after-disconnect',
        'secure_access_add_host': 'secure-access-add-host',
        'secure_access_allow_external_user': 'secure-access-allow-external-user',
        'secure_access_allow_port_forwading': 'secure-access-allow-port-forwading',
        'secure_access_aws_account_id': 'secure-access-aws-account-id',
        'secure_access_aws_native_cli': 'secure-access-aws-native-cli',
        'secure_access_aws_region': 'secure-access-aws-region',
        'secure_access_bastion_api': 'secure-access-bastion-api',
        'secure_access_bastion_issuer': 'secure-access-bastion-issuer',
        'secure_access_bastion_ssh': 'secure-access-bastion-ssh',
        'secure_access_cluster_endpoint': 'secure-access-cluster-endpoint',
        'secure_access_dashboard_url': 'secure-access-dashboard-url',
        'secure_access_db_name': 'secure-access-db-name',
        'secure_access_db_schema': 'secure-access-db-schema',
        'secure_access_enable': 'secure-access-enable',
        'secure_access_host': 'secure-access-host',
        'secure_access_rd_gateway_server': 'secure-access-rd-gateway-server',
        'secure_access_rdp_domain': 'secure-access-rdp-domain',
        'secure_access_rdp_user': 'secure-access-rdp-user',
        'secure_access_rm_host': 'secure-access-rm-host',
        'secure_access_ssh_creds': 'secure-access-ssh-creds',
        'secure_access_ssh_creds_user': 'secure-access-ssh-creds-user',
        'secure_access_url': 'secure-access-url',
        'secure_access_use_internal_bastion': 'secure-access-use-internal-bastion',
        'secure_access_web_browsing': 'secure-access-web-browsing',
        'secure_access_web_proxy': 'secure-access-web-proxy',
        'token': 'token',
        'uid_token': 'uid-token'
    }

    def __init__(self, accessibility='regular', add_tag=None, cert_file_data=None, delete_protection=None, description='default_metadata', json=False, name=None, new_metadata='default_metadata', new_name=None, rm_tag=None, rotate_after_disconnect='false', secure_access_add_host=None, secure_access_allow_external_user=None, secure_access_allow_port_forwading=None, secure_access_aws_account_id=None, secure_access_aws_native_cli=None, secure_access_aws_region=None, secure_access_bastion_api=None, secure_access_bastion_issuer=None, secure_access_bastion_ssh=None, secure_access_cluster_endpoint=None, secure_access_dashboard_url=None, secure_access_db_name=None, secure_access_db_schema=None, secure_access_enable=None, secure_access_host=None, secure_access_rd_gateway_server=None, secure_access_rdp_domain=None, secure_access_rdp_user=None, secure_access_rm_host=None, secure_access_ssh_creds=None, secure_access_ssh_creds_user=None, secure_access_url=None, secure_access_use_internal_bastion=None, secure_access_web_browsing=False, secure_access_web_proxy=False, token=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """UpdateItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accessibility = None
        self._add_tag = None
        self._cert_file_data = None
        self._delete_protection = None
        self._description = None
        self._json = None
        self._name = None
        self._new_metadata = None
        self._new_name = None
        self._rm_tag = None
        self._rotate_after_disconnect = None
        self._secure_access_add_host = None
        self._secure_access_allow_external_user = None
        self._secure_access_allow_port_forwading = None
        self._secure_access_aws_account_id = None
        self._secure_access_aws_native_cli = None
        self._secure_access_aws_region = None
        self._secure_access_bastion_api = None
        self._secure_access_bastion_issuer = None
        self._secure_access_bastion_ssh = None
        self._secure_access_cluster_endpoint = None
        self._secure_access_dashboard_url = None
        self._secure_access_db_name = None
        self._secure_access_db_schema = None
        self._secure_access_enable = None
        self._secure_access_host = None
        self._secure_access_rd_gateway_server = None
        self._secure_access_rdp_domain = None
        self._secure_access_rdp_user = None
        self._secure_access_rm_host = None
        self._secure_access_ssh_creds = None
        self._secure_access_ssh_creds_user = None
        self._secure_access_url = None
        self._secure_access_use_internal_bastion = None
        self._secure_access_web_browsing = None
        self._secure_access_web_proxy = None
        self._token = None
        self._uid_token = None
        self.discriminator = None

        if accessibility is not None:
            self.accessibility = accessibility
        if add_tag is not None:
            self.add_tag = add_tag
        if cert_file_data is not None:
            self.cert_file_data = cert_file_data
        if delete_protection is not None:
            self.delete_protection = delete_protection
        if description is not None:
            self.description = description
        if json is not None:
            self.json = json
        self.name = name
        if new_metadata is not None:
            self.new_metadata = new_metadata
        if new_name is not None:
            self.new_name = new_name
        if rm_tag is not None:
            self.rm_tag = rm_tag
        if rotate_after_disconnect is not None:
            self.rotate_after_disconnect = rotate_after_disconnect
        if secure_access_add_host is not None:
            self.secure_access_add_host = secure_access_add_host
        if secure_access_allow_external_user is not None:
            self.secure_access_allow_external_user = secure_access_allow_external_user
        if secure_access_allow_port_forwading is not None:
            self.secure_access_allow_port_forwading = secure_access_allow_port_forwading
        if secure_access_aws_account_id is not None:
            self.secure_access_aws_account_id = secure_access_aws_account_id
        if secure_access_aws_native_cli is not None:
            self.secure_access_aws_native_cli = secure_access_aws_native_cli
        if secure_access_aws_region is not None:
            self.secure_access_aws_region = secure_access_aws_region
        if secure_access_bastion_api is not None:
            self.secure_access_bastion_api = secure_access_bastion_api
        if secure_access_bastion_issuer is not None:
            self.secure_access_bastion_issuer = secure_access_bastion_issuer
        if secure_access_bastion_ssh is not None:
            self.secure_access_bastion_ssh = secure_access_bastion_ssh
        if secure_access_cluster_endpoint is not None:
            self.secure_access_cluster_endpoint = secure_access_cluster_endpoint
        if secure_access_dashboard_url is not None:
            self.secure_access_dashboard_url = secure_access_dashboard_url
        if secure_access_db_name is not None:
            self.secure_access_db_name = secure_access_db_name
        if secure_access_db_schema is not None:
            self.secure_access_db_schema = secure_access_db_schema
        if secure_access_enable is not None:
            self.secure_access_enable = secure_access_enable
        if secure_access_host is not None:
            self.secure_access_host = secure_access_host
        if secure_access_rd_gateway_server is not None:
            self.secure_access_rd_gateway_server = secure_access_rd_gateway_server
        if secure_access_rdp_domain is not None:
            self.secure_access_rdp_domain = secure_access_rdp_domain
        if secure_access_rdp_user is not None:
            self.secure_access_rdp_user = secure_access_rdp_user
        if secure_access_rm_host is not None:
            self.secure_access_rm_host = secure_access_rm_host
        if secure_access_ssh_creds is not None:
            self.secure_access_ssh_creds = secure_access_ssh_creds
        if secure_access_ssh_creds_user is not None:
            self.secure_access_ssh_creds_user = secure_access_ssh_creds_user
        if secure_access_url is not None:
            self.secure_access_url = secure_access_url
        if secure_access_use_internal_bastion is not None:
            self.secure_access_use_internal_bastion = secure_access_use_internal_bastion
        if secure_access_web_browsing is not None:
            self.secure_access_web_browsing = secure_access_web_browsing
        if secure_access_web_proxy is not None:
            self.secure_access_web_proxy = secure_access_web_proxy
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def accessibility(self):
        """Gets the accessibility of this UpdateItem.  # noqa: E501

        for personal password manager  # noqa: E501

        :return: The accessibility of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._accessibility

    @accessibility.setter
    def accessibility(self, accessibility):
        """Sets the accessibility of this UpdateItem.

        for personal password manager  # noqa: E501

        :param accessibility: The accessibility of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._accessibility = accessibility

    @property
    def add_tag(self):
        """Gets the add_tag of this UpdateItem.  # noqa: E501

        List of the new tags that will be attached to this item  # noqa: E501

        :return: The add_tag of this UpdateItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_tag

    @add_tag.setter
    def add_tag(self, add_tag):
        """Sets the add_tag of this UpdateItem.

        List of the new tags that will be attached to this item  # noqa: E501

        :param add_tag: The add_tag of this UpdateItem.  # noqa: E501
        :type: list[str]
        """

        self._add_tag = add_tag

    @property
    def cert_file_data(self):
        """Gets the cert_file_data of this UpdateItem.  # noqa: E501

        PEM Certificate in a Base64 format. Used for updating RSA keys' certificates.  # noqa: E501

        :return: The cert_file_data of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._cert_file_data

    @cert_file_data.setter
    def cert_file_data(self, cert_file_data):
        """Sets the cert_file_data of this UpdateItem.

        PEM Certificate in a Base64 format. Used for updating RSA keys' certificates.  # noqa: E501

        :param cert_file_data: The cert_file_data of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._cert_file_data = cert_file_data

    @property
    def delete_protection(self):
        """Gets the delete_protection of this UpdateItem.  # noqa: E501

        Protection from accidental deletion of this item [true/false]  # noqa: E501

        :return: The delete_protection of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._delete_protection

    @delete_protection.setter
    def delete_protection(self, delete_protection):
        """Sets the delete_protection of this UpdateItem.

        Protection from accidental deletion of this item [true/false]  # noqa: E501

        :param delete_protection: The delete_protection of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._delete_protection = delete_protection

    @property
    def description(self):
        """Gets the description of this UpdateItem.  # noqa: E501

        Description of the object  # noqa: E501

        :return: The description of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateItem.

        Description of the object  # noqa: E501

        :param description: The description of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def json(self):
        """Gets the json of this UpdateItem.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this UpdateItem.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this UpdateItem.

        Set output format to JSON  # noqa: E501

        :param json: The json of this UpdateItem.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def name(self):
        """Gets the name of this UpdateItem.  # noqa: E501

        Current item name  # noqa: E501

        :return: The name of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateItem.

        Current item name  # noqa: E501

        :param name: The name of this UpdateItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def new_metadata(self):
        """Gets the new_metadata of this UpdateItem.  # noqa: E501

        Deprecated - use description  # noqa: E501

        :return: The new_metadata of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._new_metadata

    @new_metadata.setter
    def new_metadata(self, new_metadata):
        """Sets the new_metadata of this UpdateItem.

        Deprecated - use description  # noqa: E501

        :param new_metadata: The new_metadata of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._new_metadata = new_metadata

    @property
    def new_name(self):
        """Gets the new_name of this UpdateItem.  # noqa: E501

        New item name  # noqa: E501

        :return: The new_name of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._new_name

    @new_name.setter
    def new_name(self, new_name):
        """Sets the new_name of this UpdateItem.

        New item name  # noqa: E501

        :param new_name: The new_name of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._new_name = new_name

    @property
    def rm_tag(self):
        """Gets the rm_tag of this UpdateItem.  # noqa: E501

        List of the existent tags that will be removed from this item  # noqa: E501

        :return: The rm_tag of this UpdateItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._rm_tag

    @rm_tag.setter
    def rm_tag(self, rm_tag):
        """Sets the rm_tag of this UpdateItem.

        List of the existent tags that will be removed from this item  # noqa: E501

        :param rm_tag: The rm_tag of this UpdateItem.  # noqa: E501
        :type: list[str]
        """

        self._rm_tag = rm_tag

    @property
    def rotate_after_disconnect(self):
        """Gets the rotate_after_disconnect of this UpdateItem.  # noqa: E501

        Rotate the value of the secret after SRA session ends [true/false] (relevant only for Rotated-secret)  # noqa: E501

        :return: The rotate_after_disconnect of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._rotate_after_disconnect

    @rotate_after_disconnect.setter
    def rotate_after_disconnect(self, rotate_after_disconnect):
        """Sets the rotate_after_disconnect of this UpdateItem.

        Rotate the value of the secret after SRA session ends [true/false] (relevant only for Rotated-secret)  # noqa: E501

        :param rotate_after_disconnect: The rotate_after_disconnect of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._rotate_after_disconnect = rotate_after_disconnect

    @property
    def secure_access_add_host(self):
        """Gets the secure_access_add_host of this UpdateItem.  # noqa: E501

        List of the new hosts that will be attached to SRA servers host  # noqa: E501

        :return: The secure_access_add_host of this UpdateItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._secure_access_add_host

    @secure_access_add_host.setter
    def secure_access_add_host(self, secure_access_add_host):
        """Sets the secure_access_add_host of this UpdateItem.

        List of the new hosts that will be attached to SRA servers host  # noqa: E501

        :param secure_access_add_host: The secure_access_add_host of this UpdateItem.  # noqa: E501
        :type: list[str]
        """

        self._secure_access_add_host = secure_access_add_host

    @property
    def secure_access_allow_external_user(self):
        """Gets the secure_access_allow_external_user of this UpdateItem.  # noqa: E501

        Allow providing external user for a domain users [true/false]  # noqa: E501

        :return: The secure_access_allow_external_user of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_allow_external_user

    @secure_access_allow_external_user.setter
    def secure_access_allow_external_user(self, secure_access_allow_external_user):
        """Sets the secure_access_allow_external_user of this UpdateItem.

        Allow providing external user for a domain users [true/false]  # noqa: E501

        :param secure_access_allow_external_user: The secure_access_allow_external_user of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_allow_external_user = secure_access_allow_external_user

    @property
    def secure_access_allow_port_forwading(self):
        """Gets the secure_access_allow_port_forwading of this UpdateItem.  # noqa: E501

        Enable Port forwarding while using CLI access (relevant only for EKS/GKE/K8s Dynamic-Secret)  # noqa: E501

        :return: The secure_access_allow_port_forwading of this UpdateItem.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_allow_port_forwading

    @secure_access_allow_port_forwading.setter
    def secure_access_allow_port_forwading(self, secure_access_allow_port_forwading):
        """Sets the secure_access_allow_port_forwading of this UpdateItem.

        Enable Port forwarding while using CLI access (relevant only for EKS/GKE/K8s Dynamic-Secret)  # noqa: E501

        :param secure_access_allow_port_forwading: The secure_access_allow_port_forwading of this UpdateItem.  # noqa: E501
        :type: bool
        """

        self._secure_access_allow_port_forwading = secure_access_allow_port_forwading

    @property
    def secure_access_aws_account_id(self):
        """Gets the secure_access_aws_account_id of this UpdateItem.  # noqa: E501

        The AWS account id (relevant only for aws)  # noqa: E501

        :return: The secure_access_aws_account_id of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_aws_account_id

    @secure_access_aws_account_id.setter
    def secure_access_aws_account_id(self, secure_access_aws_account_id):
        """Sets the secure_access_aws_account_id of this UpdateItem.

        The AWS account id (relevant only for aws)  # noqa: E501

        :param secure_access_aws_account_id: The secure_access_aws_account_id of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_aws_account_id = secure_access_aws_account_id

    @property
    def secure_access_aws_native_cli(self):
        """Gets the secure_access_aws_native_cli of this UpdateItem.  # noqa: E501

        The AWS native cli (relevant only for aws)  # noqa: E501

        :return: The secure_access_aws_native_cli of this UpdateItem.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_aws_native_cli

    @secure_access_aws_native_cli.setter
    def secure_access_aws_native_cli(self, secure_access_aws_native_cli):
        """Sets the secure_access_aws_native_cli of this UpdateItem.

        The AWS native cli (relevant only for aws)  # noqa: E501

        :param secure_access_aws_native_cli: The secure_access_aws_native_cli of this UpdateItem.  # noqa: E501
        :type: bool
        """

        self._secure_access_aws_native_cli = secure_access_aws_native_cli

    @property
    def secure_access_aws_region(self):
        """Gets the secure_access_aws_region of this UpdateItem.  # noqa: E501

        The AWS region (relevant only for aws)  # noqa: E501

        :return: The secure_access_aws_region of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_aws_region

    @secure_access_aws_region.setter
    def secure_access_aws_region(self, secure_access_aws_region):
        """Sets the secure_access_aws_region of this UpdateItem.

        The AWS region (relevant only for aws)  # noqa: E501

        :param secure_access_aws_region: The secure_access_aws_region of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_aws_region = secure_access_aws_region

    @property
    def secure_access_bastion_api(self):
        """Gets the secure_access_bastion_api of this UpdateItem.  # noqa: E501

        Bastion's SSH control API endpoint. E.g. https://my.bastion:9900 (relevant only for ssh cert issuer)  # noqa: E501

        :return: The secure_access_bastion_api of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_bastion_api

    @secure_access_bastion_api.setter
    def secure_access_bastion_api(self, secure_access_bastion_api):
        """Sets the secure_access_bastion_api of this UpdateItem.

        Bastion's SSH control API endpoint. E.g. https://my.bastion:9900 (relevant only for ssh cert issuer)  # noqa: E501

        :param secure_access_bastion_api: The secure_access_bastion_api of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_bastion_api = secure_access_bastion_api

    @property
    def secure_access_bastion_issuer(self):
        """Gets the secure_access_bastion_issuer of this UpdateItem.  # noqa: E501

        Path to the SSH Certificate Issuer for your Akeyless Bastion  # noqa: E501

        :return: The secure_access_bastion_issuer of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_bastion_issuer

    @secure_access_bastion_issuer.setter
    def secure_access_bastion_issuer(self, secure_access_bastion_issuer):
        """Sets the secure_access_bastion_issuer of this UpdateItem.

        Path to the SSH Certificate Issuer for your Akeyless Bastion  # noqa: E501

        :param secure_access_bastion_issuer: The secure_access_bastion_issuer of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_bastion_issuer = secure_access_bastion_issuer

    @property
    def secure_access_bastion_ssh(self):
        """Gets the secure_access_bastion_ssh of this UpdateItem.  # noqa: E501

        Bastion's SSH server. E.g. my.bastion:22 (relevant only for ssh cert issuer)  # noqa: E501

        :return: The secure_access_bastion_ssh of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_bastion_ssh

    @secure_access_bastion_ssh.setter
    def secure_access_bastion_ssh(self, secure_access_bastion_ssh):
        """Sets the secure_access_bastion_ssh of this UpdateItem.

        Bastion's SSH server. E.g. my.bastion:22 (relevant only for ssh cert issuer)  # noqa: E501

        :param secure_access_bastion_ssh: The secure_access_bastion_ssh of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_bastion_ssh = secure_access_bastion_ssh

    @property
    def secure_access_cluster_endpoint(self):
        """Gets the secure_access_cluster_endpoint of this UpdateItem.  # noqa: E501

        The K8s cluster endpoint URL (relevant only for EKS/GKE/K8s Dynamic-Secret)  # noqa: E501

        :return: The secure_access_cluster_endpoint of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_cluster_endpoint

    @secure_access_cluster_endpoint.setter
    def secure_access_cluster_endpoint(self, secure_access_cluster_endpoint):
        """Sets the secure_access_cluster_endpoint of this UpdateItem.

        The K8s cluster endpoint URL (relevant only for EKS/GKE/K8s Dynamic-Secret)  # noqa: E501

        :param secure_access_cluster_endpoint: The secure_access_cluster_endpoint of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_cluster_endpoint = secure_access_cluster_endpoint

    @property
    def secure_access_dashboard_url(self):
        """Gets the secure_access_dashboard_url of this UpdateItem.  # noqa: E501

        The K8s dashboard url (relevant only for k8s)  # noqa: E501

        :return: The secure_access_dashboard_url of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_dashboard_url

    @secure_access_dashboard_url.setter
    def secure_access_dashboard_url(self, secure_access_dashboard_url):
        """Sets the secure_access_dashboard_url of this UpdateItem.

        The K8s dashboard url (relevant only for k8s)  # noqa: E501

        :param secure_access_dashboard_url: The secure_access_dashboard_url of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_dashboard_url = secure_access_dashboard_url

    @property
    def secure_access_db_name(self):
        """Gets the secure_access_db_name of this UpdateItem.  # noqa: E501

        The DB name (relevant only for DB Dynamic-Secret)  # noqa: E501

        :return: The secure_access_db_name of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_db_name

    @secure_access_db_name.setter
    def secure_access_db_name(self, secure_access_db_name):
        """Sets the secure_access_db_name of this UpdateItem.

        The DB name (relevant only for DB Dynamic-Secret)  # noqa: E501

        :param secure_access_db_name: The secure_access_db_name of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_db_name = secure_access_db_name

    @property
    def secure_access_db_schema(self):
        """Gets the secure_access_db_schema of this UpdateItem.  # noqa: E501

        The DB schema (relevant only for DB Dynamic-Secret)  # noqa: E501

        :return: The secure_access_db_schema of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_db_schema

    @secure_access_db_schema.setter
    def secure_access_db_schema(self, secure_access_db_schema):
        """Sets the secure_access_db_schema of this UpdateItem.

        The DB schema (relevant only for DB Dynamic-Secret)  # noqa: E501

        :param secure_access_db_schema: The secure_access_db_schema of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_db_schema = secure_access_db_schema

    @property
    def secure_access_enable(self):
        """Gets the secure_access_enable of this UpdateItem.  # noqa: E501

        Enable/Disable secure remote access [true/false]  # noqa: E501

        :return: The secure_access_enable of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_enable

    @secure_access_enable.setter
    def secure_access_enable(self, secure_access_enable):
        """Sets the secure_access_enable of this UpdateItem.

        Enable/Disable secure remote access [true/false]  # noqa: E501

        :param secure_access_enable: The secure_access_enable of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_enable = secure_access_enable

    @property
    def secure_access_host(self):
        """Gets the secure_access_host of this UpdateItem.  # noqa: E501

        Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)  # noqa: E501

        :return: The secure_access_host of this UpdateItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._secure_access_host

    @secure_access_host.setter
    def secure_access_host(self, secure_access_host):
        """Sets the secure_access_host of this UpdateItem.

        Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)  # noqa: E501

        :param secure_access_host: The secure_access_host of this UpdateItem.  # noqa: E501
        :type: list[str]
        """

        self._secure_access_host = secure_access_host

    @property
    def secure_access_rd_gateway_server(self):
        """Gets the secure_access_rd_gateway_server of this UpdateItem.  # noqa: E501

        RD Gateway server (relevant only for rdp)  # noqa: E501

        :return: The secure_access_rd_gateway_server of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_rd_gateway_server

    @secure_access_rd_gateway_server.setter
    def secure_access_rd_gateway_server(self, secure_access_rd_gateway_server):
        """Sets the secure_access_rd_gateway_server of this UpdateItem.

        RD Gateway server (relevant only for rdp)  # noqa: E501

        :param secure_access_rd_gateway_server: The secure_access_rd_gateway_server of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_rd_gateway_server = secure_access_rd_gateway_server

    @property
    def secure_access_rdp_domain(self):
        """Gets the secure_access_rdp_domain of this UpdateItem.  # noqa: E501

        Required when the Dynamic Secret is used for a domain user (relevant only for RDP Dynamic-Secret)  # noqa: E501

        :return: The secure_access_rdp_domain of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_rdp_domain

    @secure_access_rdp_domain.setter
    def secure_access_rdp_domain(self, secure_access_rdp_domain):
        """Sets the secure_access_rdp_domain of this UpdateItem.

        Required when the Dynamic Secret is used for a domain user (relevant only for RDP Dynamic-Secret)  # noqa: E501

        :param secure_access_rdp_domain: The secure_access_rdp_domain of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_rdp_domain = secure_access_rdp_domain

    @property
    def secure_access_rdp_user(self):
        """Gets the secure_access_rdp_user of this UpdateItem.  # noqa: E501

        Override the RDP Domain username  # noqa: E501

        :return: The secure_access_rdp_user of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_rdp_user

    @secure_access_rdp_user.setter
    def secure_access_rdp_user(self, secure_access_rdp_user):
        """Sets the secure_access_rdp_user of this UpdateItem.

        Override the RDP Domain username  # noqa: E501

        :param secure_access_rdp_user: The secure_access_rdp_user of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_rdp_user = secure_access_rdp_user

    @property
    def secure_access_rm_host(self):
        """Gets the secure_access_rm_host of this UpdateItem.  # noqa: E501

        List of the existent hosts that will be removed from SRA servers host  # noqa: E501

        :return: The secure_access_rm_host of this UpdateItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._secure_access_rm_host

    @secure_access_rm_host.setter
    def secure_access_rm_host(self, secure_access_rm_host):
        """Sets the secure_access_rm_host of this UpdateItem.

        List of the existent hosts that will be removed from SRA servers host  # noqa: E501

        :param secure_access_rm_host: The secure_access_rm_host of this UpdateItem.  # noqa: E501
        :type: list[str]
        """

        self._secure_access_rm_host = secure_access_rm_host

    @property
    def secure_access_ssh_creds(self):
        """Gets the secure_access_ssh_creds of this UpdateItem.  # noqa: E501

        Secret values contains SSH Credentials, either Private Key or Password [password/private-key] (relevant only for Static-Secret or Rotated-secret)  # noqa: E501

        :return: The secure_access_ssh_creds of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_ssh_creds

    @secure_access_ssh_creds.setter
    def secure_access_ssh_creds(self, secure_access_ssh_creds):
        """Sets the secure_access_ssh_creds of this UpdateItem.

        Secret values contains SSH Credentials, either Private Key or Password [password/private-key] (relevant only for Static-Secret or Rotated-secret)  # noqa: E501

        :param secure_access_ssh_creds: The secure_access_ssh_creds of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_ssh_creds = secure_access_ssh_creds

    @property
    def secure_access_ssh_creds_user(self):
        """Gets the secure_access_ssh_creds_user of this UpdateItem.  # noqa: E501

        SSH username to connect to target server, must be in 'Allowed Users' list (relevant only for ssh cert issuer)  # noqa: E501

        :return: The secure_access_ssh_creds_user of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_ssh_creds_user

    @secure_access_ssh_creds_user.setter
    def secure_access_ssh_creds_user(self, secure_access_ssh_creds_user):
        """Sets the secure_access_ssh_creds_user of this UpdateItem.

        SSH username to connect to target server, must be in 'Allowed Users' list (relevant only for ssh cert issuer)  # noqa: E501

        :param secure_access_ssh_creds_user: The secure_access_ssh_creds_user of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_ssh_creds_user = secure_access_ssh_creds_user

    @property
    def secure_access_url(self):
        """Gets the secure_access_url of this UpdateItem.  # noqa: E501

        Destination URL to inject secrets  # noqa: E501

        :return: The secure_access_url of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_url

    @secure_access_url.setter
    def secure_access_url(self, secure_access_url):
        """Sets the secure_access_url of this UpdateItem.

        Destination URL to inject secrets  # noqa: E501

        :param secure_access_url: The secure_access_url of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._secure_access_url = secure_access_url

    @property
    def secure_access_use_internal_bastion(self):
        """Gets the secure_access_use_internal_bastion of this UpdateItem.  # noqa: E501

        Use internal SSH Bastion  # noqa: E501

        :return: The secure_access_use_internal_bastion of this UpdateItem.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_use_internal_bastion

    @secure_access_use_internal_bastion.setter
    def secure_access_use_internal_bastion(self, secure_access_use_internal_bastion):
        """Sets the secure_access_use_internal_bastion of this UpdateItem.

        Use internal SSH Bastion  # noqa: E501

        :param secure_access_use_internal_bastion: The secure_access_use_internal_bastion of this UpdateItem.  # noqa: E501
        :type: bool
        """

        self._secure_access_use_internal_bastion = secure_access_use_internal_bastion

    @property
    def secure_access_web_browsing(self):
        """Gets the secure_access_web_browsing of this UpdateItem.  # noqa: E501

        Secure browser via Akeyless Web Access Bastion  # noqa: E501

        :return: The secure_access_web_browsing of this UpdateItem.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_web_browsing

    @secure_access_web_browsing.setter
    def secure_access_web_browsing(self, secure_access_web_browsing):
        """Sets the secure_access_web_browsing of this UpdateItem.

        Secure browser via Akeyless Web Access Bastion  # noqa: E501

        :param secure_access_web_browsing: The secure_access_web_browsing of this UpdateItem.  # noqa: E501
        :type: bool
        """

        self._secure_access_web_browsing = secure_access_web_browsing

    @property
    def secure_access_web_proxy(self):
        """Gets the secure_access_web_proxy of this UpdateItem.  # noqa: E501

        Web-Proxy via Akeyless Web Access Bastion  # noqa: E501

        :return: The secure_access_web_proxy of this UpdateItem.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_web_proxy

    @secure_access_web_proxy.setter
    def secure_access_web_proxy(self, secure_access_web_proxy):
        """Sets the secure_access_web_proxy of this UpdateItem.

        Web-Proxy via Akeyless Web Access Bastion  # noqa: E501

        :param secure_access_web_proxy: The secure_access_web_proxy of this UpdateItem.  # noqa: E501
        :type: bool
        """

        self._secure_access_web_proxy = secure_access_web_proxy

    @property
    def token(self):
        """Gets the token of this UpdateItem.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this UpdateItem.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this UpdateItem.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this UpdateItem.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this UpdateItem.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this UpdateItem.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateItem):
            return True

        return self.to_dict() != other.to_dict()
