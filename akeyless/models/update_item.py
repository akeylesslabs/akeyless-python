# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateItem(BaseModel):
    """
    UpdateItem
    """ # noqa: E501
    provider_type: Optional[StrictStr] = Field(default=None, alias="ProviderType")
    accessibility: Optional[StrictStr] = Field(default='regular', description="for personal password manager")
    add_tag: Optional[List[StrictStr]] = Field(default=None, description="List of the new tags that will be attached to this item", alias="add-tag")
    cert_file_data: Optional[StrictStr] = Field(default=None, description="PEM Certificate in a Base64 format. Used for updating RSA keys' certificates.", alias="cert-file-data")
    certificate_format: Optional[StrictStr] = Field(default=None, alias="certificate-format")
    change_event: Optional[StrictStr] = Field(default=None, description="Trigger an event when a secret value changed [true/false] (Relevant only for Static Secret)", alias="change-event")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default='default_metadata', description="Description of the object")
    expiration_event_in: Optional[List[StrictStr]] = Field(default=None, description="How many days before the expiration of the certificate would you like to be notified.", alias="expiration-event-in")
    host_provider: Optional[StrictStr] = Field(default=None, description="Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret", alias="host-provider")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    max_versions: Optional[StrictStr] = Field(default=None, description="Set the maximum number of versions, limited by the account settings defaults.", alias="max-versions")
    name: StrictStr = Field(description="Current item name")
    new_metadata: Optional[StrictStr] = Field(default='default_metadata', description="Deprecated - use description", alias="new-metadata")
    new_name: Optional[StrictStr] = Field(default=None, description="New item name", alias="new-name")
    rm_tag: Optional[List[StrictStr]] = Field(default=None, description="List of the existent tags that will be removed from this item", alias="rm-tag")
    rotate_after_disconnect: Optional[StrictStr] = Field(default='false', description="Rotate the value of the secret after SRA session ends [true/false]", alias="rotate-after-disconnect")
    secure_access_add_host: Optional[List[StrictStr]] = Field(default=None, description="List of the new hosts that will be attached to SRA servers host", alias="secure-access-add-host")
    secure_access_allow_external_user: Optional[StrictStr] = Field(default=None, description="Allow providing external user for a domain users [true/false]", alias="secure-access-allow-external-user")
    secure_access_allow_port_forwading: Optional[StrictBool] = Field(default=None, description="Enable Port forwarding while using CLI access (relevant only for EKS/GKE/K8s Dynamic-Secret)", alias="secure-access-allow-port-forwading")
    secure_access_api: Optional[StrictStr] = Field(default=None, description="Bastion's SSH control API endpoint. E.g. https://my.sra-server:9900 (relevant only for ssh cert issuer)", alias="secure-access-api")
    secure_access_aws_account_id: Optional[StrictStr] = Field(default=None, description="The AWS account id (relevant only for aws)", alias="secure-access-aws-account-id")
    secure_access_aws_native_cli: Optional[StrictBool] = Field(default=None, description="The AWS native cli (relevant only for aws)", alias="secure-access-aws-native-cli")
    secure_access_aws_region: Optional[StrictStr] = Field(default=None, description="The AWS region (relevant only for aws)", alias="secure-access-aws-region")
    secure_access_bastion_api: Optional[StrictStr] = Field(default=None, description="Deprecated. use secure-access-api", alias="secure-access-bastion-api")
    secure_access_bastion_issuer: Optional[StrictStr] = Field(default=None, description="Deprecated. use secure-access-certificate-issuer", alias="secure-access-bastion-issuer")
    secure_access_bastion_ssh: Optional[StrictStr] = Field(default=None, description="Deprecated. use secure-access-ssh", alias="secure-access-bastion-ssh")
    secure_access_certificate_issuer: Optional[StrictStr] = Field(default=None, description="Path to the SSH Certificate Issuer for your Akeyless Secure Access", alias="secure-access-certificate-issuer")
    secure_access_cluster_endpoint: Optional[StrictStr] = Field(default=None, description="The K8s cluster endpoint URL (relevant only for EKS/GKE/K8s Dynamic-Secret)", alias="secure-access-cluster-endpoint")
    secure_access_dashboard_url: Optional[StrictStr] = Field(default=None, description="The K8s dashboard url (relevant only for k8s)", alias="secure-access-dashboard-url")
    secure_access_db_name: Optional[StrictStr] = Field(default=None, description="The DB name (relevant only for DB Dynamic-Secret)", alias="secure-access-db-name")
    secure_access_db_schema: Optional[StrictStr] = Field(default=None, description="The DB schema (relevant only for DB Dynamic-Secret)", alias="secure-access-db-schema")
    secure_access_enable: Optional[StrictStr] = Field(default=None, description="Enable/Disable secure remote access [true/false]", alias="secure-access-enable")
    secure_access_host: Optional[List[StrictStr]] = Field(default=None, description="Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)", alias="secure-access-host")
    secure_access_rd_gateway_server: Optional[StrictStr] = Field(default=None, description="RD Gateway server (relevant only for rdp)", alias="secure-access-rd-gateway-server")
    secure_access_rdp_domain: Optional[StrictStr] = Field(default=None, description="Required when the Dynamic Secret is used for a domain user (relevant only for RDP Dynamic-Secret)", alias="secure-access-rdp-domain")
    secure_access_rdp_user: Optional[StrictStr] = Field(default=None, description="Override the RDP Domain username", alias="secure-access-rdp-user")
    secure_access_rm_host: Optional[List[StrictStr]] = Field(default=None, description="List of the existent hosts that will be removed from SRA servers host", alias="secure-access-rm-host")
    secure_access_ssh: Optional[StrictStr] = Field(default=None, description="Bastion's SSH server. E.g. my.sra-server:22 (relevant only for ssh cert issuer)", alias="secure-access-ssh")
    secure_access_ssh_creds: Optional[StrictStr] = Field(default=None, description="Secret values contains SSH Credentials, either Private Key or Password [password/private-key] (relevant only for Static-Secret or Rotated-secret)", alias="secure-access-ssh-creds")
    secure_access_ssh_creds_user: Optional[StrictStr] = Field(default=None, description="SSH username to connect to target server, must be in 'Allowed Users' list (relevant only for ssh cert issuer)", alias="secure-access-ssh-creds-user")
    secure_access_url: Optional[StrictStr] = Field(default=None, description="Destination URL to inject secrets", alias="secure-access-url")
    secure_access_use_internal_bastion: Optional[StrictBool] = Field(default=None, description="Deprecated. Use secure-access-use-internal-ssh-access", alias="secure-access-use-internal-bastion")
    secure_access_use_internal_ssh_access: Optional[StrictBool] = Field(default=None, description="Use internal SSH Access", alias="secure-access-use-internal-ssh-access")
    secure_access_web_browsing: Optional[StrictBool] = Field(default=False, description="Secure browser via Akeyless's Secure Remote Access (SRA)", alias="secure-access-web-browsing")
    secure_access_web_proxy: Optional[StrictBool] = Field(default=False, description="Web-Proxy via Akeyless's Secure Remote Access (SRA)", alias="secure-access-web-proxy")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["ProviderType", "accessibility", "add-tag", "cert-file-data", "certificate-format", "change-event", "delete_protection", "description", "expiration-event-in", "host-provider", "json", "max-versions", "name", "new-metadata", "new-name", "rm-tag", "rotate-after-disconnect", "secure-access-add-host", "secure-access-allow-external-user", "secure-access-allow-port-forwading", "secure-access-api", "secure-access-aws-account-id", "secure-access-aws-native-cli", "secure-access-aws-region", "secure-access-bastion-api", "secure-access-bastion-issuer", "secure-access-bastion-ssh", "secure-access-certificate-issuer", "secure-access-cluster-endpoint", "secure-access-dashboard-url", "secure-access-db-name", "secure-access-db-schema", "secure-access-enable", "secure-access-host", "secure-access-rd-gateway-server", "secure-access-rdp-domain", "secure-access-rdp-user", "secure-access-rm-host", "secure-access-ssh", "secure-access-ssh-creds", "secure-access-ssh-creds-user", "secure-access-url", "secure-access-use-internal-bastion", "secure-access-use-internal-ssh-access", "secure-access-web-browsing", "secure-access-web-proxy", "token", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ProviderType": obj.get("ProviderType"),
            "accessibility": obj.get("accessibility") if obj.get("accessibility") is not None else 'regular',
            "add-tag": obj.get("add-tag"),
            "cert-file-data": obj.get("cert-file-data"),
            "certificate-format": obj.get("certificate-format"),
            "change-event": obj.get("change-event"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description") if obj.get("description") is not None else 'default_metadata',
            "expiration-event-in": obj.get("expiration-event-in"),
            "host-provider": obj.get("host-provider"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "max-versions": obj.get("max-versions"),
            "name": obj.get("name"),
            "new-metadata": obj.get("new-metadata") if obj.get("new-metadata") is not None else 'default_metadata',
            "new-name": obj.get("new-name"),
            "rm-tag": obj.get("rm-tag"),
            "rotate-after-disconnect": obj.get("rotate-after-disconnect") if obj.get("rotate-after-disconnect") is not None else 'false',
            "secure-access-add-host": obj.get("secure-access-add-host"),
            "secure-access-allow-external-user": obj.get("secure-access-allow-external-user"),
            "secure-access-allow-port-forwading": obj.get("secure-access-allow-port-forwading"),
            "secure-access-api": obj.get("secure-access-api"),
            "secure-access-aws-account-id": obj.get("secure-access-aws-account-id"),
            "secure-access-aws-native-cli": obj.get("secure-access-aws-native-cli"),
            "secure-access-aws-region": obj.get("secure-access-aws-region"),
            "secure-access-bastion-api": obj.get("secure-access-bastion-api"),
            "secure-access-bastion-issuer": obj.get("secure-access-bastion-issuer"),
            "secure-access-bastion-ssh": obj.get("secure-access-bastion-ssh"),
            "secure-access-certificate-issuer": obj.get("secure-access-certificate-issuer"),
            "secure-access-cluster-endpoint": obj.get("secure-access-cluster-endpoint"),
            "secure-access-dashboard-url": obj.get("secure-access-dashboard-url"),
            "secure-access-db-name": obj.get("secure-access-db-name"),
            "secure-access-db-schema": obj.get("secure-access-db-schema"),
            "secure-access-enable": obj.get("secure-access-enable"),
            "secure-access-host": obj.get("secure-access-host"),
            "secure-access-rd-gateway-server": obj.get("secure-access-rd-gateway-server"),
            "secure-access-rdp-domain": obj.get("secure-access-rdp-domain"),
            "secure-access-rdp-user": obj.get("secure-access-rdp-user"),
            "secure-access-rm-host": obj.get("secure-access-rm-host"),
            "secure-access-ssh": obj.get("secure-access-ssh"),
            "secure-access-ssh-creds": obj.get("secure-access-ssh-creds"),
            "secure-access-ssh-creds-user": obj.get("secure-access-ssh-creds-user"),
            "secure-access-url": obj.get("secure-access-url"),
            "secure-access-use-internal-bastion": obj.get("secure-access-use-internal-bastion"),
            "secure-access-use-internal-ssh-access": obj.get("secure-access-use-internal-ssh-access"),
            "secure-access-web-browsing": obj.get("secure-access-web-browsing") if obj.get("secure-access-web-browsing") is not None else False,
            "secure-access-web-proxy": obj.get("secure-access-web-proxy") if obj.get("secure-access-web-proxy") is not None else False,
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


