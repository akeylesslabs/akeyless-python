# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class EKSTargetDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'eks_access_key_id': 'str',
        'eks_cluster_ca_certificate': 'str',
        'eks_cluster_endpoint': 'str',
        'eks_cluster_name': 'str',
        'eks_region': 'str',
        'eks_secret_access_key': 'str',
        'use_gw_cloud_identity': 'bool'
    }

    attribute_map = {
        'eks_access_key_id': 'eks_access_key_id',
        'eks_cluster_ca_certificate': 'eks_cluster_ca_certificate',
        'eks_cluster_endpoint': 'eks_cluster_endpoint',
        'eks_cluster_name': 'eks_cluster_name',
        'eks_region': 'eks_region',
        'eks_secret_access_key': 'eks_secret_access_key',
        'use_gw_cloud_identity': 'use_gw_cloud_identity'
    }

    def __init__(self, eks_access_key_id=None, eks_cluster_ca_certificate=None, eks_cluster_endpoint=None, eks_cluster_name=None, eks_region=None, eks_secret_access_key=None, use_gw_cloud_identity=None, local_vars_configuration=None):  # noqa: E501
        """EKSTargetDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._eks_access_key_id = None
        self._eks_cluster_ca_certificate = None
        self._eks_cluster_endpoint = None
        self._eks_cluster_name = None
        self._eks_region = None
        self._eks_secret_access_key = None
        self._use_gw_cloud_identity = None
        self.discriminator = None

        if eks_access_key_id is not None:
            self.eks_access_key_id = eks_access_key_id
        if eks_cluster_ca_certificate is not None:
            self.eks_cluster_ca_certificate = eks_cluster_ca_certificate
        if eks_cluster_endpoint is not None:
            self.eks_cluster_endpoint = eks_cluster_endpoint
        if eks_cluster_name is not None:
            self.eks_cluster_name = eks_cluster_name
        if eks_region is not None:
            self.eks_region = eks_region
        if eks_secret_access_key is not None:
            self.eks_secret_access_key = eks_secret_access_key
        if use_gw_cloud_identity is not None:
            self.use_gw_cloud_identity = use_gw_cloud_identity

    @property
    def eks_access_key_id(self):
        """Gets the eks_access_key_id of this EKSTargetDetails.  # noqa: E501


        :return: The eks_access_key_id of this EKSTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_access_key_id

    @eks_access_key_id.setter
    def eks_access_key_id(self, eks_access_key_id):
        """Sets the eks_access_key_id of this EKSTargetDetails.


        :param eks_access_key_id: The eks_access_key_id of this EKSTargetDetails.  # noqa: E501
        :type: str
        """

        self._eks_access_key_id = eks_access_key_id

    @property
    def eks_cluster_ca_certificate(self):
        """Gets the eks_cluster_ca_certificate of this EKSTargetDetails.  # noqa: E501


        :return: The eks_cluster_ca_certificate of this EKSTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_cluster_ca_certificate

    @eks_cluster_ca_certificate.setter
    def eks_cluster_ca_certificate(self, eks_cluster_ca_certificate):
        """Sets the eks_cluster_ca_certificate of this EKSTargetDetails.


        :param eks_cluster_ca_certificate: The eks_cluster_ca_certificate of this EKSTargetDetails.  # noqa: E501
        :type: str
        """

        self._eks_cluster_ca_certificate = eks_cluster_ca_certificate

    @property
    def eks_cluster_endpoint(self):
        """Gets the eks_cluster_endpoint of this EKSTargetDetails.  # noqa: E501


        :return: The eks_cluster_endpoint of this EKSTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_cluster_endpoint

    @eks_cluster_endpoint.setter
    def eks_cluster_endpoint(self, eks_cluster_endpoint):
        """Sets the eks_cluster_endpoint of this EKSTargetDetails.


        :param eks_cluster_endpoint: The eks_cluster_endpoint of this EKSTargetDetails.  # noqa: E501
        :type: str
        """

        self._eks_cluster_endpoint = eks_cluster_endpoint

    @property
    def eks_cluster_name(self):
        """Gets the eks_cluster_name of this EKSTargetDetails.  # noqa: E501


        :return: The eks_cluster_name of this EKSTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_cluster_name

    @eks_cluster_name.setter
    def eks_cluster_name(self, eks_cluster_name):
        """Sets the eks_cluster_name of this EKSTargetDetails.


        :param eks_cluster_name: The eks_cluster_name of this EKSTargetDetails.  # noqa: E501
        :type: str
        """

        self._eks_cluster_name = eks_cluster_name

    @property
    def eks_region(self):
        """Gets the eks_region of this EKSTargetDetails.  # noqa: E501


        :return: The eks_region of this EKSTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_region

    @eks_region.setter
    def eks_region(self, eks_region):
        """Sets the eks_region of this EKSTargetDetails.


        :param eks_region: The eks_region of this EKSTargetDetails.  # noqa: E501
        :type: str
        """

        self._eks_region = eks_region

    @property
    def eks_secret_access_key(self):
        """Gets the eks_secret_access_key of this EKSTargetDetails.  # noqa: E501


        :return: The eks_secret_access_key of this EKSTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._eks_secret_access_key

    @eks_secret_access_key.setter
    def eks_secret_access_key(self, eks_secret_access_key):
        """Sets the eks_secret_access_key of this EKSTargetDetails.


        :param eks_secret_access_key: The eks_secret_access_key of this EKSTargetDetails.  # noqa: E501
        :type: str
        """

        self._eks_secret_access_key = eks_secret_access_key

    @property
    def use_gw_cloud_identity(self):
        """Gets the use_gw_cloud_identity of this EKSTargetDetails.  # noqa: E501


        :return: The use_gw_cloud_identity of this EKSTargetDetails.  # noqa: E501
        :rtype: bool
        """
        return self._use_gw_cloud_identity

    @use_gw_cloud_identity.setter
    def use_gw_cloud_identity(self, use_gw_cloud_identity):
        """Sets the use_gw_cloud_identity of this EKSTargetDetails.


        :param use_gw_cloud_identity: The use_gw_cloud_identity of this EKSTargetDetails.  # noqa: E501
        :type: bool
        """

        self._use_gw_cloud_identity = use_gw_cloud_identity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EKSTargetDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EKSTargetDetails):
            return True

        return self.to_dict() != other.to_dict()
