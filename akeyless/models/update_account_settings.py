# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateAccountSettings(BaseModel):
    """
    UpdateAccountSettings
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="Address")
    bound_ips: Optional[List[StrictStr]] = Field(default=None, description="A default list of comma-separated CIDR block that are allowed to authenticate.", alias="bound-ips")
    city: Optional[StrictStr] = Field(default=None, description="City")
    company_name: Optional[StrictStr] = Field(default=None, description="Company name", alias="company-name")
    country: Optional[StrictStr] = Field(default=None, description="Country")
    default_key_name: Optional[StrictStr] = Field(default=None, description="Set the account default key based on the DFC key name. Use \"set-original-akeyless-default-key\" to revert to using the original default key of the account.", alias="default-key-name")
    default_share_link_ttl_minutes: Optional[StrictStr] = Field(default=None, description="Set the default ttl in minutes for sharing item number between 60 and 43200", alias="default-share-link-ttl-minutes")
    default_versioning: Optional[StrictStr] = Field(default=None, description="If set to true, new versions is enabled by default", alias="default-versioning")
    dp_enable_classic_key_protection: Optional[StrictStr] = Field(default=None, description="Set to update protection with classic keys state [true/false]", alias="dp-enable-classic-key-protection")
    dynamic_secret_max_ttl: Optional[StrictInt] = Field(default=None, description="Set the maximum ttl for dynamic secrets", alias="dynamic-secret-max-ttl")
    dynamic_secret_max_ttl_enable: Optional[StrictStr] = Field(default=None, description="Set a maximum ttl for dynamic secrets [true/false]", alias="dynamic-secret-max-ttl-enable")
    enable_item_sharing: Optional[StrictStr] = Field(default=None, description="Enable sharing items [true/false]", alias="enable-item-sharing")
    enable_password_expiration: Optional[StrictStr] = Field(default=None, description="Enable password expiration policy [true/false]", alias="enable-password-expiration")
    force_new_versions: Optional[StrictStr] = Field(default=None, description="If set to true, new version will be created on update", alias="force-new-versions")
    gw_bound_ips: Optional[List[StrictStr]] = Field(default=None, description="A default list of comma-separated CIDR block that acts as a trusted Gateway entity.", alias="gw-bound-ips")
    invalid_characters: Optional[StrictStr] = Field(default='notReceivedInvalidCharacter', description="Characters that cannot be used for items/targets/roles/auths/event_forwarder names. Empty string will enforce nothing.", alias="invalid-characters")
    item_type: Optional[StrictStr] = Field(default=None, description="VersionSettingsObjectType defines object types for account version settings", alias="item-type")
    items_deletion_protection: Optional[StrictStr] = Field(default=None, description="Set or unset the default behaviour of items deletion protection [true/false]", alias="items-deletion-protection")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    jwt_ttl_default: Optional[StrictInt] = Field(default=None, description="Default ttl", alias="jwt-ttl-default")
    jwt_ttl_max: Optional[StrictInt] = Field(default=None, description="Maximum ttl", alias="jwt-ttl-max")
    jwt_ttl_min: Optional[StrictInt] = Field(default=None, description="Minimum ttl", alias="jwt-ttl-min")
    lock_bound_ips: Optional[StrictStr] = Field(default=None, description="Lock bound-ips setting globally in the account.", alias="lock-bound-ips")
    lock_default_key: Optional[StrictStr] = Field(default=None, description="Lock the account's default protection key, if set - users will not be able to use a different protection key, relevant only if default-key-name is configured [true/false]", alias="lock-default-key")
    lock_gw_bound_ips: Optional[StrictStr] = Field(default=None, description="Lock gw-bound-ips setting in the account.", alias="lock-gw-bound-ips")
    max_rotation_interval: Optional[StrictInt] = Field(default=None, description="Set the maximum rotation interval for rotated secrets auto rotation settings", alias="max-rotation-interval")
    max_rotation_interval_enable: Optional[StrictStr] = Field(default=None, description="Set a maximum rotation interval for rotated secrets auto rotation settings [true/false]", alias="max-rotation-interval-enable")
    max_versions: Optional[StrictStr] = Field(default=None, description="Max versions", alias="max-versions")
    password_expiration_days: Optional[StrictStr] = Field(default=None, description="Specifies the number of days that a password is valid before it must be changed. A default value of 90 days is used.", alias="password-expiration-days")
    password_expiration_notification_days: Optional[StrictStr] = Field(default=None, description="Specifies the number of days before a user receives notification that their password will expire. A default value of 14 days is used.", alias="password-expiration-notification-days")
    password_length: Optional[StrictInt] = Field(default=None, description="Password length between 5 - to 50 characters", alias="password-length")
    phone: Optional[StrictStr] = Field(default=None, description="Phone number")
    postal_code: Optional[StrictStr] = Field(default=None, description="Postal code", alias="postal-code")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    usage_event_enable: Optional[StrictStr] = Field(default=None, description="Enable event for objects that have not been used or changed [true/false]", alias="usage-event-enable")
    usage_event_interval: Optional[StrictInt] = Field(default=None, description="Interval by days for unused objects. Default and minimum interval is 90 days", alias="usage-event-interval")
    usage_event_object_type: Optional[StrictStr] = Field(default=None, description="Usage event is supported for auth method or secrets-and-keys [auth/item]", alias="usage-event-object-type")
    use_capital_letters: Optional[StrictStr] = Field(default=None, description="Password must contain capital letters [true/false]", alias="use-capital-letters")
    use_lower_letters: Optional[StrictStr] = Field(default=None, description="Password must contain lower case letters [true/false]", alias="use-lower-letters")
    use_numbers: Optional[StrictStr] = Field(default=None, description="Password must contain numbers [true/false]", alias="use-numbers")
    use_special_characters: Optional[StrictStr] = Field(default=None, description="Password must contain special characters [true/false]", alias="use-special-characters")
    __properties: ClassVar[List[str]] = ["address", "bound-ips", "city", "company-name", "country", "default-key-name", "default-share-link-ttl-minutes", "default-versioning", "dp-enable-classic-key-protection", "dynamic-secret-max-ttl", "dynamic-secret-max-ttl-enable", "enable-item-sharing", "enable-password-expiration", "force-new-versions", "gw-bound-ips", "invalid-characters", "item-type", "items-deletion-protection", "json", "jwt-ttl-default", "jwt-ttl-max", "jwt-ttl-min", "lock-bound-ips", "lock-default-key", "lock-gw-bound-ips", "max-rotation-interval", "max-rotation-interval-enable", "max-versions", "password-expiration-days", "password-expiration-notification-days", "password-length", "phone", "postal-code", "token", "uid-token", "usage-event-enable", "usage-event-interval", "usage-event-object-type", "use-capital-letters", "use-lower-letters", "use-numbers", "use-special-characters"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateAccountSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateAccountSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "bound-ips": obj.get("bound-ips"),
            "city": obj.get("city"),
            "company-name": obj.get("company-name"),
            "country": obj.get("country"),
            "default-key-name": obj.get("default-key-name"),
            "default-share-link-ttl-minutes": obj.get("default-share-link-ttl-minutes"),
            "default-versioning": obj.get("default-versioning"),
            "dp-enable-classic-key-protection": obj.get("dp-enable-classic-key-protection"),
            "dynamic-secret-max-ttl": obj.get("dynamic-secret-max-ttl"),
            "dynamic-secret-max-ttl-enable": obj.get("dynamic-secret-max-ttl-enable"),
            "enable-item-sharing": obj.get("enable-item-sharing"),
            "enable-password-expiration": obj.get("enable-password-expiration"),
            "force-new-versions": obj.get("force-new-versions"),
            "gw-bound-ips": obj.get("gw-bound-ips"),
            "invalid-characters": obj.get("invalid-characters") if obj.get("invalid-characters") is not None else 'notReceivedInvalidCharacter',
            "item-type": obj.get("item-type"),
            "items-deletion-protection": obj.get("items-deletion-protection"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "jwt-ttl-default": obj.get("jwt-ttl-default"),
            "jwt-ttl-max": obj.get("jwt-ttl-max"),
            "jwt-ttl-min": obj.get("jwt-ttl-min"),
            "lock-bound-ips": obj.get("lock-bound-ips"),
            "lock-default-key": obj.get("lock-default-key"),
            "lock-gw-bound-ips": obj.get("lock-gw-bound-ips"),
            "max-rotation-interval": obj.get("max-rotation-interval"),
            "max-rotation-interval-enable": obj.get("max-rotation-interval-enable"),
            "max-versions": obj.get("max-versions"),
            "password-expiration-days": obj.get("password-expiration-days"),
            "password-expiration-notification-days": obj.get("password-expiration-notification-days"),
            "password-length": obj.get("password-length"),
            "phone": obj.get("phone"),
            "postal-code": obj.get("postal-code"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "usage-event-enable": obj.get("usage-event-enable"),
            "usage-event-interval": obj.get("usage-event-interval"),
            "usage-event-object-type": obj.get("usage-event-object-type"),
            "use-capital-letters": obj.get("use-capital-letters"),
            "use-lower-letters": obj.get("use-lower-letters"),
            "use-numbers": obj.get("use-numbers"),
            "use-special-characters": obj.get("use-special-characters")
        })
        return _obj


