# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.certificate_version_info import CertificateVersionInfo
from typing import Optional, Set
from typing_extensions import Self

class TargetItemVersion(BaseModel):
    """
    TargetItemVersion
    """ # noqa: E501
    access_date: Optional[datetime] = None
    access_date_display: Optional[StrictStr] = None
    certificate_version_info: Optional[CertificateVersionInfo] = None
    creation_date: Optional[datetime] = None
    customer_fragment_id: Optional[StrictStr] = None
    deletion_date: Optional[datetime] = None
    item_version_state: Optional[StrictStr] = Field(default=None, description="ItemState defines the different states an Item can be in")
    latest_version: Optional[StrictBool] = None
    modification_date: Optional[datetime] = None
    protection_key_name: Optional[StrictStr] = None
    target_name: Optional[StrictStr] = None
    version: Optional[StrictInt] = None
    with_customer_fragment: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["access_date", "access_date_display", "certificate_version_info", "creation_date", "customer_fragment_id", "deletion_date", "item_version_state", "latest_version", "modification_date", "protection_key_name", "target_name", "version", "with_customer_fragment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetItemVersion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificate_version_info
        if self.certificate_version_info:
            _dict['certificate_version_info'] = self.certificate_version_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetItemVersion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_date": obj.get("access_date"),
            "access_date_display": obj.get("access_date_display"),
            "certificate_version_info": CertificateVersionInfo.from_dict(obj["certificate_version_info"]) if obj.get("certificate_version_info") is not None else None,
            "creation_date": obj.get("creation_date"),
            "customer_fragment_id": obj.get("customer_fragment_id"),
            "deletion_date": obj.get("deletion_date"),
            "item_version_state": obj.get("item_version_state"),
            "latest_version": obj.get("latest_version"),
            "modification_date": obj.get("modification_date"),
            "protection_key_name": obj.get("protection_key_name"),
            "target_name": obj.get("target_name"),
            "version": obj.get("version"),
            "with_customer_fragment": obj.get("with_customer_fragment")
        })
        return _obj


