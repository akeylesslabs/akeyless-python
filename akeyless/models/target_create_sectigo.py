# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TargetCreateSectigo(BaseModel):
    """
    targetCreateSectigo is a command that creates a new Sectigo target
    """ # noqa: E501
    certificate_profile_id: StrictInt = Field(description="Certificate Profile ID in Sectigo account", alias="certificate-profile-id")
    customer_uri: StrictStr = Field(description="Customer Uri of the Sectigo account", alias="customer-uri")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    external_requester: StrictStr = Field(description="External Requester - a comma separated list of emails", alias="external-requester")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    key: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)")
    max_versions: Optional[StrictStr] = Field(default=None, description="Set the maximum number of versions, limited by the account settings defaults.", alias="max-versions")
    name: StrictStr = Field(description="Target name")
    organization_id: StrictInt = Field(description="Organization ID in Sectigo account", alias="organization-id")
    password: StrictStr = Field(description="Password of the Sectigo account user")
    timeout: Optional[StrictStr] = Field(default='5m', description="Timeout waiting for certificate validation in Duration format (1h - 1 Hour, 20m - 20 Minutes, 33m3s - 33 Minutes and 3 Seconds), maximum 1h.")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    username: StrictStr = Field(description="Username of the Sectigo account")
    __properties: ClassVar[List[str]] = ["certificate-profile-id", "customer-uri", "description", "external-requester", "json", "key", "max-versions", "name", "organization-id", "password", "timeout", "token", "uid-token", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetCreateSectigo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetCreateSectigo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificate-profile-id": obj.get("certificate-profile-id"),
            "customer-uri": obj.get("customer-uri"),
            "description": obj.get("description"),
            "external-requester": obj.get("external-requester"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "key": obj.get("key"),
            "max-versions": obj.get("max-versions"),
            "name": obj.get("name"),
            "organization-id": obj.get("organization-id"),
            "password": obj.get("password"),
            "timeout": obj.get("timeout") if obj.get("timeout") is not None else '5m',
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "username": obj.get("username")
        })
        return _obj


