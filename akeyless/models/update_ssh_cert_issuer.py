# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateSSHCertIssuer(BaseModel):
    """
    UpdateSSHCertIssuer
    """ # noqa: E501
    provider_type: Optional[StrictStr] = Field(default=None, alias="ProviderType")
    add_tag: Optional[List[StrictStr]] = Field(default=None, description="List of the new tags that will be attached to this item", alias="add-tag")
    allowed_users: StrictStr = Field(description="Users allowed to fetch the certificate, e.g root,ubuntu", alias="allowed-users")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    extensions: Optional[Dict[str, StrictStr]] = Field(default=None, description="Signed certificates with extensions, e.g permit-port-forwarding=\\\"\\\"")
    external_username: Optional[StrictStr] = Field(default='false', description="Externally provided username [true/false]", alias="external-username")
    fixed_user_claim_keyname: Optional[StrictStr] = Field(default=None, description="For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for external-username=true)", alias="fixed-user-claim-keyname")
    host_provider: Optional[StrictStr] = Field(default=None, description="Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret", alias="host-provider")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    metadata: Optional[StrictStr] = Field(default=None, description="Deprecated - use description")
    name: StrictStr = Field(description="SSH certificate issuer name")
    new_name: Optional[StrictStr] = Field(default=None, description="New item name", alias="new-name")
    principals: Optional[StrictStr] = Field(default=None, description="Signed certificates with principal, e.g example_role1,example_role2")
    rm_tag: Optional[List[StrictStr]] = Field(default=None, description="List of the existent tags that will be removed from this item", alias="rm-tag")
    secure_access_api: Optional[StrictStr] = Field(default=None, description="Secure Access SSH control API endpoint. E.g. https://my.sra-server:9900", alias="secure-access-api")
    secure_access_bastion_api: Optional[StrictStr] = Field(default=None, description="Deprecated. use secure-access-api", alias="secure-access-bastion-api")
    secure_access_bastion_ssh: Optional[StrictStr] = Field(default=None, description="Deprecated. use secure-access-ssh", alias="secure-access-bastion-ssh")
    secure_access_enable: Optional[StrictStr] = Field(default=None, description="Enable/Disable secure remote access [true/false]", alias="secure-access-enable")
    secure_access_enforce_hosts_restriction: Optional[StrictBool] = Field(default=None, description="Enable this flag to enforce connections only to the hosts listed in --secure-access-host", alias="secure-access-enforce-hosts-restriction")
    secure_access_host: Optional[List[StrictStr]] = Field(default=None, description="Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)", alias="secure-access-host")
    secure_access_ssh: Optional[StrictStr] = Field(default=None, description="Bastion's SSH server. E.g. my.sra-server:22", alias="secure-access-ssh")
    secure_access_ssh_creds_user: Optional[StrictStr] = Field(default=None, description="SSH username to connect to target server, must be in 'Allowed Users' list", alias="secure-access-ssh-creds-user")
    secure_access_use_internal_bastion: Optional[StrictBool] = Field(default=None, description="Deprecated. Use secure-access-use-internal-ssh-access", alias="secure-access-use-internal-bastion")
    secure_access_use_internal_ssh_access: Optional[StrictBool] = Field(default=None, description="Use internal SSH Access", alias="secure-access-use-internal-ssh-access")
    signer_key_name: StrictStr = Field(description="A key to sign the certificate with", alias="signer-key-name")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    ttl: StrictInt = Field(description="The requested Time To Live for the certificate, in seconds")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["ProviderType", "add-tag", "allowed-users", "delete_protection", "description", "extensions", "external-username", "fixed-user-claim-keyname", "host-provider", "json", "metadata", "name", "new-name", "principals", "rm-tag", "secure-access-api", "secure-access-bastion-api", "secure-access-bastion-ssh", "secure-access-enable", "secure-access-enforce-hosts-restriction", "secure-access-host", "secure-access-ssh", "secure-access-ssh-creds-user", "secure-access-use-internal-bastion", "secure-access-use-internal-ssh-access", "signer-key-name", "token", "ttl", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateSSHCertIssuer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateSSHCertIssuer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ProviderType": obj.get("ProviderType"),
            "add-tag": obj.get("add-tag"),
            "allowed-users": obj.get("allowed-users") if obj.get("allowed-users") is not None else '-',
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "extensions": obj.get("extensions"),
            "external-username": obj.get("external-username") if obj.get("external-username") is not None else 'false',
            "fixed-user-claim-keyname": obj.get("fixed-user-claim-keyname"),
            "host-provider": obj.get("host-provider"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "new-name": obj.get("new-name"),
            "principals": obj.get("principals"),
            "rm-tag": obj.get("rm-tag"),
            "secure-access-api": obj.get("secure-access-api"),
            "secure-access-bastion-api": obj.get("secure-access-bastion-api"),
            "secure-access-bastion-ssh": obj.get("secure-access-bastion-ssh"),
            "secure-access-enable": obj.get("secure-access-enable"),
            "secure-access-enforce-hosts-restriction": obj.get("secure-access-enforce-hosts-restriction"),
            "secure-access-host": obj.get("secure-access-host"),
            "secure-access-ssh": obj.get("secure-access-ssh"),
            "secure-access-ssh-creds-user": obj.get("secure-access-ssh-creds-user"),
            "secure-access-use-internal-bastion": obj.get("secure-access-use-internal-bastion"),
            "secure-access-use-internal-ssh-access": obj.get("secure-access-use-internal-ssh-access"),
            "signer-key-name": obj.get("signer-key-name"),
            "token": obj.get("token"),
            "ttl": obj.get("ttl"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


