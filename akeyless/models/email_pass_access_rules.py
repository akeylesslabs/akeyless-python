# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class EmailPassAccessRules(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alg': 'str',
        'email': 'str',
        'hash_pass': 'str'
    }

    attribute_map = {
        'alg': 'alg',
        'email': 'email',
        'hash_pass': 'hash_pass'
    }

    def __init__(self, alg=None, email=None, hash_pass=None, local_vars_configuration=None):  # noqa: E501
        """EmailPassAccessRules - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._alg = None
        self._email = None
        self._hash_pass = None
        self.discriminator = None

        if alg is not None:
            self.alg = alg
        if email is not None:
            self.email = email
        if hash_pass is not None:
            self.hash_pass = hash_pass

    @property
    def alg(self):
        """Gets the alg of this EmailPassAccessRules.  # noqa: E501


        :return: The alg of this EmailPassAccessRules.  # noqa: E501
        :rtype: str
        """
        return self._alg

    @alg.setter
    def alg(self, alg):
        """Sets the alg of this EmailPassAccessRules.


        :param alg: The alg of this EmailPassAccessRules.  # noqa: E501
        :type: str
        """

        self._alg = alg

    @property
    def email(self):
        """Gets the email of this EmailPassAccessRules.  # noqa: E501

        The Email value  # noqa: E501

        :return: The email of this EmailPassAccessRules.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmailPassAccessRules.

        The Email value  # noqa: E501

        :param email: The email of this EmailPassAccessRules.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def hash_pass(self):
        """Gets the hash_pass of this EmailPassAccessRules.  # noqa: E501

        The password value  # noqa: E501

        :return: The hash_pass of this EmailPassAccessRules.  # noqa: E501
        :rtype: str
        """
        return self._hash_pass

    @hash_pass.setter
    def hash_pass(self, hash_pass):
        """Sets the hash_pass of this EmailPassAccessRules.

        The password value  # noqa: E501

        :param hash_pass: The hash_pass of this EmailPassAccessRules.  # noqa: E501
        :type: str
        """

        self._hash_pass = hash_pass

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailPassAccessRules):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailPassAccessRules):
            return True

        return self.to_dict() != other.to_dict()
