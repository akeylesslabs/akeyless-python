# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class CertificateIssueInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cert_issuer_type': 'str',
        'max_ttl': 'int',
        'pki_cert_issuer_details': 'PKICertificateIssueDetails',
        'ssh_cert_issuer_details': 'SSHCertificateIssueDetails'
    }

    attribute_map = {
        'cert_issuer_type': 'cert_issuer_type',
        'max_ttl': 'max_ttl',
        'pki_cert_issuer_details': 'pki_cert_issuer_details',
        'ssh_cert_issuer_details': 'ssh_cert_issuer_details'
    }

    def __init__(self, cert_issuer_type=None, max_ttl=None, pki_cert_issuer_details=None, ssh_cert_issuer_details=None, local_vars_configuration=None):  # noqa: E501
        """CertificateIssueInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cert_issuer_type = None
        self._max_ttl = None
        self._pki_cert_issuer_details = None
        self._ssh_cert_issuer_details = None
        self.discriminator = None

        if cert_issuer_type is not None:
            self.cert_issuer_type = cert_issuer_type
        if max_ttl is not None:
            self.max_ttl = max_ttl
        if pki_cert_issuer_details is not None:
            self.pki_cert_issuer_details = pki_cert_issuer_details
        if ssh_cert_issuer_details is not None:
            self.ssh_cert_issuer_details = ssh_cert_issuer_details

    @property
    def cert_issuer_type(self):
        """Gets the cert_issuer_type of this CertificateIssueInfo.  # noqa: E501


        :return: The cert_issuer_type of this CertificateIssueInfo.  # noqa: E501
        :rtype: str
        """
        return self._cert_issuer_type

    @cert_issuer_type.setter
    def cert_issuer_type(self, cert_issuer_type):
        """Sets the cert_issuer_type of this CertificateIssueInfo.


        :param cert_issuer_type: The cert_issuer_type of this CertificateIssueInfo.  # noqa: E501
        :type: str
        """

        self._cert_issuer_type = cert_issuer_type

    @property
    def max_ttl(self):
        """Gets the max_ttl of this CertificateIssueInfo.  # noqa: E501


        :return: The max_ttl of this CertificateIssueInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_ttl

    @max_ttl.setter
    def max_ttl(self, max_ttl):
        """Sets the max_ttl of this CertificateIssueInfo.


        :param max_ttl: The max_ttl of this CertificateIssueInfo.  # noqa: E501
        :type: int
        """

        self._max_ttl = max_ttl

    @property
    def pki_cert_issuer_details(self):
        """Gets the pki_cert_issuer_details of this CertificateIssueInfo.  # noqa: E501


        :return: The pki_cert_issuer_details of this CertificateIssueInfo.  # noqa: E501
        :rtype: PKICertificateIssueDetails
        """
        return self._pki_cert_issuer_details

    @pki_cert_issuer_details.setter
    def pki_cert_issuer_details(self, pki_cert_issuer_details):
        """Sets the pki_cert_issuer_details of this CertificateIssueInfo.


        :param pki_cert_issuer_details: The pki_cert_issuer_details of this CertificateIssueInfo.  # noqa: E501
        :type: PKICertificateIssueDetails
        """

        self._pki_cert_issuer_details = pki_cert_issuer_details

    @property
    def ssh_cert_issuer_details(self):
        """Gets the ssh_cert_issuer_details of this CertificateIssueInfo.  # noqa: E501


        :return: The ssh_cert_issuer_details of this CertificateIssueInfo.  # noqa: E501
        :rtype: SSHCertificateIssueDetails
        """
        return self._ssh_cert_issuer_details

    @ssh_cert_issuer_details.setter
    def ssh_cert_issuer_details(self, ssh_cert_issuer_details):
        """Sets the ssh_cert_issuer_details of this CertificateIssueInfo.


        :param ssh_cert_issuer_details: The ssh_cert_issuer_details of this CertificateIssueInfo.  # noqa: E501
        :type: SSHCertificateIssueDetails
        """

        self._ssh_cert_issuer_details = ssh_cert_issuer_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateIssueInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificateIssueInfo):
            return True

        return self.to_dict() != other.to_dict()
