# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class Configure(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_id': 'str',
        'access_key': 'str',
        'access_type': 'str',
        'admin_email': 'str',
        'admin_password': 'str',
        'azure_ad_object_id': 'str',
        'gcp_audience': 'str',
        'k8s_auth_config_name': 'str'
    }

    attribute_map = {
        'access_id': 'access-id',
        'access_key': 'access-key',
        'access_type': 'access-type',
        'admin_email': 'admin-email',
        'admin_password': 'admin-password',
        'azure_ad_object_id': 'azure_ad_object_id',
        'gcp_audience': 'gcp-audience',
        'k8s_auth_config_name': 'k8s-auth-config-name'
    }

    def __init__(self, access_id=None, access_key=None, access_type='access_key', admin_email=None, admin_password=None, azure_ad_object_id=None, gcp_audience=None, k8s_auth_config_name=None, local_vars_configuration=None):  # noqa: E501
        """Configure - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_id = None
        self._access_key = None
        self._access_type = None
        self._admin_email = None
        self._admin_password = None
        self._azure_ad_object_id = None
        self._gcp_audience = None
        self._k8s_auth_config_name = None
        self.discriminator = None

        if access_id is not None:
            self.access_id = access_id
        if access_key is not None:
            self.access_key = access_key
        if access_type is not None:
            self.access_type = access_type
        if admin_email is not None:
            self.admin_email = admin_email
        if admin_password is not None:
            self.admin_password = admin_password
        if azure_ad_object_id is not None:
            self.azure_ad_object_id = azure_ad_object_id
        if gcp_audience is not None:
            self.gcp_audience = gcp_audience
        if k8s_auth_config_name is not None:
            self.k8s_auth_config_name = k8s_auth_config_name

    @property
    def access_id(self):
        """Gets the access_id of this Configure.  # noqa: E501

        Access ID  # noqa: E501

        :return: The access_id of this Configure.  # noqa: E501
        :rtype: str
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """Sets the access_id of this Configure.

        Access ID  # noqa: E501

        :param access_id: The access_id of this Configure.  # noqa: E501
        :type: str
        """

        self._access_id = access_id

    @property
    def access_key(self):
        """Gets the access_key of this Configure.  # noqa: E501

        Access Key  # noqa: E501

        :return: The access_key of this Configure.  # noqa: E501
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this Configure.

        Access Key  # noqa: E501

        :param access_key: The access_key of this Configure.  # noqa: E501
        :type: str
        """

        self._access_key = access_key

    @property
    def access_type(self):
        """Gets the access_type of this Configure.  # noqa: E501

        Access Type (access_key/password/azure_ad/saml/oidc/ldap/aws_iam/gcp/k8s)  # noqa: E501

        :return: The access_type of this Configure.  # noqa: E501
        :rtype: str
        """
        return self._access_type

    @access_type.setter
    def access_type(self, access_type):
        """Sets the access_type of this Configure.

        Access Type (access_key/password/azure_ad/saml/oidc/ldap/aws_iam/gcp/k8s)  # noqa: E501

        :param access_type: The access_type of this Configure.  # noqa: E501
        :type: str
        """

        self._access_type = access_type

    @property
    def admin_email(self):
        """Gets the admin_email of this Configure.  # noqa: E501

        Email (relevant only for access-type=password)  # noqa: E501

        :return: The admin_email of this Configure.  # noqa: E501
        :rtype: str
        """
        return self._admin_email

    @admin_email.setter
    def admin_email(self, admin_email):
        """Sets the admin_email of this Configure.

        Email (relevant only for access-type=password)  # noqa: E501

        :param admin_email: The admin_email of this Configure.  # noqa: E501
        :type: str
        """

        self._admin_email = admin_email

    @property
    def admin_password(self):
        """Gets the admin_password of this Configure.  # noqa: E501

        Password (relevant only for access-type=password)  # noqa: E501

        :return: The admin_password of this Configure.  # noqa: E501
        :rtype: str
        """
        return self._admin_password

    @admin_password.setter
    def admin_password(self, admin_password):
        """Sets the admin_password of this Configure.

        Password (relevant only for access-type=password)  # noqa: E501

        :param admin_password: The admin_password of this Configure.  # noqa: E501
        :type: str
        """

        self._admin_password = admin_password

    @property
    def azure_ad_object_id(self):
        """Gets the azure_ad_object_id of this Configure.  # noqa: E501

        Azure Active Directory ObjectId (relevant only for access-type=azure_ad)  # noqa: E501

        :return: The azure_ad_object_id of this Configure.  # noqa: E501
        :rtype: str
        """
        return self._azure_ad_object_id

    @azure_ad_object_id.setter
    def azure_ad_object_id(self, azure_ad_object_id):
        """Sets the azure_ad_object_id of this Configure.

        Azure Active Directory ObjectId (relevant only for access-type=azure_ad)  # noqa: E501

        :param azure_ad_object_id: The azure_ad_object_id of this Configure.  # noqa: E501
        :type: str
        """

        self._azure_ad_object_id = azure_ad_object_id

    @property
    def gcp_audience(self):
        """Gets the gcp_audience of this Configure.  # noqa: E501

        GCP JWT audience  # noqa: E501

        :return: The gcp_audience of this Configure.  # noqa: E501
        :rtype: str
        """
        return self._gcp_audience

    @gcp_audience.setter
    def gcp_audience(self, gcp_audience):
        """Sets the gcp_audience of this Configure.

        GCP JWT audience  # noqa: E501

        :param gcp_audience: The gcp_audience of this Configure.  # noqa: E501
        :type: str
        """

        self._gcp_audience = gcp_audience

    @property
    def k8s_auth_config_name(self):
        """Gets the k8s_auth_config_name of this Configure.  # noqa: E501

        The K8S Auth config name (relevant only for access-type=k8s)  # noqa: E501

        :return: The k8s_auth_config_name of this Configure.  # noqa: E501
        :rtype: str
        """
        return self._k8s_auth_config_name

    @k8s_auth_config_name.setter
    def k8s_auth_config_name(self, k8s_auth_config_name):
        """Sets the k8s_auth_config_name of this Configure.

        The K8S Auth config name (relevant only for access-type=k8s)  # noqa: E501

        :param k8s_auth_config_name: The k8s_auth_config_name of this Configure.  # noqa: E501
        :type: str
        """

        self._k8s_auth_config_name = k8s_auth_config_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Configure):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Configure):
            return True

        return self.to_dict() != other.to_dict()
