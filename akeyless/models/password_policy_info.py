# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class PasswordPolicyInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'password_length': 'int',
        'use_capital_letters': 'bool',
        'use_lower_letters': 'bool',
        'use_numbers': 'bool',
        'use_special_characters': 'bool'
    }

    attribute_map = {
        'password_length': 'password_length',
        'use_capital_letters': 'use_capital_letters',
        'use_lower_letters': 'use_lower_letters',
        'use_numbers': 'use_numbers',
        'use_special_characters': 'use_special_characters'
    }

    def __init__(self, password_length=None, use_capital_letters=None, use_lower_letters=None, use_numbers=None, use_special_characters=None, local_vars_configuration=None):  # noqa: E501
        """PasswordPolicyInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._password_length = None
        self._use_capital_letters = None
        self._use_lower_letters = None
        self._use_numbers = None
        self._use_special_characters = None
        self.discriminator = None

        if password_length is not None:
            self.password_length = password_length
        if use_capital_letters is not None:
            self.use_capital_letters = use_capital_letters
        if use_lower_letters is not None:
            self.use_lower_letters = use_lower_letters
        if use_numbers is not None:
            self.use_numbers = use_numbers
        if use_special_characters is not None:
            self.use_special_characters = use_special_characters

    @property
    def password_length(self):
        """Gets the password_length of this PasswordPolicyInfo.  # noqa: E501


        :return: The password_length of this PasswordPolicyInfo.  # noqa: E501
        :rtype: int
        """
        return self._password_length

    @password_length.setter
    def password_length(self, password_length):
        """Sets the password_length of this PasswordPolicyInfo.


        :param password_length: The password_length of this PasswordPolicyInfo.  # noqa: E501
        :type: int
        """

        self._password_length = password_length

    @property
    def use_capital_letters(self):
        """Gets the use_capital_letters of this PasswordPolicyInfo.  # noqa: E501


        :return: The use_capital_letters of this PasswordPolicyInfo.  # noqa: E501
        :rtype: bool
        """
        return self._use_capital_letters

    @use_capital_letters.setter
    def use_capital_letters(self, use_capital_letters):
        """Sets the use_capital_letters of this PasswordPolicyInfo.


        :param use_capital_letters: The use_capital_letters of this PasswordPolicyInfo.  # noqa: E501
        :type: bool
        """

        self._use_capital_letters = use_capital_letters

    @property
    def use_lower_letters(self):
        """Gets the use_lower_letters of this PasswordPolicyInfo.  # noqa: E501


        :return: The use_lower_letters of this PasswordPolicyInfo.  # noqa: E501
        :rtype: bool
        """
        return self._use_lower_letters

    @use_lower_letters.setter
    def use_lower_letters(self, use_lower_letters):
        """Sets the use_lower_letters of this PasswordPolicyInfo.


        :param use_lower_letters: The use_lower_letters of this PasswordPolicyInfo.  # noqa: E501
        :type: bool
        """

        self._use_lower_letters = use_lower_letters

    @property
    def use_numbers(self):
        """Gets the use_numbers of this PasswordPolicyInfo.  # noqa: E501


        :return: The use_numbers of this PasswordPolicyInfo.  # noqa: E501
        :rtype: bool
        """
        return self._use_numbers

    @use_numbers.setter
    def use_numbers(self, use_numbers):
        """Sets the use_numbers of this PasswordPolicyInfo.


        :param use_numbers: The use_numbers of this PasswordPolicyInfo.  # noqa: E501
        :type: bool
        """

        self._use_numbers = use_numbers

    @property
    def use_special_characters(self):
        """Gets the use_special_characters of this PasswordPolicyInfo.  # noqa: E501


        :return: The use_special_characters of this PasswordPolicyInfo.  # noqa: E501
        :rtype: bool
        """
        return self._use_special_characters

    @use_special_characters.setter
    def use_special_characters(self, use_special_characters):
        """Sets the use_special_characters of this PasswordPolicyInfo.


        :param use_special_characters: The use_special_characters of this PasswordPolicyInfo.  # noqa: E501
        :type: bool
        """

        self._use_special_characters = use_special_characters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasswordPolicyInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PasswordPolicyInfo):
            return True

        return self.to_dict() != other.to_dict()
