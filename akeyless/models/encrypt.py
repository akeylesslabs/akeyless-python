# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Encrypt(BaseModel):
    """
    Encrypt
    """ # noqa: E501
    display_id: Optional[StrictStr] = Field(default=None, description="The display id of the key to use in the encryption process", alias="display-id")
    encryption_context: Optional[Dict[str, StrictStr]] = Field(default=None, description="name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail", alias="encryption-context")
    input_format: Optional[StrictStr] = Field(default=None, description="Select default assumed format for any plaintext input. Currently supported options: [base64]", alias="input-format")
    item_id: Optional[StrictInt] = Field(default=None, description="The item id of the key to use in the encryption process", alias="item-id")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    key_name: StrictStr = Field(description="The name of the key to use in the encryption process", alias="key-name")
    plaintext: Optional[StrictStr] = Field(default=None, description="Data to be encrypted")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    version: Optional[StrictInt] = Field(default=None, description="key version (relevant only for classic key)")
    __properties: ClassVar[List[str]] = ["display-id", "encryption-context", "input-format", "item-id", "json", "key-name", "plaintext", "token", "uid-token", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Encrypt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Encrypt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "display-id": obj.get("display-id"),
            "encryption-context": obj.get("encryption-context"),
            "input-format": obj.get("input-format"),
            "item-id": obj.get("item-id"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "key-name": obj.get("key-name"),
            "plaintext": obj.get("plaintext"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "version": obj.get("version")
        })
        return _obj


