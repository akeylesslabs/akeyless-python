# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SalesforceTargetDetails(BaseModel):
    """
    SalesforceTargetDetails
    """ # noqa: E501
    app_private_key: Optional[List[StrictInt]] = Field(default=None, description="params needed for jwt auth AppPrivateKey is the rsa private key in PEM format")
    auth_flow: Optional[StrictStr] = None
    ca_cert_data: Optional[List[StrictInt]] = Field(default=None, description="CACertData is the rsa 4096 certificate data in PEM format")
    ca_cert_name: Optional[StrictStr] = Field(default=None, description="CACertName is the name of the certificate in SalesForce tenant")
    client_id: Optional[StrictStr] = None
    client_secret: Optional[StrictStr] = Field(default=None, description="params needed for password auth")
    password: Optional[StrictStr] = None
    security_token: Optional[StrictStr] = None
    tenant_url: Optional[StrictStr] = None
    user_name: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["app_private_key", "auth_flow", "ca_cert_data", "ca_cert_name", "client_id", "client_secret", "password", "security_token", "tenant_url", "user_name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SalesforceTargetDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SalesforceTargetDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app_private_key": obj.get("app_private_key"),
            "auth_flow": obj.get("auth_flow"),
            "ca_cert_data": obj.get("ca_cert_data"),
            "ca_cert_name": obj.get("ca_cert_name"),
            "client_id": obj.get("client_id"),
            "client_secret": obj.get("client_secret"),
            "password": obj.get("password"),
            "security_token": obj.get("security_token"),
            "tenant_url": obj.get("tenant_url"),
            "user_name": obj.get("user_name")
        })
        return _obj


