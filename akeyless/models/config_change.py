# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class ConfigChange(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'config_hash': 'ConfigHash',
        'last_change': 'LastConfigChange',
        'last_status': 'LastStatusInfo',
        'required_activity': 'RequiredActivity',
        'update_stamp': 'int'
    }

    attribute_map = {
        'config_hash': 'config_hash',
        'last_change': 'last_change',
        'last_status': 'last_status',
        'required_activity': 'required_activity',
        'update_stamp': 'update_stamp'
    }

    def __init__(self, config_hash=None, last_change=None, last_status=None, required_activity=None, update_stamp=None, local_vars_configuration=None):  # noqa: E501
        """ConfigChange - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._config_hash = None
        self._last_change = None
        self._last_status = None
        self._required_activity = None
        self._update_stamp = None
        self.discriminator = None

        if config_hash is not None:
            self.config_hash = config_hash
        if last_change is not None:
            self.last_change = last_change
        if last_status is not None:
            self.last_status = last_status
        if required_activity is not None:
            self.required_activity = required_activity
        if update_stamp is not None:
            self.update_stamp = update_stamp

    @property
    def config_hash(self):
        """Gets the config_hash of this ConfigChange.  # noqa: E501


        :return: The config_hash of this ConfigChange.  # noqa: E501
        :rtype: ConfigHash
        """
        return self._config_hash

    @config_hash.setter
    def config_hash(self, config_hash):
        """Sets the config_hash of this ConfigChange.


        :param config_hash: The config_hash of this ConfigChange.  # noqa: E501
        :type: ConfigHash
        """

        self._config_hash = config_hash

    @property
    def last_change(self):
        """Gets the last_change of this ConfigChange.  # noqa: E501


        :return: The last_change of this ConfigChange.  # noqa: E501
        :rtype: LastConfigChange
        """
        return self._last_change

    @last_change.setter
    def last_change(self, last_change):
        """Sets the last_change of this ConfigChange.


        :param last_change: The last_change of this ConfigChange.  # noqa: E501
        :type: LastConfigChange
        """

        self._last_change = last_change

    @property
    def last_status(self):
        """Gets the last_status of this ConfigChange.  # noqa: E501


        :return: The last_status of this ConfigChange.  # noqa: E501
        :rtype: LastStatusInfo
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this ConfigChange.


        :param last_status: The last_status of this ConfigChange.  # noqa: E501
        :type: LastStatusInfo
        """

        self._last_status = last_status

    @property
    def required_activity(self):
        """Gets the required_activity of this ConfigChange.  # noqa: E501


        :return: The required_activity of this ConfigChange.  # noqa: E501
        :rtype: RequiredActivity
        """
        return self._required_activity

    @required_activity.setter
    def required_activity(self, required_activity):
        """Sets the required_activity of this ConfigChange.


        :param required_activity: The required_activity of this ConfigChange.  # noqa: E501
        :type: RequiredActivity
        """

        self._required_activity = required_activity

    @property
    def update_stamp(self):
        """Gets the update_stamp of this ConfigChange.  # noqa: E501


        :return: The update_stamp of this ConfigChange.  # noqa: E501
        :rtype: int
        """
        return self._update_stamp

    @update_stamp.setter
    def update_stamp(self, update_stamp):
        """Sets the update_stamp of this ConfigChange.


        :param update_stamp: The update_stamp of this ConfigChange.  # noqa: E501
        :type: int
        """

        self._update_stamp = update_stamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigChange):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigChange):
            return True

        return self.to_dict() != other.to_dict()
