# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GatewayCreateProducerAzure(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_obj_id': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'gateway_url': 'str',
        'name': 'str',
        'password': 'str',
        'producer_encryption_key_name': 'str',
        'tenant_id': 'str',
        'token': 'str',
        'uid_token': 'str',
        'user_group_obj_id': 'str',
        'user_portal_access': 'bool',
        'user_principal_name': 'str',
        'user_programmatic_access': 'bool',
        'user_role_template_id': 'str',
        'user_ttl': 'str',
        'username': 'str'
    }

    attribute_map = {
        'app_obj_id': 'app-obj-id',
        'client_id': 'client-id',
        'client_secret': 'client-secret',
        'gateway_url': 'gateway-url',
        'name': 'name',
        'password': 'password',
        'producer_encryption_key_name': 'producer-encryption-key-name',
        'tenant_id': 'tenant-id',
        'token': 'token',
        'uid_token': 'uid-token',
        'user_group_obj_id': 'user-group-obj-id',
        'user_portal_access': 'user-portal-access',
        'user_principal_name': 'user-principal-name',
        'user_programmatic_access': 'user-programmatic-access',
        'user_role_template_id': 'user-role-template-id',
        'user_ttl': 'user-ttl',
        'username': 'username'
    }

    def __init__(self, app_obj_id=None, client_id=None, client_secret=None, gateway_url='http://localhost:8000', name=None, password=None, producer_encryption_key_name=None, tenant_id=None, token=None, uid_token=None, user_group_obj_id=None, user_portal_access=False, user_principal_name=None, user_programmatic_access=True, user_role_template_id=None, user_ttl='60m', username=None, local_vars_configuration=None):  # noqa: E501
        """GatewayCreateProducerAzure - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_obj_id = None
        self._client_id = None
        self._client_secret = None
        self._gateway_url = None
        self._name = None
        self._password = None
        self._producer_encryption_key_name = None
        self._tenant_id = None
        self._token = None
        self._uid_token = None
        self._user_group_obj_id = None
        self._user_portal_access = None
        self._user_principal_name = None
        self._user_programmatic_access = None
        self._user_role_template_id = None
        self._user_ttl = None
        self._username = None
        self.discriminator = None

        if app_obj_id is not None:
            self.app_obj_id = app_obj_id
        self.client_id = client_id
        self.client_secret = client_secret
        if gateway_url is not None:
            self.gateway_url = gateway_url
        self.name = name
        if password is not None:
            self.password = password
        if producer_encryption_key_name is not None:
            self.producer_encryption_key_name = producer_encryption_key_name
        self.tenant_id = tenant_id
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token
        if user_group_obj_id is not None:
            self.user_group_obj_id = user_group_obj_id
        if user_portal_access is not None:
            self.user_portal_access = user_portal_access
        if user_principal_name is not None:
            self.user_principal_name = user_principal_name
        if user_programmatic_access is not None:
            self.user_programmatic_access = user_programmatic_access
        if user_role_template_id is not None:
            self.user_role_template_id = user_role_template_id
        if user_ttl is not None:
            self.user_ttl = user_ttl
        if username is not None:
            self.username = username

    @property
    def app_obj_id(self):
        """Gets the app_obj_id of this GatewayCreateProducerAzure.  # noqa: E501

        Azure App Object Id  # noqa: E501

        :return: The app_obj_id of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._app_obj_id

    @app_obj_id.setter
    def app_obj_id(self, app_obj_id):
        """Sets the app_obj_id of this GatewayCreateProducerAzure.

        Azure App Object Id  # noqa: E501

        :param app_obj_id: The app_obj_id of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """

        self._app_obj_id = app_obj_id

    @property
    def client_id(self):
        """Gets the client_id of this GatewayCreateProducerAzure.  # noqa: E501

        Azure Client ID  # noqa: E501

        :return: The client_id of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GatewayCreateProducerAzure.

        Azure Client ID  # noqa: E501

        :param client_id: The client_id of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and client_id is None:  # noqa: E501
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this GatewayCreateProducerAzure.  # noqa: E501

        Azure Client Secret  # noqa: E501

        :return: The client_secret of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this GatewayCreateProducerAzure.

        Azure Client Secret  # noqa: E501

        :param client_secret: The client_secret of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and client_secret is None:  # noqa: E501
            raise ValueError("Invalid value for `client_secret`, must not be `None`")  # noqa: E501

        self._client_secret = client_secret

    @property
    def gateway_url(self):
        """Gets the gateway_url of this GatewayCreateProducerAzure.  # noqa: E501

        Gateway url  # noqa: E501

        :return: The gateway_url of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._gateway_url

    @gateway_url.setter
    def gateway_url(self, gateway_url):
        """Sets the gateway_url of this GatewayCreateProducerAzure.

        Gateway url  # noqa: E501

        :param gateway_url: The gateway_url of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """

        self._gateway_url = gateway_url

    @property
    def name(self):
        """Gets the name of this GatewayCreateProducerAzure.  # noqa: E501

        Producer name  # noqa: E501

        :return: The name of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GatewayCreateProducerAzure.

        Producer name  # noqa: E501

        :param name: The name of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def password(self):
        """Gets the password of this GatewayCreateProducerAzure.  # noqa: E501

        Required only when the authentication process requires a username and password  # noqa: E501

        :return: The password of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this GatewayCreateProducerAzure.

        Required only when the authentication process requires a username and password  # noqa: E501

        :param password: The password of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def producer_encryption_key_name(self):
        """Gets the producer_encryption_key_name of this GatewayCreateProducerAzure.  # noqa: E501

        Dynamic producer encryption key  # noqa: E501

        :return: The producer_encryption_key_name of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._producer_encryption_key_name

    @producer_encryption_key_name.setter
    def producer_encryption_key_name(self, producer_encryption_key_name):
        """Sets the producer_encryption_key_name of this GatewayCreateProducerAzure.

        Dynamic producer encryption key  # noqa: E501

        :param producer_encryption_key_name: The producer_encryption_key_name of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """

        self._producer_encryption_key_name = producer_encryption_key_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this GatewayCreateProducerAzure.  # noqa: E501

        Azure Tenant ID  # noqa: E501

        :return: The tenant_id of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this GatewayCreateProducerAzure.

        Azure Tenant ID  # noqa: E501

        :param tenant_id: The tenant_id of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and tenant_id is None:  # noqa: E501
            raise ValueError("Invalid value for `tenant_id`, must not be `None`")  # noqa: E501

        self._tenant_id = tenant_id

    @property
    def token(self):
        """Gets the token of this GatewayCreateProducerAzure.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GatewayCreateProducerAzure.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this GatewayCreateProducerAzure.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this GatewayCreateProducerAzure.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    @property
    def user_group_obj_id(self):
        """Gets the user_group_obj_id of this GatewayCreateProducerAzure.  # noqa: E501

        User Group Object Id  # noqa: E501

        :return: The user_group_obj_id of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._user_group_obj_id

    @user_group_obj_id.setter
    def user_group_obj_id(self, user_group_obj_id):
        """Sets the user_group_obj_id of this GatewayCreateProducerAzure.

        User Group Object Id  # noqa: E501

        :param user_group_obj_id: The user_group_obj_id of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """

        self._user_group_obj_id = user_group_obj_id

    @property
    def user_portal_access(self):
        """Gets the user_portal_access of this GatewayCreateProducerAzure.  # noqa: E501

        Azure User portal access  # noqa: E501

        :return: The user_portal_access of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: bool
        """
        return self._user_portal_access

    @user_portal_access.setter
    def user_portal_access(self, user_portal_access):
        """Sets the user_portal_access of this GatewayCreateProducerAzure.

        Azure User portal access  # noqa: E501

        :param user_portal_access: The user_portal_access of this GatewayCreateProducerAzure.  # noqa: E501
        :type: bool
        """

        self._user_portal_access = user_portal_access

    @property
    def user_principal_name(self):
        """Gets the user_principal_name of this GatewayCreateProducerAzure.  # noqa: E501

        User Principal Name  # noqa: E501

        :return: The user_principal_name of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._user_principal_name

    @user_principal_name.setter
    def user_principal_name(self, user_principal_name):
        """Sets the user_principal_name of this GatewayCreateProducerAzure.

        User Principal Name  # noqa: E501

        :param user_principal_name: The user_principal_name of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """

        self._user_principal_name = user_principal_name

    @property
    def user_programmatic_access(self):
        """Gets the user_programmatic_access of this GatewayCreateProducerAzure.  # noqa: E501

        Azure User programmatic access  # noqa: E501

        :return: The user_programmatic_access of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: bool
        """
        return self._user_programmatic_access

    @user_programmatic_access.setter
    def user_programmatic_access(self, user_programmatic_access):
        """Sets the user_programmatic_access of this GatewayCreateProducerAzure.

        Azure User programmatic access  # noqa: E501

        :param user_programmatic_access: The user_programmatic_access of this GatewayCreateProducerAzure.  # noqa: E501
        :type: bool
        """

        self._user_programmatic_access = user_programmatic_access

    @property
    def user_role_template_id(self):
        """Gets the user_role_template_id of this GatewayCreateProducerAzure.  # noqa: E501

        User Role Template Id  # noqa: E501

        :return: The user_role_template_id of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._user_role_template_id

    @user_role_template_id.setter
    def user_role_template_id(self, user_role_template_id):
        """Sets the user_role_template_id of this GatewayCreateProducerAzure.

        User Role Template Id  # noqa: E501

        :param user_role_template_id: The user_role_template_id of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """

        self._user_role_template_id = user_role_template_id

    @property
    def user_ttl(self):
        """Gets the user_ttl of this GatewayCreateProducerAzure.  # noqa: E501

        User TTL  # noqa: E501

        :return: The user_ttl of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._user_ttl

    @user_ttl.setter
    def user_ttl(self, user_ttl):
        """Sets the user_ttl of this GatewayCreateProducerAzure.

        User TTL  # noqa: E501

        :param user_ttl: The user_ttl of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """

        self._user_ttl = user_ttl

    @property
    def username(self):
        """Gets the username of this GatewayCreateProducerAzure.  # noqa: E501

        Required only when the authentication process requires a username and password  # noqa: E501

        :return: The username of this GatewayCreateProducerAzure.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this GatewayCreateProducerAzure.

        Required only when the authentication process requires a username and password  # noqa: E501

        :param username: The username of this GatewayCreateProducerAzure.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GatewayCreateProducerAzure):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GatewayCreateProducerAzure):
            return True

        return self.to_dict() != other.to_dict()
