# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.artifactory_target_details import ArtifactoryTargetDetails
from akeyless.models.aws_target_details import AWSTargetDetails
from akeyless.models.azure_target_details import AzureTargetDetails
from akeyless.models.chef_target_details import ChefTargetDetails
from akeyless.models.custom_target_details import CustomTargetDetails
from akeyless.models.db_target_details import DbTargetDetails
from akeyless.models.dockerhub_target_details import DockerhubTargetDetails
from akeyless.models.eks_target_details import EKSTargetDetails
from akeyless.models.gcp_target_details import GcpTargetDetails
from akeyless.models.github_target_details import GithubTargetDetails
from akeyless.models.gitlab_target_details import GitlabTargetDetails
from akeyless.models.gke_target_details import GKETargetDetails
from akeyless.models.global_sign_atlas_target_details import GlobalSignAtlasTargetDetails
from akeyless.models.global_sign_gcc_target_details import GlobalSignGCCTargetDetails
from akeyless.models.godaddy_target_details import GodaddyTargetDetails
from akeyless.models.hashi_vault_target_details import HashiVaultTargetDetails
from akeyless.models.ldap_target_details import LdapTargetDetails
from akeyless.models.linked_target_details import LinkedTargetDetails
from akeyless.models.mongo_db_target_details import MongoDBTargetDetails
from akeyless.models.native_k8s_target_details import NativeK8sTargetDetails
from akeyless.models.ping_target_details import PingTargetDetails
from akeyless.models.rabbit_mq_target_details import RabbitMQTargetDetails
from akeyless.models.salesforce_target_details import SalesforceTargetDetails
from akeyless.models.sectigo_target_details import SectigoTargetDetails
from akeyless.models.ssh_target_details import SSHTargetDetails
from akeyless.models.venafi_target_details import VenafiTargetDetails
from akeyless.models.web_target_details import WebTargetDetails
from akeyless.models.windows_target_details import WindowsTargetDetails
from akeyless.models.zero_ssl_target_details import ZeroSSLTargetDetails
from typing import Optional, Set
from typing_extensions import Self

class TargetTypeDetailsInput(BaseModel):
    """
    TargetTypeDetailsInput
    """ # noqa: E501
    artifactory_target_details: Optional[ArtifactoryTargetDetails] = None
    aws_target_details: Optional[AWSTargetDetails] = None
    azure_target_details: Optional[AzureTargetDetails] = None
    chef_target_details: Optional[ChefTargetDetails] = None
    custom_target_details: Optional[CustomTargetDetails] = None
    db_target_details: Optional[DbTargetDetails] = None
    dockerhub_target_details: Optional[DockerhubTargetDetails] = None
    eks_target_details: Optional[EKSTargetDetails] = None
    gcp_target_details: Optional[GcpTargetDetails] = None
    github_target_details: Optional[GithubTargetDetails] = None
    gitlab_target_details: Optional[GitlabTargetDetails] = None
    gke_target_details: Optional[GKETargetDetails] = None
    globalsign_atlas_target_details: Optional[GlobalSignAtlasTargetDetails] = None
    globalsign_target_details: Optional[GlobalSignGCCTargetDetails] = None
    godaddy_target_details: Optional[GodaddyTargetDetails] = None
    hashi_vault_target_details: Optional[HashiVaultTargetDetails] = None
    ldap_target_details: Optional[LdapTargetDetails] = None
    linked_target_details: Optional[LinkedTargetDetails] = None
    mongo_db_target_details: Optional[MongoDBTargetDetails] = None
    native_k8s_target_details: Optional[NativeK8sTargetDetails] = None
    ping_target_details: Optional[PingTargetDetails] = None
    rabbit_mq_target_details: Optional[RabbitMQTargetDetails] = None
    salesforce_target_details: Optional[SalesforceTargetDetails] = None
    sectigo_target_details: Optional[SectigoTargetDetails] = None
    ssh_target_details: Optional[SSHTargetDetails] = None
    venafi_target_details: Optional[VenafiTargetDetails] = None
    web_target_details: Optional[WebTargetDetails] = None
    windows_target_details: Optional[WindowsTargetDetails] = None
    zerossl_target_details: Optional[ZeroSSLTargetDetails] = None
    __properties: ClassVar[List[str]] = ["artifactory_target_details", "aws_target_details", "azure_target_details", "chef_target_details", "custom_target_details", "db_target_details", "dockerhub_target_details", "eks_target_details", "gcp_target_details", "github_target_details", "gitlab_target_details", "gke_target_details", "globalsign_atlas_target_details", "globalsign_target_details", "godaddy_target_details", "hashi_vault_target_details", "ldap_target_details", "linked_target_details", "mongo_db_target_details", "native_k8s_target_details", "ping_target_details", "rabbit_mq_target_details", "salesforce_target_details", "sectigo_target_details", "ssh_target_details", "venafi_target_details", "web_target_details", "windows_target_details", "zerossl_target_details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetTypeDetailsInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of artifactory_target_details
        if self.artifactory_target_details:
            _dict['artifactory_target_details'] = self.artifactory_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aws_target_details
        if self.aws_target_details:
            _dict['aws_target_details'] = self.aws_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_target_details
        if self.azure_target_details:
            _dict['azure_target_details'] = self.azure_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of chef_target_details
        if self.chef_target_details:
            _dict['chef_target_details'] = self.chef_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_target_details
        if self.custom_target_details:
            _dict['custom_target_details'] = self.custom_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of db_target_details
        if self.db_target_details:
            _dict['db_target_details'] = self.db_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dockerhub_target_details
        if self.dockerhub_target_details:
            _dict['dockerhub_target_details'] = self.dockerhub_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eks_target_details
        if self.eks_target_details:
            _dict['eks_target_details'] = self.eks_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gcp_target_details
        if self.gcp_target_details:
            _dict['gcp_target_details'] = self.gcp_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of github_target_details
        if self.github_target_details:
            _dict['github_target_details'] = self.github_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gitlab_target_details
        if self.gitlab_target_details:
            _dict['gitlab_target_details'] = self.gitlab_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gke_target_details
        if self.gke_target_details:
            _dict['gke_target_details'] = self.gke_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of globalsign_atlas_target_details
        if self.globalsign_atlas_target_details:
            _dict['globalsign_atlas_target_details'] = self.globalsign_atlas_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of globalsign_target_details
        if self.globalsign_target_details:
            _dict['globalsign_target_details'] = self.globalsign_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of godaddy_target_details
        if self.godaddy_target_details:
            _dict['godaddy_target_details'] = self.godaddy_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hashi_vault_target_details
        if self.hashi_vault_target_details:
            _dict['hashi_vault_target_details'] = self.hashi_vault_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ldap_target_details
        if self.ldap_target_details:
            _dict['ldap_target_details'] = self.ldap_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of linked_target_details
        if self.linked_target_details:
            _dict['linked_target_details'] = self.linked_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mongo_db_target_details
        if self.mongo_db_target_details:
            _dict['mongo_db_target_details'] = self.mongo_db_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of native_k8s_target_details
        if self.native_k8s_target_details:
            _dict['native_k8s_target_details'] = self.native_k8s_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ping_target_details
        if self.ping_target_details:
            _dict['ping_target_details'] = self.ping_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rabbit_mq_target_details
        if self.rabbit_mq_target_details:
            _dict['rabbit_mq_target_details'] = self.rabbit_mq_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of salesforce_target_details
        if self.salesforce_target_details:
            _dict['salesforce_target_details'] = self.salesforce_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sectigo_target_details
        if self.sectigo_target_details:
            _dict['sectigo_target_details'] = self.sectigo_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ssh_target_details
        if self.ssh_target_details:
            _dict['ssh_target_details'] = self.ssh_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of venafi_target_details
        if self.venafi_target_details:
            _dict['venafi_target_details'] = self.venafi_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of web_target_details
        if self.web_target_details:
            _dict['web_target_details'] = self.web_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of windows_target_details
        if self.windows_target_details:
            _dict['windows_target_details'] = self.windows_target_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of zerossl_target_details
        if self.zerossl_target_details:
            _dict['zerossl_target_details'] = self.zerossl_target_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetTypeDetailsInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "artifactory_target_details": ArtifactoryTargetDetails.from_dict(obj["artifactory_target_details"]) if obj.get("artifactory_target_details") is not None else None,
            "aws_target_details": AWSTargetDetails.from_dict(obj["aws_target_details"]) if obj.get("aws_target_details") is not None else None,
            "azure_target_details": AzureTargetDetails.from_dict(obj["azure_target_details"]) if obj.get("azure_target_details") is not None else None,
            "chef_target_details": ChefTargetDetails.from_dict(obj["chef_target_details"]) if obj.get("chef_target_details") is not None else None,
            "custom_target_details": CustomTargetDetails.from_dict(obj["custom_target_details"]) if obj.get("custom_target_details") is not None else None,
            "db_target_details": DbTargetDetails.from_dict(obj["db_target_details"]) if obj.get("db_target_details") is not None else None,
            "dockerhub_target_details": DockerhubTargetDetails.from_dict(obj["dockerhub_target_details"]) if obj.get("dockerhub_target_details") is not None else None,
            "eks_target_details": EKSTargetDetails.from_dict(obj["eks_target_details"]) if obj.get("eks_target_details") is not None else None,
            "gcp_target_details": GcpTargetDetails.from_dict(obj["gcp_target_details"]) if obj.get("gcp_target_details") is not None else None,
            "github_target_details": GithubTargetDetails.from_dict(obj["github_target_details"]) if obj.get("github_target_details") is not None else None,
            "gitlab_target_details": GitlabTargetDetails.from_dict(obj["gitlab_target_details"]) if obj.get("gitlab_target_details") is not None else None,
            "gke_target_details": GKETargetDetails.from_dict(obj["gke_target_details"]) if obj.get("gke_target_details") is not None else None,
            "globalsign_atlas_target_details": GlobalSignAtlasTargetDetails.from_dict(obj["globalsign_atlas_target_details"]) if obj.get("globalsign_atlas_target_details") is not None else None,
            "globalsign_target_details": GlobalSignGCCTargetDetails.from_dict(obj["globalsign_target_details"]) if obj.get("globalsign_target_details") is not None else None,
            "godaddy_target_details": GodaddyTargetDetails.from_dict(obj["godaddy_target_details"]) if obj.get("godaddy_target_details") is not None else None,
            "hashi_vault_target_details": HashiVaultTargetDetails.from_dict(obj["hashi_vault_target_details"]) if obj.get("hashi_vault_target_details") is not None else None,
            "ldap_target_details": LdapTargetDetails.from_dict(obj["ldap_target_details"]) if obj.get("ldap_target_details") is not None else None,
            "linked_target_details": LinkedTargetDetails.from_dict(obj["linked_target_details"]) if obj.get("linked_target_details") is not None else None,
            "mongo_db_target_details": MongoDBTargetDetails.from_dict(obj["mongo_db_target_details"]) if obj.get("mongo_db_target_details") is not None else None,
            "native_k8s_target_details": NativeK8sTargetDetails.from_dict(obj["native_k8s_target_details"]) if obj.get("native_k8s_target_details") is not None else None,
            "ping_target_details": PingTargetDetails.from_dict(obj["ping_target_details"]) if obj.get("ping_target_details") is not None else None,
            "rabbit_mq_target_details": RabbitMQTargetDetails.from_dict(obj["rabbit_mq_target_details"]) if obj.get("rabbit_mq_target_details") is not None else None,
            "salesforce_target_details": SalesforceTargetDetails.from_dict(obj["salesforce_target_details"]) if obj.get("salesforce_target_details") is not None else None,
            "sectigo_target_details": SectigoTargetDetails.from_dict(obj["sectigo_target_details"]) if obj.get("sectigo_target_details") is not None else None,
            "ssh_target_details": SSHTargetDetails.from_dict(obj["ssh_target_details"]) if obj.get("ssh_target_details") is not None else None,
            "venafi_target_details": VenafiTargetDetails.from_dict(obj["venafi_target_details"]) if obj.get("venafi_target_details") is not None else None,
            "web_target_details": WebTargetDetails.from_dict(obj["web_target_details"]) if obj.get("web_target_details") is not None else None,
            "windows_target_details": WindowsTargetDetails.from_dict(obj["windows_target_details"]) if obj.get("windows_target_details") is not None else None,
            "zerossl_target_details": ZeroSSLTargetDetails.from_dict(obj["zerossl_target_details"]) if obj.get("zerossl_target_details") is not None else None
        })
        return _obj


