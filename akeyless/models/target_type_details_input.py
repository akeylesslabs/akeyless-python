# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class TargetTypeDetailsInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'artifactory_admin_apikey': 'str',
        'artifactory_admin_username': 'str',
        'artifactory_base_url': 'str',
        'aws_access_key_id': 'str',
        'aws_region': 'str',
        'aws_secret_access_key': 'str',
        'aws_session_token': 'str',
        'azure_client_id': 'str',
        'azure_client_secret': 'str',
        'azure_tenant_id': 'str',
        'ca_cert_data': 'list[int]',
        'ca_cert_name': 'str',
        'chef_server_host_name': 'str',
        'chef_server_key': 'str',
        'chef_server_port': 'str',
        'chef_server_url': 'str',
        'chef_server_username': 'str',
        'chef_skip_ssl': 'bool',
        'client_id': 'str',
        'client_secret': 'str',
        'db_host_name': 'str',
        'db_name': 'str',
        'db_port': 'str',
        'db_pwd': 'str',
        'db_server_certificates': 'str',
        'db_server_name': 'str',
        'db_user_name': 'str',
        'eks_access_key_id': 'str',
        'eks_cluster_ca_certificate': 'str',
        'eks_cluster_endpoint': 'str',
        'eks_cluster_name': 'str',
        'eks_region': 'str',
        'eks_secret_access_key': 'str',
        'gcp_service_account_email': 'str',
        'gcp_service_account_key': 'str',
        'github_app_id': 'int',
        'github_app_private_key': 'str',
        'github_base_url': 'str',
        'gke_cluster_ca_certificate': 'str',
        'gke_cluster_endpoint': 'str',
        'gke_cluster_name': 'str',
        'gke_service_account_key': 'str',
        'gke_service_account_name': 'str',
        'host': 'str',
        'k8s_bearer_token': 'str',
        'k8s_cluster_ca_certificate': 'str',
        'k8s_cluster_endpoint': 'str',
        'ldap_audience': 'str',
        'ldap_bind_dn': 'str',
        'ldap_bind_password': 'str',
        'ldap_certificate': 'str',
        'ldap_token_expiration': 'str',
        'ldap_url': 'str',
        'mongodb_atlas_api_private_key': 'str',
        'mongodb_atlas_api_public_key': 'str',
        'mongodb_atlas_project_id': 'str',
        'mongodb_db_name': 'str',
        'mongodb_default_auth_db': 'str',
        'mongodb_host_port': 'str',
        'mongodb_is_atlas': 'bool',
        'mongodb_password': 'str',
        'mongodb_uri_connection': 'str',
        'mongodb_uri_options': 'str',
        'mongodb_username': 'str',
        'password': 'str',
        'payload': 'str',
        'port': 'str',
        'private_key': 'str',
        'private_key_password': 'str',
        'rabbitmq_server_password': 'str',
        'rabbitmq_server_uri': 'str',
        'rabbitmq_server_user': 'str',
        'security_token': 'str',
        'sf_account': 'str',
        'ssl_connection_certificate': 'str',
        'ssl_connection_mode': 'bool',
        'tenant_url': 'str',
        'url': 'str',
        'use_gw_cloud_identity': 'bool',
        'user_name': 'str',
        'username': 'str',
        'venafi_api_key': 'str',
        'venafi_base_url': 'str',
        'venafi_tpp_password': 'str',
        'venafi_tpp_username': 'str',
        'venafi_use_tpp': 'bool',
        'venafi_zone': 'str'
    }

    attribute_map = {
        'artifactory_admin_apikey': 'artifactory_admin_apikey',
        'artifactory_admin_username': 'artifactory_admin_username',
        'artifactory_base_url': 'artifactory_base_url',
        'aws_access_key_id': 'aws_access_key_id',
        'aws_region': 'aws_region',
        'aws_secret_access_key': 'aws_secret_access_key',
        'aws_session_token': 'aws_session_token',
        'azure_client_id': 'azure_client_id',
        'azure_client_secret': 'azure_client_secret',
        'azure_tenant_id': 'azure_tenant_id',
        'ca_cert_data': 'ca_cert_data',
        'ca_cert_name': 'ca_cert_name',
        'chef_server_host_name': 'chef_server_host_name',
        'chef_server_key': 'chef_server_key',
        'chef_server_port': 'chef_server_port',
        'chef_server_url': 'chef_server_url',
        'chef_server_username': 'chef_server_username',
        'chef_skip_ssl': 'chef_skip_ssl',
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'db_host_name': 'db_host_name',
        'db_name': 'db_name',
        'db_port': 'db_port',
        'db_pwd': 'db_pwd',
        'db_server_certificates': 'db_server_certificates',
        'db_server_name': 'db_server_name',
        'db_user_name': 'db_user_name',
        'eks_access_key_id': 'eks_access_key_id',
        'eks_cluster_ca_certificate': 'eks_cluster_ca_certificate',
        'eks_cluster_endpoint': 'eks_cluster_endpoint',
        'eks_cluster_name': 'eks_cluster_name',
        'eks_region': 'eks_region',
        'eks_secret_access_key': 'eks_secret_access_key',
        'gcp_service_account_email': 'gcp_service_account_email',
        'gcp_service_account_key': 'gcp_service_account_key',
        'github_app_id': 'github_app_id',
        'github_app_private_key': 'github_app_private_key',
        'github_base_url': 'github_base_url',
        'gke_cluster_ca_certificate': 'gke_cluster_ca_certificate',
        'gke_cluster_endpoint': 'gke_cluster_endpoint',
        'gke_cluster_name': 'gke_cluster_name',
        'gke_service_account_key': 'gke_service_account_key',
        'gke_service_account_name': 'gke_service_account_name',
        'host': 'host',
        'k8s_bearer_token': 'k8s_bearer_token',
        'k8s_cluster_ca_certificate': 'k8s_cluster_ca_certificate',
        'k8s_cluster_endpoint': 'k8s_cluster_endpoint',
        'ldap_audience': 'ldap_audience',
        'ldap_bind_dn': 'ldap_bind_dn',
        'ldap_bind_password': 'ldap_bind_password',
        'ldap_certificate': 'ldap_certificate',
        'ldap_token_expiration': 'ldap_token_expiration',
        'ldap_url': 'ldap_url',
        'mongodb_atlas_api_private_key': 'mongodb_atlas_api_private_key',
        'mongodb_atlas_api_public_key': 'mongodb_atlas_api_public_key',
        'mongodb_atlas_project_id': 'mongodb_atlas_project_id',
        'mongodb_db_name': 'mongodb_db_name',
        'mongodb_default_auth_db': 'mongodb_default_auth_db',
        'mongodb_host_port': 'mongodb_host_port',
        'mongodb_is_atlas': 'mongodb_is_atlas',
        'mongodb_password': 'mongodb_password',
        'mongodb_uri_connection': 'mongodb_uri_connection',
        'mongodb_uri_options': 'mongodb_uri_options',
        'mongodb_username': 'mongodb_username',
        'password': 'password',
        'payload': 'payload',
        'port': 'port',
        'private_key': 'private_key',
        'private_key_password': 'private_key_password',
        'rabbitmq_server_password': 'rabbitmq_server_password',
        'rabbitmq_server_uri': 'rabbitmq_server_uri',
        'rabbitmq_server_user': 'rabbitmq_server_user',
        'security_token': 'security_token',
        'sf_account': 'sf_account',
        'ssl_connection_certificate': 'ssl_connection_certificate',
        'ssl_connection_mode': 'ssl_connection_mode',
        'tenant_url': 'tenant_url',
        'url': 'url',
        'use_gw_cloud_identity': 'use_gw_cloud_identity',
        'user_name': 'user_name',
        'username': 'username',
        'venafi_api_key': 'venafi_api_key',
        'venafi_base_url': 'venafi_base_url',
        'venafi_tpp_password': 'venafi_tpp_password',
        'venafi_tpp_username': 'venafi_tpp_username',
        'venafi_use_tpp': 'venafi_use_tpp',
        'venafi_zone': 'venafi_zone'
    }

    def __init__(self, artifactory_admin_apikey=None, artifactory_admin_username=None, artifactory_base_url=None, aws_access_key_id=None, aws_region=None, aws_secret_access_key=None, aws_session_token=None, azure_client_id=None, azure_client_secret=None, azure_tenant_id=None, ca_cert_data=None, ca_cert_name=None, chef_server_host_name=None, chef_server_key=None, chef_server_port=None, chef_server_url=None, chef_server_username=None, chef_skip_ssl=None, client_id=None, client_secret=None, db_host_name=None, db_name=None, db_port=None, db_pwd=None, db_server_certificates=None, db_server_name=None, db_user_name=None, eks_access_key_id=None, eks_cluster_ca_certificate=None, eks_cluster_endpoint=None, eks_cluster_name=None, eks_region=None, eks_secret_access_key=None, gcp_service_account_email=None, gcp_service_account_key=None, github_app_id=None, github_app_private_key=None, github_base_url=None, gke_cluster_ca_certificate=None, gke_cluster_endpoint=None, gke_cluster_name=None, gke_service_account_key=None, gke_service_account_name=None, host=None, k8s_bearer_token=None, k8s_cluster_ca_certificate=None, k8s_cluster_endpoint=None, ldap_audience=None, ldap_bind_dn=None, ldap_bind_password=None, ldap_certificate=None, ldap_token_expiration=None, ldap_url=None, mongodb_atlas_api_private_key=None, mongodb_atlas_api_public_key=None, mongodb_atlas_project_id=None, mongodb_db_name=None, mongodb_default_auth_db=None, mongodb_host_port=None, mongodb_is_atlas=None, mongodb_password=None, mongodb_uri_connection=None, mongodb_uri_options=None, mongodb_username=None, password=None, payload=None, port=None, private_key=None, private_key_password=None, rabbitmq_server_password=None, rabbitmq_server_uri=None, rabbitmq_server_user=None, security_token=None, sf_account=None, ssl_connection_certificate=None, ssl_connection_mode=None, tenant_url=None, url=None, use_gw_cloud_identity=None, user_name=None, username=None, venafi_api_key=None, venafi_base_url=None, venafi_tpp_password=None, venafi_tpp_username=None, venafi_use_tpp=None, venafi_zone=None, local_vars_configuration=None):  # noqa: E501
        """TargetTypeDetailsInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._artifactory_admin_apikey = None
        self._artifactory_admin_username = None
        self._artifactory_base_url = None
        self._aws_access_key_id = None
        self._aws_region = None
        self._aws_secret_access_key = None
        self._aws_session_token = None
        self._azure_client_id = None
        self._azure_client_secret = None
        self._azure_tenant_id = None
        self._ca_cert_data = None
        self._ca_cert_name = None
        self._chef_server_host_name = None
        self._chef_server_key = None
        self._chef_server_port = None
        self._chef_server_url = None
        self._chef_server_username = None
        self._chef_skip_ssl = None
        self._client_id = None
        self._client_secret = None
        self._db_host_name = None
        self._db_name = None
        self._db_port = None
        self._db_pwd = None
        self._db_server_certificates = None
        self._db_server_name = None
        self._db_user_name = None
        self._eks_access_key_id = None
        self._eks_cluster_ca_certificate = None
        self._eks_cluster_endpoint = None
        self._eks_cluster_name = None
        self._eks_region = None
        self._eks_secret_access_key = None
        self._gcp_service_account_email = None
        self._gcp_service_account_key = None
        self._github_app_id = None
        self._github_app_private_key = None
        self._github_base_url = None
        self._gke_cluster_ca_certificate = None
        self._gke_cluster_endpoint = None
        self._gke_cluster_name = None
        self._gke_service_account_key = None
        self._gke_service_account_name = None
        self._host = None
        self._k8s_bearer_token = None
        self._k8s_cluster_ca_certificate = None
        self._k8s_cluster_endpoint = None
        self._ldap_audience = None
        self._ldap_bind_dn = None
        self._ldap_bind_password = None
        self._ldap_certificate = None
        self._ldap_token_expiration = None
        self._ldap_url = None
        self._mongodb_atlas_api_private_key = None
        self._mongodb_atlas_api_public_key = None
        self._mongodb_atlas_project_id = None
        self._mongodb_db_name = None
        self._mongodb_default_auth_db = None
        self._mongodb_host_port = None
        self._mongodb_is_atlas = None
        self._mongodb_password = None
        self._mongodb_uri_connection = None
        self._mongodb_uri_options = None
        self._mongodb_username = None
        self._password = None
        self._payload = None
        self._port = None
        self._private_key = None
        self._private_key_password = None
        self._rabbitmq_server_password = None
        self._rabbitmq_server_uri = None
        self._rabbitmq_server_user = None
        self._security_token = None
        self._sf_account = None
        self._ssl_connection_certificate = None
        self._ssl_connection_mode = None
        self._tenant_url = None
        self._url = None
        self._use_gw_cloud_identity = None
        self._user_name = None
        self._username = None
        self._venafi_api_key = None
        self._venafi_base_url = None
        self._venafi_tpp_password = None
        self._venafi_tpp_username = None
        self._venafi_use_tpp = None
        self._venafi_zone = None
        self.discriminator = None

        if artifactory_admin_apikey is not None:
            self.artifactory_admin_apikey = artifactory_admin_apikey
        if artifactory_admin_username is not None:
            self.artifactory_admin_username = artifactory_admin_username
        if artifactory_base_url is not None:
            self.artifactory_base_url = artifactory_base_url
        if aws_access_key_id is not None:
            self.aws_access_key_id = aws_access_key_id
        if aws_region is not None:
            self.aws_region = aws_region
        if aws_secret_access_key is not None:
            self.aws_secret_access_key = aws_secret_access_key
        if aws_session_token is not None:
            self.aws_session_token = aws_session_token
        if azure_client_id is not None:
            self.azure_client_id = azure_client_id
        if azure_client_secret is not None:
            self.azure_client_secret = azure_client_secret
        if azure_tenant_id is not None:
            self.azure_tenant_id = azure_tenant_id
        if ca_cert_data is not None:
            self.ca_cert_data = ca_cert_data
        if ca_cert_name is not None:
            self.ca_cert_name = ca_cert_name
        if chef_server_host_name is not None:
            self.chef_server_host_name = chef_server_host_name
        if chef_server_key is not None:
            self.chef_server_key = chef_server_key
        if chef_server_port is not None:
            self.chef_server_port = chef_server_port
        if chef_server_url is not None:
            self.chef_server_url = chef_server_url
        if chef_server_username is not None:
            self.chef_server_username = chef_server_username
        if chef_skip_ssl is not None:
            self.chef_skip_ssl = chef_skip_ssl
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if db_host_name is not None:
            self.db_host_name = db_host_name
        if db_name is not None:
            self.db_name = db_name
        if db_port is not None:
            self.db_port = db_port
        if db_pwd is not None:
            self.db_pwd = db_pwd
        if db_server_certificates is not None:
            self.db_server_certificates = db_server_certificates
        if db_server_name is not None:
            self.db_server_name = db_server_name
        if db_user_name is not None:
            self.db_user_name = db_user_name
        if eks_access_key_id is not None:
            self.eks_access_key_id = eks_access_key_id
        if eks_cluster_ca_certificate is not None:
            self.eks_cluster_ca_certificate = eks_cluster_ca_certificate
        if eks_cluster_endpoint is not None:
            self.eks_cluster_endpoint = eks_cluster_endpoint
        if eks_cluster_name is not None:
            self.eks_cluster_name = eks_cluster_name
        if eks_region is not None:
            self.eks_region = eks_region
        if eks_secret_access_key is not None:
            self.eks_secret_access_key = eks_secret_access_key
        if gcp_service_account_email is not None:
            self.gcp_service_account_email = gcp_service_account_email
        if gcp_service_account_key is not None:
            self.gcp_service_account_key = gcp_service_account_key
        if github_app_id is not None:
            self.github_app_id = github_app_id
        if github_app_private_key is not None:
            self.github_app_private_key = github_app_private_key
        if github_base_url is not None:
            self.github_base_url = github_base_url
        if gke_cluster_ca_certificate is not None:
            self.gke_cluster_ca_certificate = gke_cluster_ca_certificate
        if gke_cluster_endpoint is not None:
            self.gke_cluster_endpoint = gke_cluster_endpoint
        if gke_cluster_name is not None:
            self.gke_cluster_name = gke_cluster_name
        if gke_service_account_key is not None:
            self.gke_service_account_key = gke_service_account_key
        if gke_service_account_name is not None:
            self.gke_service_account_name = gke_service_account_name
        if host is not None:
            self.host = host
        if k8s_bearer_token is not None:
            self.k8s_bearer_token = k8s_bearer_token
        if k8s_cluster_ca_certificate is not None:
            self.k8s_cluster_ca_certificate = k8s_cluster_ca_certificate
        if k8s_cluster_endpoint is not None:
            self.k8s_cluster_endpoint = k8s_cluster_endpoint
        if ldap_audience is not None:
            self.ldap_audience = ldap_audience
        if ldap_bind_dn is not None:
            self.ldap_bind_dn = ldap_bind_dn
        if ldap_bind_password is not None:
            self.ldap_bind_password = ldap_bind_password
        if ldap_certificate is not None:
            self.ldap_certificate = ldap_certificate
        if ldap_token_expiration is not None:
            self.ldap_token_expiration = ldap_token_expiration
        if ldap_url is not None:
            self.ldap_url = ldap_url
        if mongodb_atlas_api_private_key is not None:
            self.mongodb_atlas_api_private_key = mongodb_atlas_api_private_key
        if mongodb_atlas_api_public_key is not None:
            self.mongodb_atlas_api_public_key = mongodb_atlas_api_public_key
        if mongodb_atlas_project_id is not None:
            self.mongodb_atlas_project_id = mongodb_atlas_project_id
        if mongodb_db_name is not None:
            self.mongodb_db_name = mongodb_db_name
        if mongodb_default_auth_db is not None:
            self.mongodb_default_auth_db = mongodb_default_auth_db
        if mongodb_host_port is not None:
            self.mongodb_host_port = mongodb_host_port
        if mongodb_is_atlas is not None:
            self.mongodb_is_atlas = mongodb_is_atlas
        if mongodb_password is not None:
            self.mongodb_password = mongodb_password
        if mongodb_uri_connection is not None:
            self.mongodb_uri_connection = mongodb_uri_connection
        if mongodb_uri_options is not None:
            self.mongodb_uri_options = mongodb_uri_options
        if mongodb_username is not None:
            self.mongodb_username = mongodb_username
        if password is not None:
            self.password = password
        if payload is not None:
            self.payload = payload
        if port is not None:
            self.port = port
        if private_key is not None:
            self.private_key = private_key
        if private_key_password is not None:
            self.private_key_password = private_key_password
        if rabbitmq_server_password is not None:
            self.rabbitmq_server_password = rabbitmq_server_password
        if rabbitmq_server_uri is not None:
            self.rabbitmq_server_uri = rabbitmq_server_uri
        if rabbitmq_server_user is not None:
            self.rabbitmq_server_user = rabbitmq_server_user
        if security_token is not None:
            self.security_token = security_token
        if sf_account is not None:
            self.sf_account = sf_account
        if ssl_connection_certificate is not None:
            self.ssl_connection_certificate = ssl_connection_certificate
        if ssl_connection_mode is not None:
            self.ssl_connection_mode = ssl_connection_mode
        if tenant_url is not None:
            self.tenant_url = tenant_url
        if url is not None:
            self.url = url
        if use_gw_cloud_identity is not None:
            self.use_gw_cloud_identity = use_gw_cloud_identity
        if user_name is not None:
            self.user_name = user_name
        if username is not None:
            self.username = username
        if venafi_api_key is not None:
            self.venafi_api_key = venafi_api_key
        if venafi_base_url is not None:
            self.venafi_base_url = venafi_base_url
        if venafi_tpp_password is not None:
            self.venafi_tpp_password = venafi_tpp_password
        if venafi_tpp_username is not None:
            self.venafi_tpp_username = venafi_tpp_username
        if venafi_use_tpp is not None:
            self.venafi_use_tpp = venafi_use_tpp
        if venafi_zone is not None:
            self.venafi_zone = venafi_zone

    @property
    def artifactory_admin_apikey(self):
        """Gets the artifactory_admin_apikey of this TargetTypeDetailsInput.  # noqa: E501


        :return: The artifactory_admin_apikey of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._artifactory_admin_apikey

    @artifactory_admin_apikey.setter
    def artifactory_admin_apikey(self, artifactory_admin_apikey):
        """Sets the artifactory_admin_apikey of this TargetTypeDetailsInput.


        :param artifactory_admin_apikey: The artifactory_admin_apikey of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._artifactory_admin_apikey = artifactory_admin_apikey

    @property
    def artifactory_admin_username(self):
        """Gets the artifactory_admin_username of this TargetTypeDetailsInput.  # noqa: E501


        :return: The artifactory_admin_username of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._artifactory_admin_username

    @artifactory_admin_username.setter
    def artifactory_admin_username(self, artifactory_admin_username):
        """Sets the artifactory_admin_username of this TargetTypeDetailsInput.


        :param artifactory_admin_username: The artifactory_admin_username of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._artifactory_admin_username = artifactory_admin_username

    @property
    def artifactory_base_url(self):
        """Gets the artifactory_base_url of this TargetTypeDetailsInput.  # noqa: E501


        :return: The artifactory_base_url of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._artifactory_base_url

    @artifactory_base_url.setter
    def artifactory_base_url(self, artifactory_base_url):
        """Sets the artifactory_base_url of this TargetTypeDetailsInput.


        :param artifactory_base_url: The artifactory_base_url of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._artifactory_base_url = artifactory_base_url

    @property
    def aws_access_key_id(self):
        """Gets the aws_access_key_id of this TargetTypeDetailsInput.  # noqa: E501


        :return: The aws_access_key_id of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._aws_access_key_id

    @aws_access_key_id.setter
    def aws_access_key_id(self, aws_access_key_id):
        """Sets the aws_access_key_id of this TargetTypeDetailsInput.


        :param aws_access_key_id: The aws_access_key_id of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._aws_access_key_id = aws_access_key_id

    @property
    def aws_region(self):
        """Gets the aws_region of this TargetTypeDetailsInput.  # noqa: E501


        :return: The aws_region of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """Sets the aws_region of this TargetTypeDetailsInput.


        :param aws_region: The aws_region of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._aws_region = aws_region

    @property
    def aws_secret_access_key(self):
        """Gets the aws_secret_access_key of this TargetTypeDetailsInput.  # noqa: E501


        :return: The aws_secret_access_key of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._aws_secret_access_key

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, aws_secret_access_key):
        """Sets the aws_secret_access_key of this TargetTypeDetailsInput.


        :param aws_secret_access_key: The aws_secret_access_key of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._aws_secret_access_key = aws_secret_access_key

    @property
    def aws_session_token(self):
        """Gets the aws_session_token of this TargetTypeDetailsInput.  # noqa: E501


        :return: The aws_session_token of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._aws_session_token

    @aws_session_token.setter
    def aws_session_token(self, aws_session_token):
        """Sets the aws_session_token of this TargetTypeDetailsInput.


        :param aws_session_token: The aws_session_token of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._aws_session_token = aws_session_token

    @property
    def azure_client_id(self):
        """Gets the azure_client_id of this TargetTypeDetailsInput.  # noqa: E501


        :return: The azure_client_id of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._azure_client_id

    @azure_client_id.setter
    def azure_client_id(self, azure_client_id):
        """Sets the azure_client_id of this TargetTypeDetailsInput.


        :param azure_client_id: The azure_client_id of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._azure_client_id = azure_client_id

    @property
    def azure_client_secret(self):
        """Gets the azure_client_secret of this TargetTypeDetailsInput.  # noqa: E501


        :return: The azure_client_secret of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._azure_client_secret

    @azure_client_secret.setter
    def azure_client_secret(self, azure_client_secret):
        """Sets the azure_client_secret of this TargetTypeDetailsInput.


        :param azure_client_secret: The azure_client_secret of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._azure_client_secret = azure_client_secret

    @property
    def azure_tenant_id(self):
        """Gets the azure_tenant_id of this TargetTypeDetailsInput.  # noqa: E501


        :return: The azure_tenant_id of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._azure_tenant_id

    @azure_tenant_id.setter
    def azure_tenant_id(self, azure_tenant_id):
        """Sets the azure_tenant_id of this TargetTypeDetailsInput.


        :param azure_tenant_id: The azure_tenant_id of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._azure_tenant_id = azure_tenant_id

    @property
    def ca_cert_data(self):
        """Gets the ca_cert_data of this TargetTypeDetailsInput.  # noqa: E501

        CACertData is the rsa 4096 certificate data in PEM format  # noqa: E501

        :return: The ca_cert_data of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: list[int]
        """
        return self._ca_cert_data

    @ca_cert_data.setter
    def ca_cert_data(self, ca_cert_data):
        """Sets the ca_cert_data of this TargetTypeDetailsInput.

        CACertData is the rsa 4096 certificate data in PEM format  # noqa: E501

        :param ca_cert_data: The ca_cert_data of this TargetTypeDetailsInput.  # noqa: E501
        :type: list[int]
        """

        self._ca_cert_data = ca_cert_data

    @property
    def ca_cert_name(self):
        """Gets the ca_cert_name of this TargetTypeDetailsInput.  # noqa: E501

        CACertName is the name of the certificate in SalesForce tenant  # noqa: E501

        :return: The ca_cert_name of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._ca_cert_name

    @ca_cert_name.setter
    def ca_cert_name(self, ca_cert_name):
        """Sets the ca_cert_name of this TargetTypeDetailsInput.

        CACertName is the name of the certificate in SalesForce tenant  # noqa: E501

        :param ca_cert_name: The ca_cert_name of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._ca_cert_name = ca_cert_name

    @property
    def chef_server_host_name(self):
        """Gets the chef_server_host_name of this TargetTypeDetailsInput.  # noqa: E501


        :return: The chef_server_host_name of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._chef_server_host_name

    @chef_server_host_name.setter
    def chef_server_host_name(self, chef_server_host_name):
        """Sets the chef_server_host_name of this TargetTypeDetailsInput.


        :param chef_server_host_name: The chef_server_host_name of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._chef_server_host_name = chef_server_host_name

    @property
    def chef_server_key(self):
        """Gets the chef_server_key of this TargetTypeDetailsInput.  # noqa: E501


        :return: The chef_server_key of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._chef_server_key

    @chef_server_key.setter
    def chef_server_key(self, chef_server_key):
        """Sets the chef_server_key of this TargetTypeDetailsInput.


        :param chef_server_key: The chef_server_key of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._chef_server_key = chef_server_key

    @property
    def chef_server_port(self):
        """Gets the chef_server_port of this TargetTypeDetailsInput.  # noqa: E501


        :return: The chef_server_port of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._chef_server_port

    @chef_server_port.setter
    def chef_server_port(self, chef_server_port):
        """Sets the chef_server_port of this TargetTypeDetailsInput.


        :param chef_server_port: The chef_server_port of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._chef_server_port = chef_server_port

    @property
    def chef_server_url(self):
        """Gets the chef_server_url of this TargetTypeDetailsInput.  # noqa: E501


        :return: The chef_server_url of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._chef_server_url

    @chef_server_url.setter
    def chef_server_url(self, chef_server_url):
        """Sets the chef_server_url of this TargetTypeDetailsInput.


        :param chef_server_url: The chef_server_url of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._chef_server_url = chef_server_url

    @property
    def chef_server_username(self):
        """Gets the chef_server_username of this TargetTypeDetailsInput.  # noqa: E501


        :return: The chef_server_username of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._chef_server_username

    @chef_server_username.setter
    def chef_server_username(self, chef_server_username):
        """Sets the chef_server_username of this TargetTypeDetailsInput.


        :param chef_server_username: The chef_server_username of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._chef_server_username = chef_server_username

    @property
    def chef_skip_ssl(self):
        """Gets the chef_skip_ssl of this TargetTypeDetailsInput.  # noqa: E501


        :return: The chef_skip_ssl of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: bool
        """
        return self._chef_skip_ssl

    @chef_skip_ssl.setter
    def chef_skip_ssl(self, chef_skip_ssl):
        """Sets the chef_skip_ssl of this TargetTypeDetailsInput.


        :param chef_skip_ssl: The chef_skip_ssl of this TargetTypeDetailsInput.  # noqa: E501
        :type: bool
        """

        self._chef_skip_ssl = chef_skip_ssl

    @property
    def client_id(self):
        """Gets the client_id of this TargetTypeDetailsInput.  # noqa: E501


        :return: The client_id of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this TargetTypeDetailsInput.


        :param client_id: The client_id of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this TargetTypeDetailsInput.  # noqa: E501


        :return: The client_secret of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this TargetTypeDetailsInput.


        :param client_secret: The client_secret of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def db_host_name(self):
        """Gets the db_host_name of this TargetTypeDetailsInput.  # noqa: E501


        :return: The db_host_name of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._db_host_name

    @db_host_name.setter
    def db_host_name(self, db_host_name):
        """Sets the db_host_name of this TargetTypeDetailsInput.


        :param db_host_name: The db_host_name of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._db_host_name = db_host_name

    @property
    def db_name(self):
        """Gets the db_name of this TargetTypeDetailsInput.  # noqa: E501


        :return: The db_name of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this TargetTypeDetailsInput.


        :param db_name: The db_name of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._db_name = db_name

    @property
    def db_port(self):
        """Gets the db_port of this TargetTypeDetailsInput.  # noqa: E501


        :return: The db_port of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._db_port

    @db_port.setter
    def db_port(self, db_port):
        """Sets the db_port of this TargetTypeDetailsInput.


        :param db_port: The db_port of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._db_port = db_port

    @property
    def db_pwd(self):
        """Gets the db_pwd of this TargetTypeDetailsInput.  # noqa: E501


        :return: The db_pwd of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._db_pwd

    @db_pwd.setter
    def db_pwd(self, db_pwd):
        """Sets the db_pwd of this TargetTypeDetailsInput.


        :param db_pwd: The db_pwd of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._db_pwd = db_pwd

    @property
    def db_server_certificates(self):
        """Gets the db_server_certificates of this TargetTypeDetailsInput.  # noqa: E501

        (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host's root CA set.  # noqa: E501

        :return: The db_server_certificates of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._db_server_certificates

    @db_server_certificates.setter
    def db_server_certificates(self, db_server_certificates):
        """Sets the db_server_certificates of this TargetTypeDetailsInput.

        (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host's root CA set.  # noqa: E501

        :param db_server_certificates: The db_server_certificates of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._db_server_certificates = db_server_certificates

    @property
    def db_server_name(self):
        """Gets the db_server_name of this TargetTypeDetailsInput.  # noqa: E501

        (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client's handshake to support virtual hosting unless it is an IP address.  # noqa: E501

        :return: The db_server_name of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._db_server_name

    @db_server_name.setter
    def db_server_name(self, db_server_name):
        """Sets the db_server_name of this TargetTypeDetailsInput.

        (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client's handshake to support virtual hosting unless it is an IP address.  # noqa: E501

        :param db_server_name: The db_server_name of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._db_server_name = db_server_name

    @property
    def db_user_name(self):
        """Gets the db_user_name of this TargetTypeDetailsInput.  # noqa: E501


        :return: The db_user_name of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._db_user_name

    @db_user_name.setter
    def db_user_name(self, db_user_name):
        """Sets the db_user_name of this TargetTypeDetailsInput.


        :param db_user_name: The db_user_name of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._db_user_name = db_user_name

    @property
    def eks_access_key_id(self):
        """Gets the eks_access_key_id of this TargetTypeDetailsInput.  # noqa: E501


        :return: The eks_access_key_id of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._eks_access_key_id

    @eks_access_key_id.setter
    def eks_access_key_id(self, eks_access_key_id):
        """Sets the eks_access_key_id of this TargetTypeDetailsInput.


        :param eks_access_key_id: The eks_access_key_id of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._eks_access_key_id = eks_access_key_id

    @property
    def eks_cluster_ca_certificate(self):
        """Gets the eks_cluster_ca_certificate of this TargetTypeDetailsInput.  # noqa: E501


        :return: The eks_cluster_ca_certificate of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._eks_cluster_ca_certificate

    @eks_cluster_ca_certificate.setter
    def eks_cluster_ca_certificate(self, eks_cluster_ca_certificate):
        """Sets the eks_cluster_ca_certificate of this TargetTypeDetailsInput.


        :param eks_cluster_ca_certificate: The eks_cluster_ca_certificate of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._eks_cluster_ca_certificate = eks_cluster_ca_certificate

    @property
    def eks_cluster_endpoint(self):
        """Gets the eks_cluster_endpoint of this TargetTypeDetailsInput.  # noqa: E501


        :return: The eks_cluster_endpoint of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._eks_cluster_endpoint

    @eks_cluster_endpoint.setter
    def eks_cluster_endpoint(self, eks_cluster_endpoint):
        """Sets the eks_cluster_endpoint of this TargetTypeDetailsInput.


        :param eks_cluster_endpoint: The eks_cluster_endpoint of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._eks_cluster_endpoint = eks_cluster_endpoint

    @property
    def eks_cluster_name(self):
        """Gets the eks_cluster_name of this TargetTypeDetailsInput.  # noqa: E501


        :return: The eks_cluster_name of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._eks_cluster_name

    @eks_cluster_name.setter
    def eks_cluster_name(self, eks_cluster_name):
        """Sets the eks_cluster_name of this TargetTypeDetailsInput.


        :param eks_cluster_name: The eks_cluster_name of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._eks_cluster_name = eks_cluster_name

    @property
    def eks_region(self):
        """Gets the eks_region of this TargetTypeDetailsInput.  # noqa: E501


        :return: The eks_region of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._eks_region

    @eks_region.setter
    def eks_region(self, eks_region):
        """Sets the eks_region of this TargetTypeDetailsInput.


        :param eks_region: The eks_region of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._eks_region = eks_region

    @property
    def eks_secret_access_key(self):
        """Gets the eks_secret_access_key of this TargetTypeDetailsInput.  # noqa: E501


        :return: The eks_secret_access_key of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._eks_secret_access_key

    @eks_secret_access_key.setter
    def eks_secret_access_key(self, eks_secret_access_key):
        """Sets the eks_secret_access_key of this TargetTypeDetailsInput.


        :param eks_secret_access_key: The eks_secret_access_key of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._eks_secret_access_key = eks_secret_access_key

    @property
    def gcp_service_account_email(self):
        """Gets the gcp_service_account_email of this TargetTypeDetailsInput.  # noqa: E501


        :return: The gcp_service_account_email of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._gcp_service_account_email

    @gcp_service_account_email.setter
    def gcp_service_account_email(self, gcp_service_account_email):
        """Sets the gcp_service_account_email of this TargetTypeDetailsInput.


        :param gcp_service_account_email: The gcp_service_account_email of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._gcp_service_account_email = gcp_service_account_email

    @property
    def gcp_service_account_key(self):
        """Gets the gcp_service_account_key of this TargetTypeDetailsInput.  # noqa: E501


        :return: The gcp_service_account_key of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._gcp_service_account_key

    @gcp_service_account_key.setter
    def gcp_service_account_key(self, gcp_service_account_key):
        """Sets the gcp_service_account_key of this TargetTypeDetailsInput.


        :param gcp_service_account_key: The gcp_service_account_key of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._gcp_service_account_key = gcp_service_account_key

    @property
    def github_app_id(self):
        """Gets the github_app_id of this TargetTypeDetailsInput.  # noqa: E501


        :return: The github_app_id of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: int
        """
        return self._github_app_id

    @github_app_id.setter
    def github_app_id(self, github_app_id):
        """Sets the github_app_id of this TargetTypeDetailsInput.


        :param github_app_id: The github_app_id of this TargetTypeDetailsInput.  # noqa: E501
        :type: int
        """

        self._github_app_id = github_app_id

    @property
    def github_app_private_key(self):
        """Gets the github_app_private_key of this TargetTypeDetailsInput.  # noqa: E501


        :return: The github_app_private_key of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._github_app_private_key

    @github_app_private_key.setter
    def github_app_private_key(self, github_app_private_key):
        """Sets the github_app_private_key of this TargetTypeDetailsInput.


        :param github_app_private_key: The github_app_private_key of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._github_app_private_key = github_app_private_key

    @property
    def github_base_url(self):
        """Gets the github_base_url of this TargetTypeDetailsInput.  # noqa: E501


        :return: The github_base_url of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._github_base_url

    @github_base_url.setter
    def github_base_url(self, github_base_url):
        """Sets the github_base_url of this TargetTypeDetailsInput.


        :param github_base_url: The github_base_url of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._github_base_url = github_base_url

    @property
    def gke_cluster_ca_certificate(self):
        """Gets the gke_cluster_ca_certificate of this TargetTypeDetailsInput.  # noqa: E501


        :return: The gke_cluster_ca_certificate of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._gke_cluster_ca_certificate

    @gke_cluster_ca_certificate.setter
    def gke_cluster_ca_certificate(self, gke_cluster_ca_certificate):
        """Sets the gke_cluster_ca_certificate of this TargetTypeDetailsInput.


        :param gke_cluster_ca_certificate: The gke_cluster_ca_certificate of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._gke_cluster_ca_certificate = gke_cluster_ca_certificate

    @property
    def gke_cluster_endpoint(self):
        """Gets the gke_cluster_endpoint of this TargetTypeDetailsInput.  # noqa: E501


        :return: The gke_cluster_endpoint of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._gke_cluster_endpoint

    @gke_cluster_endpoint.setter
    def gke_cluster_endpoint(self, gke_cluster_endpoint):
        """Sets the gke_cluster_endpoint of this TargetTypeDetailsInput.


        :param gke_cluster_endpoint: The gke_cluster_endpoint of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._gke_cluster_endpoint = gke_cluster_endpoint

    @property
    def gke_cluster_name(self):
        """Gets the gke_cluster_name of this TargetTypeDetailsInput.  # noqa: E501


        :return: The gke_cluster_name of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._gke_cluster_name

    @gke_cluster_name.setter
    def gke_cluster_name(self, gke_cluster_name):
        """Sets the gke_cluster_name of this TargetTypeDetailsInput.


        :param gke_cluster_name: The gke_cluster_name of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._gke_cluster_name = gke_cluster_name

    @property
    def gke_service_account_key(self):
        """Gets the gke_service_account_key of this TargetTypeDetailsInput.  # noqa: E501


        :return: The gke_service_account_key of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._gke_service_account_key

    @gke_service_account_key.setter
    def gke_service_account_key(self, gke_service_account_key):
        """Sets the gke_service_account_key of this TargetTypeDetailsInput.


        :param gke_service_account_key: The gke_service_account_key of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._gke_service_account_key = gke_service_account_key

    @property
    def gke_service_account_name(self):
        """Gets the gke_service_account_name of this TargetTypeDetailsInput.  # noqa: E501


        :return: The gke_service_account_name of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._gke_service_account_name

    @gke_service_account_name.setter
    def gke_service_account_name(self, gke_service_account_name):
        """Sets the gke_service_account_name of this TargetTypeDetailsInput.


        :param gke_service_account_name: The gke_service_account_name of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._gke_service_account_name = gke_service_account_name

    @property
    def host(self):
        """Gets the host of this TargetTypeDetailsInput.  # noqa: E501


        :return: The host of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this TargetTypeDetailsInput.


        :param host: The host of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def k8s_bearer_token(self):
        """Gets the k8s_bearer_token of this TargetTypeDetailsInput.  # noqa: E501


        :return: The k8s_bearer_token of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._k8s_bearer_token

    @k8s_bearer_token.setter
    def k8s_bearer_token(self, k8s_bearer_token):
        """Sets the k8s_bearer_token of this TargetTypeDetailsInput.


        :param k8s_bearer_token: The k8s_bearer_token of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._k8s_bearer_token = k8s_bearer_token

    @property
    def k8s_cluster_ca_certificate(self):
        """Gets the k8s_cluster_ca_certificate of this TargetTypeDetailsInput.  # noqa: E501


        :return: The k8s_cluster_ca_certificate of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._k8s_cluster_ca_certificate

    @k8s_cluster_ca_certificate.setter
    def k8s_cluster_ca_certificate(self, k8s_cluster_ca_certificate):
        """Sets the k8s_cluster_ca_certificate of this TargetTypeDetailsInput.


        :param k8s_cluster_ca_certificate: The k8s_cluster_ca_certificate of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._k8s_cluster_ca_certificate = k8s_cluster_ca_certificate

    @property
    def k8s_cluster_endpoint(self):
        """Gets the k8s_cluster_endpoint of this TargetTypeDetailsInput.  # noqa: E501


        :return: The k8s_cluster_endpoint of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._k8s_cluster_endpoint

    @k8s_cluster_endpoint.setter
    def k8s_cluster_endpoint(self, k8s_cluster_endpoint):
        """Sets the k8s_cluster_endpoint of this TargetTypeDetailsInput.


        :param k8s_cluster_endpoint: The k8s_cluster_endpoint of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._k8s_cluster_endpoint = k8s_cluster_endpoint

    @property
    def ldap_audience(self):
        """Gets the ldap_audience of this TargetTypeDetailsInput.  # noqa: E501


        :return: The ldap_audience of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._ldap_audience

    @ldap_audience.setter
    def ldap_audience(self, ldap_audience):
        """Sets the ldap_audience of this TargetTypeDetailsInput.


        :param ldap_audience: The ldap_audience of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._ldap_audience = ldap_audience

    @property
    def ldap_bind_dn(self):
        """Gets the ldap_bind_dn of this TargetTypeDetailsInput.  # noqa: E501


        :return: The ldap_bind_dn of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._ldap_bind_dn

    @ldap_bind_dn.setter
    def ldap_bind_dn(self, ldap_bind_dn):
        """Sets the ldap_bind_dn of this TargetTypeDetailsInput.


        :param ldap_bind_dn: The ldap_bind_dn of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._ldap_bind_dn = ldap_bind_dn

    @property
    def ldap_bind_password(self):
        """Gets the ldap_bind_password of this TargetTypeDetailsInput.  # noqa: E501


        :return: The ldap_bind_password of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._ldap_bind_password

    @ldap_bind_password.setter
    def ldap_bind_password(self, ldap_bind_password):
        """Sets the ldap_bind_password of this TargetTypeDetailsInput.


        :param ldap_bind_password: The ldap_bind_password of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._ldap_bind_password = ldap_bind_password

    @property
    def ldap_certificate(self):
        """Gets the ldap_certificate of this TargetTypeDetailsInput.  # noqa: E501


        :return: The ldap_certificate of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._ldap_certificate

    @ldap_certificate.setter
    def ldap_certificate(self, ldap_certificate):
        """Sets the ldap_certificate of this TargetTypeDetailsInput.


        :param ldap_certificate: The ldap_certificate of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._ldap_certificate = ldap_certificate

    @property
    def ldap_token_expiration(self):
        """Gets the ldap_token_expiration of this TargetTypeDetailsInput.  # noqa: E501


        :return: The ldap_token_expiration of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._ldap_token_expiration

    @ldap_token_expiration.setter
    def ldap_token_expiration(self, ldap_token_expiration):
        """Sets the ldap_token_expiration of this TargetTypeDetailsInput.


        :param ldap_token_expiration: The ldap_token_expiration of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._ldap_token_expiration = ldap_token_expiration

    @property
    def ldap_url(self):
        """Gets the ldap_url of this TargetTypeDetailsInput.  # noqa: E501


        :return: The ldap_url of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._ldap_url

    @ldap_url.setter
    def ldap_url(self, ldap_url):
        """Sets the ldap_url of this TargetTypeDetailsInput.


        :param ldap_url: The ldap_url of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._ldap_url = ldap_url

    @property
    def mongodb_atlas_api_private_key(self):
        """Gets the mongodb_atlas_api_private_key of this TargetTypeDetailsInput.  # noqa: E501


        :return: The mongodb_atlas_api_private_key of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_atlas_api_private_key

    @mongodb_atlas_api_private_key.setter
    def mongodb_atlas_api_private_key(self, mongodb_atlas_api_private_key):
        """Sets the mongodb_atlas_api_private_key of this TargetTypeDetailsInput.


        :param mongodb_atlas_api_private_key: The mongodb_atlas_api_private_key of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._mongodb_atlas_api_private_key = mongodb_atlas_api_private_key

    @property
    def mongodb_atlas_api_public_key(self):
        """Gets the mongodb_atlas_api_public_key of this TargetTypeDetailsInput.  # noqa: E501


        :return: The mongodb_atlas_api_public_key of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_atlas_api_public_key

    @mongodb_atlas_api_public_key.setter
    def mongodb_atlas_api_public_key(self, mongodb_atlas_api_public_key):
        """Sets the mongodb_atlas_api_public_key of this TargetTypeDetailsInput.


        :param mongodb_atlas_api_public_key: The mongodb_atlas_api_public_key of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._mongodb_atlas_api_public_key = mongodb_atlas_api_public_key

    @property
    def mongodb_atlas_project_id(self):
        """Gets the mongodb_atlas_project_id of this TargetTypeDetailsInput.  # noqa: E501

        mongodb atlas fields  # noqa: E501

        :return: The mongodb_atlas_project_id of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_atlas_project_id

    @mongodb_atlas_project_id.setter
    def mongodb_atlas_project_id(self, mongodb_atlas_project_id):
        """Sets the mongodb_atlas_project_id of this TargetTypeDetailsInput.

        mongodb atlas fields  # noqa: E501

        :param mongodb_atlas_project_id: The mongodb_atlas_project_id of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._mongodb_atlas_project_id = mongodb_atlas_project_id

    @property
    def mongodb_db_name(self):
        """Gets the mongodb_db_name of this TargetTypeDetailsInput.  # noqa: E501

        common fields  # noqa: E501

        :return: The mongodb_db_name of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_db_name

    @mongodb_db_name.setter
    def mongodb_db_name(self, mongodb_db_name):
        """Sets the mongodb_db_name of this TargetTypeDetailsInput.

        common fields  # noqa: E501

        :param mongodb_db_name: The mongodb_db_name of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._mongodb_db_name = mongodb_db_name

    @property
    def mongodb_default_auth_db(self):
        """Gets the mongodb_default_auth_db of this TargetTypeDetailsInput.  # noqa: E501


        :return: The mongodb_default_auth_db of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_default_auth_db

    @mongodb_default_auth_db.setter
    def mongodb_default_auth_db(self, mongodb_default_auth_db):
        """Sets the mongodb_default_auth_db of this TargetTypeDetailsInput.


        :param mongodb_default_auth_db: The mongodb_default_auth_db of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._mongodb_default_auth_db = mongodb_default_auth_db

    @property
    def mongodb_host_port(self):
        """Gets the mongodb_host_port of this TargetTypeDetailsInput.  # noqa: E501


        :return: The mongodb_host_port of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_host_port

    @mongodb_host_port.setter
    def mongodb_host_port(self, mongodb_host_port):
        """Sets the mongodb_host_port of this TargetTypeDetailsInput.


        :param mongodb_host_port: The mongodb_host_port of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._mongodb_host_port = mongodb_host_port

    @property
    def mongodb_is_atlas(self):
        """Gets the mongodb_is_atlas of this TargetTypeDetailsInput.  # noqa: E501


        :return: The mongodb_is_atlas of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: bool
        """
        return self._mongodb_is_atlas

    @mongodb_is_atlas.setter
    def mongodb_is_atlas(self, mongodb_is_atlas):
        """Sets the mongodb_is_atlas of this TargetTypeDetailsInput.


        :param mongodb_is_atlas: The mongodb_is_atlas of this TargetTypeDetailsInput.  # noqa: E501
        :type: bool
        """

        self._mongodb_is_atlas = mongodb_is_atlas

    @property
    def mongodb_password(self):
        """Gets the mongodb_password of this TargetTypeDetailsInput.  # noqa: E501


        :return: The mongodb_password of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_password

    @mongodb_password.setter
    def mongodb_password(self, mongodb_password):
        """Sets the mongodb_password of this TargetTypeDetailsInput.


        :param mongodb_password: The mongodb_password of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._mongodb_password = mongodb_password

    @property
    def mongodb_uri_connection(self):
        """Gets the mongodb_uri_connection of this TargetTypeDetailsInput.  # noqa: E501

        mongodb fields  # noqa: E501

        :return: The mongodb_uri_connection of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_uri_connection

    @mongodb_uri_connection.setter
    def mongodb_uri_connection(self, mongodb_uri_connection):
        """Sets the mongodb_uri_connection of this TargetTypeDetailsInput.

        mongodb fields  # noqa: E501

        :param mongodb_uri_connection: The mongodb_uri_connection of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._mongodb_uri_connection = mongodb_uri_connection

    @property
    def mongodb_uri_options(self):
        """Gets the mongodb_uri_options of this TargetTypeDetailsInput.  # noqa: E501


        :return: The mongodb_uri_options of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_uri_options

    @mongodb_uri_options.setter
    def mongodb_uri_options(self, mongodb_uri_options):
        """Sets the mongodb_uri_options of this TargetTypeDetailsInput.


        :param mongodb_uri_options: The mongodb_uri_options of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._mongodb_uri_options = mongodb_uri_options

    @property
    def mongodb_username(self):
        """Gets the mongodb_username of this TargetTypeDetailsInput.  # noqa: E501


        :return: The mongodb_username of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._mongodb_username

    @mongodb_username.setter
    def mongodb_username(self, mongodb_username):
        """Sets the mongodb_username of this TargetTypeDetailsInput.


        :param mongodb_username: The mongodb_username of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._mongodb_username = mongodb_username

    @property
    def password(self):
        """Gets the password of this TargetTypeDetailsInput.  # noqa: E501


        :return: The password of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TargetTypeDetailsInput.


        :param password: The password of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def payload(self):
        """Gets the payload of this TargetTypeDetailsInput.  # noqa: E501


        :return: The payload of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this TargetTypeDetailsInput.


        :param payload: The payload of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def port(self):
        """Gets the port of this TargetTypeDetailsInput.  # noqa: E501


        :return: The port of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this TargetTypeDetailsInput.


        :param port: The port of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._port = port

    @property
    def private_key(self):
        """Gets the private_key of this TargetTypeDetailsInput.  # noqa: E501


        :return: The private_key of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this TargetTypeDetailsInput.


        :param private_key: The private_key of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def private_key_password(self):
        """Gets the private_key_password of this TargetTypeDetailsInput.  # noqa: E501


        :return: The private_key_password of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._private_key_password

    @private_key_password.setter
    def private_key_password(self, private_key_password):
        """Sets the private_key_password of this TargetTypeDetailsInput.


        :param private_key_password: The private_key_password of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._private_key_password = private_key_password

    @property
    def rabbitmq_server_password(self):
        """Gets the rabbitmq_server_password of this TargetTypeDetailsInput.  # noqa: E501


        :return: The rabbitmq_server_password of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._rabbitmq_server_password

    @rabbitmq_server_password.setter
    def rabbitmq_server_password(self, rabbitmq_server_password):
        """Sets the rabbitmq_server_password of this TargetTypeDetailsInput.


        :param rabbitmq_server_password: The rabbitmq_server_password of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._rabbitmq_server_password = rabbitmq_server_password

    @property
    def rabbitmq_server_uri(self):
        """Gets the rabbitmq_server_uri of this TargetTypeDetailsInput.  # noqa: E501


        :return: The rabbitmq_server_uri of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._rabbitmq_server_uri

    @rabbitmq_server_uri.setter
    def rabbitmq_server_uri(self, rabbitmq_server_uri):
        """Sets the rabbitmq_server_uri of this TargetTypeDetailsInput.


        :param rabbitmq_server_uri: The rabbitmq_server_uri of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._rabbitmq_server_uri = rabbitmq_server_uri

    @property
    def rabbitmq_server_user(self):
        """Gets the rabbitmq_server_user of this TargetTypeDetailsInput.  # noqa: E501


        :return: The rabbitmq_server_user of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._rabbitmq_server_user

    @rabbitmq_server_user.setter
    def rabbitmq_server_user(self, rabbitmq_server_user):
        """Sets the rabbitmq_server_user of this TargetTypeDetailsInput.


        :param rabbitmq_server_user: The rabbitmq_server_user of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._rabbitmq_server_user = rabbitmq_server_user

    @property
    def security_token(self):
        """Gets the security_token of this TargetTypeDetailsInput.  # noqa: E501


        :return: The security_token of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._security_token

    @security_token.setter
    def security_token(self, security_token):
        """Sets the security_token of this TargetTypeDetailsInput.


        :param security_token: The security_token of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._security_token = security_token

    @property
    def sf_account(self):
        """Gets the sf_account of this TargetTypeDetailsInput.  # noqa: E501


        :return: The sf_account of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._sf_account

    @sf_account.setter
    def sf_account(self, sf_account):
        """Sets the sf_account of this TargetTypeDetailsInput.


        :param sf_account: The sf_account of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._sf_account = sf_account

    @property
    def ssl_connection_certificate(self):
        """Gets the ssl_connection_certificate of this TargetTypeDetailsInput.  # noqa: E501

        (Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field  # noqa: E501

        :return: The ssl_connection_certificate of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._ssl_connection_certificate

    @ssl_connection_certificate.setter
    def ssl_connection_certificate(self, ssl_connection_certificate):
        """Sets the ssl_connection_certificate of this TargetTypeDetailsInput.

        (Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field  # noqa: E501

        :param ssl_connection_certificate: The ssl_connection_certificate of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._ssl_connection_certificate = ssl_connection_certificate

    @property
    def ssl_connection_mode(self):
        """Gets the ssl_connection_mode of this TargetTypeDetailsInput.  # noqa: E501

        (Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB  # noqa: E501

        :return: The ssl_connection_mode of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_connection_mode

    @ssl_connection_mode.setter
    def ssl_connection_mode(self, ssl_connection_mode):
        """Sets the ssl_connection_mode of this TargetTypeDetailsInput.

        (Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB  # noqa: E501

        :param ssl_connection_mode: The ssl_connection_mode of this TargetTypeDetailsInput.  # noqa: E501
        :type: bool
        """

        self._ssl_connection_mode = ssl_connection_mode

    @property
    def tenant_url(self):
        """Gets the tenant_url of this TargetTypeDetailsInput.  # noqa: E501


        :return: The tenant_url of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._tenant_url

    @tenant_url.setter
    def tenant_url(self, tenant_url):
        """Sets the tenant_url of this TargetTypeDetailsInput.


        :param tenant_url: The tenant_url of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._tenant_url = tenant_url

    @property
    def url(self):
        """Gets the url of this TargetTypeDetailsInput.  # noqa: E501


        :return: The url of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TargetTypeDetailsInput.


        :param url: The url of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def use_gw_cloud_identity(self):
        """Gets the use_gw_cloud_identity of this TargetTypeDetailsInput.  # noqa: E501


        :return: The use_gw_cloud_identity of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: bool
        """
        return self._use_gw_cloud_identity

    @use_gw_cloud_identity.setter
    def use_gw_cloud_identity(self, use_gw_cloud_identity):
        """Sets the use_gw_cloud_identity of this TargetTypeDetailsInput.


        :param use_gw_cloud_identity: The use_gw_cloud_identity of this TargetTypeDetailsInput.  # noqa: E501
        :type: bool
        """

        self._use_gw_cloud_identity = use_gw_cloud_identity

    @property
    def user_name(self):
        """Gets the user_name of this TargetTypeDetailsInput.  # noqa: E501


        :return: The user_name of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this TargetTypeDetailsInput.


        :param user_name: The user_name of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def username(self):
        """Gets the username of this TargetTypeDetailsInput.  # noqa: E501


        :return: The username of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TargetTypeDetailsInput.


        :param username: The username of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def venafi_api_key(self):
        """Gets the venafi_api_key of this TargetTypeDetailsInput.  # noqa: E501


        :return: The venafi_api_key of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._venafi_api_key

    @venafi_api_key.setter
    def venafi_api_key(self, venafi_api_key):
        """Sets the venafi_api_key of this TargetTypeDetailsInput.


        :param venafi_api_key: The venafi_api_key of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._venafi_api_key = venafi_api_key

    @property
    def venafi_base_url(self):
        """Gets the venafi_base_url of this TargetTypeDetailsInput.  # noqa: E501


        :return: The venafi_base_url of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._venafi_base_url

    @venafi_base_url.setter
    def venafi_base_url(self, venafi_base_url):
        """Sets the venafi_base_url of this TargetTypeDetailsInput.


        :param venafi_base_url: The venafi_base_url of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._venafi_base_url = venafi_base_url

    @property
    def venafi_tpp_password(self):
        """Gets the venafi_tpp_password of this TargetTypeDetailsInput.  # noqa: E501


        :return: The venafi_tpp_password of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._venafi_tpp_password

    @venafi_tpp_password.setter
    def venafi_tpp_password(self, venafi_tpp_password):
        """Sets the venafi_tpp_password of this TargetTypeDetailsInput.


        :param venafi_tpp_password: The venafi_tpp_password of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._venafi_tpp_password = venafi_tpp_password

    @property
    def venafi_tpp_username(self):
        """Gets the venafi_tpp_username of this TargetTypeDetailsInput.  # noqa: E501


        :return: The venafi_tpp_username of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._venafi_tpp_username

    @venafi_tpp_username.setter
    def venafi_tpp_username(self, venafi_tpp_username):
        """Sets the venafi_tpp_username of this TargetTypeDetailsInput.


        :param venafi_tpp_username: The venafi_tpp_username of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._venafi_tpp_username = venafi_tpp_username

    @property
    def venafi_use_tpp(self):
        """Gets the venafi_use_tpp of this TargetTypeDetailsInput.  # noqa: E501


        :return: The venafi_use_tpp of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: bool
        """
        return self._venafi_use_tpp

    @venafi_use_tpp.setter
    def venafi_use_tpp(self, venafi_use_tpp):
        """Sets the venafi_use_tpp of this TargetTypeDetailsInput.


        :param venafi_use_tpp: The venafi_use_tpp of this TargetTypeDetailsInput.  # noqa: E501
        :type: bool
        """

        self._venafi_use_tpp = venafi_use_tpp

    @property
    def venafi_zone(self):
        """Gets the venafi_zone of this TargetTypeDetailsInput.  # noqa: E501


        :return: The venafi_zone of this TargetTypeDetailsInput.  # noqa: E501
        :rtype: str
        """
        return self._venafi_zone

    @venafi_zone.setter
    def venafi_zone(self, venafi_zone):
        """Sets the venafi_zone of this TargetTypeDetailsInput.


        :param venafi_zone: The venafi_zone of this TargetTypeDetailsInput.  # noqa: E501
        :type: str
        """

        self._venafi_zone = venafi_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetTypeDetailsInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TargetTypeDetailsInput):
            return True

        return self.to_dict() != other.to_dict()
