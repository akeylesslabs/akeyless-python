# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class AzureStorage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth_type': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'storage_account': 'str',
        'storage_container_name': 'str',
        'tenant_id': 'str'
    }

    attribute_map = {
        'auth_type': 'auth_type',
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'storage_account': 'storage_account',
        'storage_container_name': 'storage_container_name',
        'tenant_id': 'tenant_id'
    }

    def __init__(self, auth_type=None, client_id=None, client_secret=None, storage_account=None, storage_container_name=None, tenant_id=None, local_vars_configuration=None):  # noqa: E501
        """AzureStorage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auth_type = None
        self._client_id = None
        self._client_secret = None
        self._storage_account = None
        self._storage_container_name = None
        self._tenant_id = None
        self.discriminator = None

        if auth_type is not None:
            self.auth_type = auth_type
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if storage_account is not None:
            self.storage_account = storage_account
        if storage_container_name is not None:
            self.storage_container_name = storage_container_name
        if tenant_id is not None:
            self.tenant_id = tenant_id

    @property
    def auth_type(self):
        """Gets the auth_type of this AzureStorage.  # noqa: E501


        :return: The auth_type of this AzureStorage.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this AzureStorage.


        :param auth_type: The auth_type of this AzureStorage.  # noqa: E501
        :type: str
        """

        self._auth_type = auth_type

    @property
    def client_id(self):
        """Gets the client_id of this AzureStorage.  # noqa: E501


        :return: The client_id of this AzureStorage.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AzureStorage.


        :param client_id: The client_id of this AzureStorage.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this AzureStorage.  # noqa: E501


        :return: The client_secret of this AzureStorage.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this AzureStorage.


        :param client_secret: The client_secret of this AzureStorage.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def storage_account(self):
        """Gets the storage_account of this AzureStorage.  # noqa: E501


        :return: The storage_account of this AzureStorage.  # noqa: E501
        :rtype: str
        """
        return self._storage_account

    @storage_account.setter
    def storage_account(self, storage_account):
        """Sets the storage_account of this AzureStorage.


        :param storage_account: The storage_account of this AzureStorage.  # noqa: E501
        :type: str
        """

        self._storage_account = storage_account

    @property
    def storage_container_name(self):
        """Gets the storage_container_name of this AzureStorage.  # noqa: E501


        :return: The storage_container_name of this AzureStorage.  # noqa: E501
        :rtype: str
        """
        return self._storage_container_name

    @storage_container_name.setter
    def storage_container_name(self, storage_container_name):
        """Sets the storage_container_name of this AzureStorage.


        :param storage_container_name: The storage_container_name of this AzureStorage.  # noqa: E501
        :type: str
        """

        self._storage_container_name = storage_container_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this AzureStorage.  # noqa: E501

        creds  # noqa: E501

        :return: The tenant_id of this AzureStorage.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this AzureStorage.

        creds  # noqa: E501

        :param tenant_id: The tenant_id of this AzureStorage.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AzureStorage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AzureStorage):
            return True

        return self.to_dict() != other.to_dict()
