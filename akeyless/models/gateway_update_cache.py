# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayUpdateCache(BaseModel):
    """
    gatewayUpdateCache is a command that updates cache settings
    """ # noqa: E501
    backup_interval: Optional[StrictStr] = Field(default='1', description="Secure backup interval in minutes. To ensure service continuity in case of power cycle and network outage secrets will be backed up periodically per backup interval", alias="backup-interval")
    enable_cache: Optional[StrictStr] = Field(default=None, description="Enable cache [true/false]", alias="enable-cache")
    enable_proactive: Optional[StrictStr] = Field(default=None, description="Enable proactive caching [true/false]", alias="enable-proactive")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    minimum_fetch_interval: Optional[StrictStr] = Field(default='5', description="When using Cache or/and Proactive Cache, additional secrets will be fetched upon requesting a secret, based on the requestor's access policy. Define minimum fetching interval to avoid over fetching in a given time frame", alias="minimum-fetch-interval")
    stale_timeout: Optional[StrictStr] = Field(default='60', description="Stale timeout in minutes, cache entries which are not accessed within timeout will be removed from cache", alias="stale-timeout")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["backup-interval", "enable-cache", "enable-proactive", "json", "minimum-fetch-interval", "stale-timeout", "token", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayUpdateCache from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayUpdateCache from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "backup-interval": obj.get("backup-interval") if obj.get("backup-interval") is not None else '1',
            "enable-cache": obj.get("enable-cache"),
            "enable-proactive": obj.get("enable-proactive"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "minimum-fetch-interval": obj.get("minimum-fetch-interval") if obj.get("minimum-fetch-interval") is not None else '5',
            "stale-timeout": obj.get("stale-timeout") if obj.get("stale-timeout") is not None else '60',
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


