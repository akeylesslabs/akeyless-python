# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class ServerInventoryPayload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto_rotate': 'bool',
        'auto_rotate_interval_in_days': 'int',
        'auto_rotate_rotation_hour': 'int',
        'enable_rdp_sra': 'bool',
        'migration_target_id': 'int',
        'server_targets_path_template': 'str',
        'users_ignore_list': 'dict(str, bool)',
        'users_rotated_secrets_path_template': 'str'
    }

    attribute_map = {
        'auto_rotate': 'auto_rotate',
        'auto_rotate_interval_in_days': 'auto_rotate_interval_in_days',
        'auto_rotate_rotation_hour': 'auto_rotate_rotation_hour',
        'enable_rdp_sra': 'enable_rdp_sra',
        'migration_target_id': 'migration_target_id',
        'server_targets_path_template': 'server_targets_path_template',
        'users_ignore_list': 'users_ignore_list',
        'users_rotated_secrets_path_template': 'users_rotated_secrets_path_template'
    }

    def __init__(self, auto_rotate=None, auto_rotate_interval_in_days=None, auto_rotate_rotation_hour=None, enable_rdp_sra=None, migration_target_id=None, server_targets_path_template=None, users_ignore_list=None, users_rotated_secrets_path_template=None, local_vars_configuration=None):  # noqa: E501
        """ServerInventoryPayload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auto_rotate = None
        self._auto_rotate_interval_in_days = None
        self._auto_rotate_rotation_hour = None
        self._enable_rdp_sra = None
        self._migration_target_id = None
        self._server_targets_path_template = None
        self._users_ignore_list = None
        self._users_rotated_secrets_path_template = None
        self.discriminator = None

        if auto_rotate is not None:
            self.auto_rotate = auto_rotate
        if auto_rotate_interval_in_days is not None:
            self.auto_rotate_interval_in_days = auto_rotate_interval_in_days
        if auto_rotate_rotation_hour is not None:
            self.auto_rotate_rotation_hour = auto_rotate_rotation_hour
        if enable_rdp_sra is not None:
            self.enable_rdp_sra = enable_rdp_sra
        if migration_target_id is not None:
            self.migration_target_id = migration_target_id
        if server_targets_path_template is not None:
            self.server_targets_path_template = server_targets_path_template
        if users_ignore_list is not None:
            self.users_ignore_list = users_ignore_list
        if users_rotated_secrets_path_template is not None:
            self.users_rotated_secrets_path_template = users_rotated_secrets_path_template

    @property
    def auto_rotate(self):
        """Gets the auto_rotate of this ServerInventoryPayload.  # noqa: E501


        :return: The auto_rotate of this ServerInventoryPayload.  # noqa: E501
        :rtype: bool
        """
        return self._auto_rotate

    @auto_rotate.setter
    def auto_rotate(self, auto_rotate):
        """Sets the auto_rotate of this ServerInventoryPayload.


        :param auto_rotate: The auto_rotate of this ServerInventoryPayload.  # noqa: E501
        :type: bool
        """

        self._auto_rotate = auto_rotate

    @property
    def auto_rotate_interval_in_days(self):
        """Gets the auto_rotate_interval_in_days of this ServerInventoryPayload.  # noqa: E501


        :return: The auto_rotate_interval_in_days of this ServerInventoryPayload.  # noqa: E501
        :rtype: int
        """
        return self._auto_rotate_interval_in_days

    @auto_rotate_interval_in_days.setter
    def auto_rotate_interval_in_days(self, auto_rotate_interval_in_days):
        """Sets the auto_rotate_interval_in_days of this ServerInventoryPayload.


        :param auto_rotate_interval_in_days: The auto_rotate_interval_in_days of this ServerInventoryPayload.  # noqa: E501
        :type: int
        """

        self._auto_rotate_interval_in_days = auto_rotate_interval_in_days

    @property
    def auto_rotate_rotation_hour(self):
        """Gets the auto_rotate_rotation_hour of this ServerInventoryPayload.  # noqa: E501


        :return: The auto_rotate_rotation_hour of this ServerInventoryPayload.  # noqa: E501
        :rtype: int
        """
        return self._auto_rotate_rotation_hour

    @auto_rotate_rotation_hour.setter
    def auto_rotate_rotation_hour(self, auto_rotate_rotation_hour):
        """Sets the auto_rotate_rotation_hour of this ServerInventoryPayload.


        :param auto_rotate_rotation_hour: The auto_rotate_rotation_hour of this ServerInventoryPayload.  # noqa: E501
        :type: int
        """

        self._auto_rotate_rotation_hour = auto_rotate_rotation_hour

    @property
    def enable_rdp_sra(self):
        """Gets the enable_rdp_sra of this ServerInventoryPayload.  # noqa: E501


        :return: The enable_rdp_sra of this ServerInventoryPayload.  # noqa: E501
        :rtype: bool
        """
        return self._enable_rdp_sra

    @enable_rdp_sra.setter
    def enable_rdp_sra(self, enable_rdp_sra):
        """Sets the enable_rdp_sra of this ServerInventoryPayload.


        :param enable_rdp_sra: The enable_rdp_sra of this ServerInventoryPayload.  # noqa: E501
        :type: bool
        """

        self._enable_rdp_sra = enable_rdp_sra

    @property
    def migration_target_id(self):
        """Gets the migration_target_id of this ServerInventoryPayload.  # noqa: E501


        :return: The migration_target_id of this ServerInventoryPayload.  # noqa: E501
        :rtype: int
        """
        return self._migration_target_id

    @migration_target_id.setter
    def migration_target_id(self, migration_target_id):
        """Sets the migration_target_id of this ServerInventoryPayload.


        :param migration_target_id: The migration_target_id of this ServerInventoryPayload.  # noqa: E501
        :type: int
        """

        self._migration_target_id = migration_target_id

    @property
    def server_targets_path_template(self):
        """Gets the server_targets_path_template of this ServerInventoryPayload.  # noqa: E501


        :return: The server_targets_path_template of this ServerInventoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._server_targets_path_template

    @server_targets_path_template.setter
    def server_targets_path_template(self, server_targets_path_template):
        """Sets the server_targets_path_template of this ServerInventoryPayload.


        :param server_targets_path_template: The server_targets_path_template of this ServerInventoryPayload.  # noqa: E501
        :type: str
        """

        self._server_targets_path_template = server_targets_path_template

    @property
    def users_ignore_list(self):
        """Gets the users_ignore_list of this ServerInventoryPayload.  # noqa: E501


        :return: The users_ignore_list of this ServerInventoryPayload.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._users_ignore_list

    @users_ignore_list.setter
    def users_ignore_list(self, users_ignore_list):
        """Sets the users_ignore_list of this ServerInventoryPayload.


        :param users_ignore_list: The users_ignore_list of this ServerInventoryPayload.  # noqa: E501
        :type: dict(str, bool)
        """

        self._users_ignore_list = users_ignore_list

    @property
    def users_rotated_secrets_path_template(self):
        """Gets the users_rotated_secrets_path_template of this ServerInventoryPayload.  # noqa: E501


        :return: The users_rotated_secrets_path_template of this ServerInventoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._users_rotated_secrets_path_template

    @users_rotated_secrets_path_template.setter
    def users_rotated_secrets_path_template(self, users_rotated_secrets_path_template):
        """Sets the users_rotated_secrets_path_template of this ServerInventoryPayload.


        :param users_rotated_secrets_path_template: The users_rotated_secrets_path_template of this ServerInventoryPayload.  # noqa: E501
        :type: str
        """

        self._users_rotated_secrets_path_template = users_rotated_secrets_path_template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerInventoryPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ServerInventoryPayload):
            return True

        return self.to_dict() != other.to_dict()
