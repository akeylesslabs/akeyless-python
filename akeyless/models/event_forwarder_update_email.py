# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventForwarderUpdateEmail(BaseModel):
    """
    eventForwarderUpdateEmail is a command that updates email event forwarder
    """ # noqa: E501
    auth_methods_event_source_locations: Optional[List[StrictStr]] = Field(default=None, description="Auth Method Event sources", alias="auth-methods-event-source-locations")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    email_to: Optional[StrictStr] = Field(default=None, description="A comma seperated list of email addresses to send event to", alias="email-to")
    enable: Optional[StrictStr] = Field(default='true', description="Enable/Disable Event Forwarder [true/false]")
    event_types: Optional[List[StrictStr]] = Field(default=None, description="List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, certificate-provisioning-success, certificate-provisioning-failure, auth-method-pending-expiration, auth-method-expired, next-automatic-rotation, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure, apply-justification, email-auth-method-approved, usage, rotation-usage, gateway-inactive, static-secret-updated, rate-limiting, usage-report, secret-sync]", alias="event-types")
    gateways_event_source_locations: List[StrictStr] = Field(description="Event sources", alias="gateways-event-source-locations")
    include_error: Optional[StrictStr] = Field(default=None, description="Set this option to include event errors details [true/false]", alias="include-error")
    items_event_source_locations: Optional[List[StrictStr]] = Field(default=None, description="Items Event sources", alias="items-event-source-locations")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    keep_prev_version: Optional[StrictStr] = Field(default=None, description="Whether to keep previous version [true/false]. If not set, use default according to account settings", alias="keep-prev-version")
    key: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)")
    name: StrictStr = Field(description="EventForwarder name")
    new_name: Optional[StrictStr] = Field(default=None, description="New EventForwarder name", alias="new-name")
    override_url: Optional[StrictStr] = Field(default=None, description="Override Akeyless default URL with your Gateway url (port 18888)", alias="override-url")
    targets_event_source_locations: Optional[List[StrictStr]] = Field(default=None, description="Targets Event sources", alias="targets-event-source-locations")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["auth-methods-event-source-locations", "description", "email-to", "enable", "event-types", "gateways-event-source-locations", "include-error", "items-event-source-locations", "json", "keep-prev-version", "key", "name", "new-name", "override-url", "targets-event-source-locations", "token", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventForwarderUpdateEmail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventForwarderUpdateEmail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth-methods-event-source-locations": obj.get("auth-methods-event-source-locations"),
            "description": obj.get("description"),
            "email-to": obj.get("email-to"),
            "enable": obj.get("enable") if obj.get("enable") is not None else 'true',
            "event-types": obj.get("event-types"),
            "gateways-event-source-locations": obj.get("gateways-event-source-locations"),
            "include-error": obj.get("include-error"),
            "items-event-source-locations": obj.get("items-event-source-locations"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "keep-prev-version": obj.get("keep-prev-version"),
            "key": obj.get("key"),
            "name": obj.get("name"),
            "new-name": obj.get("new-name"),
            "override-url": obj.get("override-url"),
            "targets-event-source-locations": obj.get("targets-event-source-locations"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


