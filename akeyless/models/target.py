# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.item_version import ItemVersion
from akeyless.models.target_item_association import TargetItemAssociation
from typing import Optional, Set
from typing_extensions import Self

class Target(BaseModel):
    """
    Target
    """ # noqa: E501
    access_date: Optional[datetime] = None
    access_date_display: Optional[StrictStr] = None
    access_request_status: Optional[StrictStr] = None
    attributes: Optional[Dict[str, Any]] = Field(default=None, description="this is not \"omitempty\" since an empty value causes no update while an empty map will clear the attributes")
    client_permissions: Optional[List[StrictStr]] = None
    comment: Optional[StrictStr] = None
    creation_date: Optional[datetime] = None
    credentials_less: Optional[StrictBool] = None
    is_access_request_enabled: Optional[StrictBool] = None
    last_version: Optional[StrictInt] = None
    modification_date: Optional[datetime] = None
    protection_key_name: Optional[StrictStr] = None
    target_details: Optional[StrictStr] = None
    target_id: Optional[StrictInt] = None
    target_items_assoc: Optional[List[TargetItemAssociation]] = None
    target_name: Optional[StrictStr] = None
    target_sub_type: Optional[StrictStr] = None
    target_type: Optional[StrictStr] = None
    target_versions: Optional[List[ItemVersion]] = None
    with_customer_fragment: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["access_date", "access_date_display", "access_request_status", "attributes", "client_permissions", "comment", "creation_date", "credentials_less", "is_access_request_enabled", "last_version", "modification_date", "protection_key_name", "target_details", "target_id", "target_items_assoc", "target_name", "target_sub_type", "target_type", "target_versions", "with_customer_fragment"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Target from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in target_items_assoc (list)
        _items = []
        if self.target_items_assoc:
            for _item_target_items_assoc in self.target_items_assoc:
                if _item_target_items_assoc:
                    _items.append(_item_target_items_assoc.to_dict())
            _dict['target_items_assoc'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in target_versions (list)
        _items = []
        if self.target_versions:
            for _item_target_versions in self.target_versions:
                if _item_target_versions:
                    _items.append(_item_target_versions.to_dict())
            _dict['target_versions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Target from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_date": obj.get("access_date"),
            "access_date_display": obj.get("access_date_display"),
            "access_request_status": obj.get("access_request_status"),
            "attributes": obj.get("attributes"),
            "client_permissions": obj.get("client_permissions"),
            "comment": obj.get("comment"),
            "creation_date": obj.get("creation_date"),
            "credentials_less": obj.get("credentials_less"),
            "is_access_request_enabled": obj.get("is_access_request_enabled"),
            "last_version": obj.get("last_version"),
            "modification_date": obj.get("modification_date"),
            "protection_key_name": obj.get("protection_key_name"),
            "target_details": obj.get("target_details"),
            "target_id": obj.get("target_id"),
            "target_items_assoc": [TargetItemAssociation.from_dict(_item) for _item in obj["target_items_assoc"]] if obj.get("target_items_assoc") is not None else None,
            "target_name": obj.get("target_name"),
            "target_sub_type": obj.get("target_sub_type"),
            "target_type": obj.get("target_type"),
            "target_versions": [ItemVersion.from_dict(_item) for _item in obj["target_versions"]] if obj.get("target_versions") is not None else None,
            "with_customer_fragment": obj.get("with_customer_fragment")
        })
        return _obj


