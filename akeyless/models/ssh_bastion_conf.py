# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class SshBastionConf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'hide_session_recording': 'bool',
        'kexalgs': 'str',
        'log_forwarding': 'LogForwardingConfigPart',
        'session_termination': 'SshBastionSessionTermination'
    }

    attribute_map = {
        'hide_session_recording': 'hide_session_recording',
        'kexalgs': 'kexalgs',
        'log_forwarding': 'log_forwarding',
        'session_termination': 'session_termination'
    }

    def __init__(self, hide_session_recording=None, kexalgs=None, log_forwarding=None, session_termination=None, local_vars_configuration=None):  # noqa: E501
        """SshBastionConf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._hide_session_recording = None
        self._kexalgs = None
        self._log_forwarding = None
        self._session_termination = None
        self.discriminator = None

        if hide_session_recording is not None:
            self.hide_session_recording = hide_session_recording
        if kexalgs is not None:
            self.kexalgs = kexalgs
        if log_forwarding is not None:
            self.log_forwarding = log_forwarding
        if session_termination is not None:
            self.session_termination = session_termination

    @property
    def hide_session_recording(self):
        """Gets the hide_session_recording of this SshBastionConf.  # noqa: E501


        :return: The hide_session_recording of this SshBastionConf.  # noqa: E501
        :rtype: bool
        """
        return self._hide_session_recording

    @hide_session_recording.setter
    def hide_session_recording(self, hide_session_recording):
        """Sets the hide_session_recording of this SshBastionConf.


        :param hide_session_recording: The hide_session_recording of this SshBastionConf.  # noqa: E501
        :type: bool
        """

        self._hide_session_recording = hide_session_recording

    @property
    def kexalgs(self):
        """Gets the kexalgs of this SshBastionConf.  # noqa: E501


        :return: The kexalgs of this SshBastionConf.  # noqa: E501
        :rtype: str
        """
        return self._kexalgs

    @kexalgs.setter
    def kexalgs(self, kexalgs):
        """Sets the kexalgs of this SshBastionConf.


        :param kexalgs: The kexalgs of this SshBastionConf.  # noqa: E501
        :type: str
        """

        self._kexalgs = kexalgs

    @property
    def log_forwarding(self):
        """Gets the log_forwarding of this SshBastionConf.  # noqa: E501


        :return: The log_forwarding of this SshBastionConf.  # noqa: E501
        :rtype: LogForwardingConfigPart
        """
        return self._log_forwarding

    @log_forwarding.setter
    def log_forwarding(self, log_forwarding):
        """Sets the log_forwarding of this SshBastionConf.


        :param log_forwarding: The log_forwarding of this SshBastionConf.  # noqa: E501
        :type: LogForwardingConfigPart
        """

        self._log_forwarding = log_forwarding

    @property
    def session_termination(self):
        """Gets the session_termination of this SshBastionConf.  # noqa: E501


        :return: The session_termination of this SshBastionConf.  # noqa: E501
        :rtype: SshBastionSessionTermination
        """
        return self._session_termination

    @session_termination.setter
    def session_termination(self, session_termination):
        """Sets the session_termination of this SshBastionConf.


        :param session_termination: The session_termination of this SshBastionConf.  # noqa: E501
        :type: SshBastionSessionTermination
        """

        self._session_termination = session_termination

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SshBastionConf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SshBastionConf):
            return True

        return self.to_dict() != other.to_dict()
