# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RotatedSecretCreateGcp(BaseModel):
    """
    RotatedSecretCreateGcp
    """ # noqa: E501
    authentication_credentials: Optional[StrictStr] = Field(default='use-user-creds', description="The credentials to connect with use-user-creds/use-target-creds", alias="authentication-credentials")
    auto_rotate: Optional[StrictStr] = Field(default=None, description="Whether to automatically rotate every --rotation-interval days, or disable existing automatic rotation [true/false]", alias="auto-rotate")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    gcp_key: Optional[StrictStr] = Field(default=None, description="Base64-encoded service account private key text", alias="gcp-key")
    gcp_service_account_email: Optional[StrictStr] = Field(default=None, description="The email of the gcp service account to rotate", alias="gcp-service-account-email")
    gcp_service_account_key_id: Optional[StrictStr] = Field(default=None, description="The key id of the gcp service account to rotate", alias="gcp-service-account-key-id")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    key: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)")
    max_versions: Optional[StrictStr] = Field(default=None, description="Set the maximum number of versions, limited by the account settings defaults.", alias="max-versions")
    name: StrictStr = Field(description="Rotated secret name")
    password_length: Optional[StrictStr] = Field(default=None, description="The length of the password to be generated", alias="password-length")
    rotation_event_in: Optional[List[StrictStr]] = Field(default=None, description="How many days before the rotation of the item would you like to be notified", alias="rotation-event-in")
    rotation_hour: Optional[StrictInt] = Field(default=None, description="The Hour of the rotation in UTC", alias="rotation-hour")
    rotation_interval: Optional[StrictStr] = Field(default=None, description="The number of days to wait between every automatic key rotation (1-365)", alias="rotation-interval")
    rotator_type: StrictStr = Field(description="The rotator type. options: [target/service-account-rotator]", alias="rotator-type")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Add tags attached to this object")
    target_name: StrictStr = Field(description="Target name", alias="target-name")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["authentication-credentials", "auto-rotate", "delete_protection", "description", "gcp-key", "gcp-service-account-email", "gcp-service-account-key-id", "json", "key", "max-versions", "name", "password-length", "rotation-event-in", "rotation-hour", "rotation-interval", "rotator-type", "tags", "target-name", "token", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RotatedSecretCreateGcp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RotatedSecretCreateGcp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "authentication-credentials": obj.get("authentication-credentials") if obj.get("authentication-credentials") is not None else 'use-user-creds',
            "auto-rotate": obj.get("auto-rotate"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "gcp-key": obj.get("gcp-key"),
            "gcp-service-account-email": obj.get("gcp-service-account-email"),
            "gcp-service-account-key-id": obj.get("gcp-service-account-key-id"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "key": obj.get("key"),
            "max-versions": obj.get("max-versions"),
            "name": obj.get("name"),
            "password-length": obj.get("password-length"),
            "rotation-event-in": obj.get("rotation-event-in"),
            "rotation-hour": obj.get("rotation-hour"),
            "rotation-interval": obj.get("rotation-interval"),
            "rotator-type": obj.get("rotator-type"),
            "tags": obj.get("tags"),
            "target-name": obj.get("target-name"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


