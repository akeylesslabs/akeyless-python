# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CertAccessRules(BaseModel):
    """
    CertAccessRules
    """ # noqa: E501
    allowed_cors: Optional[List[StrictStr]] = Field(default=None, description="a list of allowed cors domains if used for browser authentication")
    bound_common_names: Optional[List[StrictStr]] = Field(default=None, description="A list of names. At least one must exist in the Common Name. Supports globbing.")
    bound_dns_sans: Optional[List[StrictStr]] = Field(default=None, description="A list of DNS names. At least one must exist in the SANs. Supports globbing.")
    bound_email_sans: Optional[List[StrictStr]] = Field(default=None, description="A list of Email Addresses. At least one must exist in the SANs. Supports globbing.")
    bound_extensions: Optional[List[StrictStr]] = Field(default=None, description="A list of extensions formatted as \"oid:value\". Expects the extension value to be some type of ASN1 encoded string. All values must match. Supports globbing on \"value\".")
    bound_organizational_units: Optional[List[StrictStr]] = Field(default=None, description="A list of Organizational Units names. At least one must exist in the OU field.")
    bound_uri_sans: Optional[List[StrictStr]] = Field(default=None, description="A list of URIs. At least one must exist in the SANs. Supports globbing.")
    certificate: Optional[StrictStr] = Field(default=None, description="Base64 encdoed PEM certificate")
    revoked_cert_ids: Optional[List[StrictStr]] = Field(default=None, description="A list of revoked cert ids")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="A unique identifier to distinguish different users")
    __properties: ClassVar[List[str]] = ["allowed_cors", "bound_common_names", "bound_dns_sans", "bound_email_sans", "bound_extensions", "bound_organizational_units", "bound_uri_sans", "certificate", "revoked_cert_ids", "unique_identifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertAccessRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertAccessRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed_cors": obj.get("allowed_cors"),
            "bound_common_names": obj.get("bound_common_names"),
            "bound_dns_sans": obj.get("bound_dns_sans"),
            "bound_email_sans": obj.get("bound_email_sans"),
            "bound_extensions": obj.get("bound_extensions"),
            "bound_organizational_units": obj.get("bound_organizational_units"),
            "bound_uri_sans": obj.get("bound_uri_sans"),
            "certificate": obj.get("certificate"),
            "revoked_cert_ids": obj.get("revoked_cert_ids"),
            "unique_identifier": obj.get("unique_identifier")
        })
        return _obj


