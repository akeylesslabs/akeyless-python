# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class K8SPayload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ca': 'list[int]',
        'client_cert': 'list[int]',
        'client_key': 'list[int]',
        'namespace': 'str',
        'password': 'str',
        'server': 'str',
        'skip_system': 'bool',
        'token': 'str',
        'username': 'str'
    }

    attribute_map = {
        'ca': 'ca',
        'client_cert': 'client_cert',
        'client_key': 'client_key',
        'namespace': 'namespace',
        'password': 'password',
        'server': 'server',
        'skip_system': 'skip_system',
        'token': 'token',
        'username': 'username'
    }

    def __init__(self, ca=None, client_cert=None, client_key=None, namespace=None, password=None, server=None, skip_system=None, token=None, username=None, local_vars_configuration=None):  # noqa: E501
        """K8SPayload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ca = None
        self._client_cert = None
        self._client_key = None
        self._namespace = None
        self._password = None
        self._server = None
        self._skip_system = None
        self._token = None
        self._username = None
        self.discriminator = None

        if ca is not None:
            self.ca = ca
        if client_cert is not None:
            self.client_cert = client_cert
        if client_key is not None:
            self.client_key = client_key
        if namespace is not None:
            self.namespace = namespace
        if password is not None:
            self.password = password
        if server is not None:
            self.server = server
        if skip_system is not None:
            self.skip_system = skip_system
        if token is not None:
            self.token = token
        if username is not None:
            self.username = username

    @property
    def ca(self):
        """Gets the ca of this K8SPayload.  # noqa: E501


        :return: The ca of this K8SPayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._ca

    @ca.setter
    def ca(self, ca):
        """Sets the ca of this K8SPayload.


        :param ca: The ca of this K8SPayload.  # noqa: E501
        :type: list[int]
        """

        self._ca = ca

    @property
    def client_cert(self):
        """Gets the client_cert of this K8SPayload.  # noqa: E501


        :return: The client_cert of this K8SPayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._client_cert

    @client_cert.setter
    def client_cert(self, client_cert):
        """Sets the client_cert of this K8SPayload.


        :param client_cert: The client_cert of this K8SPayload.  # noqa: E501
        :type: list[int]
        """

        self._client_cert = client_cert

    @property
    def client_key(self):
        """Gets the client_key of this K8SPayload.  # noqa: E501


        :return: The client_key of this K8SPayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this K8SPayload.


        :param client_key: The client_key of this K8SPayload.  # noqa: E501
        :type: list[int]
        """

        self._client_key = client_key

    @property
    def namespace(self):
        """Gets the namespace of this K8SPayload.  # noqa: E501


        :return: The namespace of this K8SPayload.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this K8SPayload.


        :param namespace: The namespace of this K8SPayload.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def password(self):
        """Gets the password of this K8SPayload.  # noqa: E501


        :return: The password of this K8SPayload.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this K8SPayload.


        :param password: The password of this K8SPayload.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def server(self):
        """Gets the server of this K8SPayload.  # noqa: E501


        :return: The server of this K8SPayload.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this K8SPayload.


        :param server: The server of this K8SPayload.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def skip_system(self):
        """Gets the skip_system of this K8SPayload.  # noqa: E501


        :return: The skip_system of this K8SPayload.  # noqa: E501
        :rtype: bool
        """
        return self._skip_system

    @skip_system.setter
    def skip_system(self, skip_system):
        """Sets the skip_system of this K8SPayload.


        :param skip_system: The skip_system of this K8SPayload.  # noqa: E501
        :type: bool
        """

        self._skip_system = skip_system

    @property
    def token(self):
        """Gets the token of this K8SPayload.  # noqa: E501


        :return: The token of this K8SPayload.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this K8SPayload.


        :param token: The token of this K8SPayload.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def username(self):
        """Gets the username of this K8SPayload.  # noqa: E501


        :return: The username of this K8SPayload.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this K8SPayload.


        :param username: The username of this K8SPayload.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, K8SPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, K8SPayload):
            return True

        return self.to_dict() != other.to_dict()
