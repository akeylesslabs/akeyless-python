# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateUSC(BaseModel):
    """
    CreateUSC is a command that creates a Universal Secrets Connector
    """ # noqa: E501
    azure_kv_name: Optional[StrictStr] = Field(default=None, description="Azure Key Vault name (Relevant only for Azure targets)", alias="azure-kv-name")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default=None, description="Description of the Universal Secrets Connector")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    k8s_namespace: Optional[StrictStr] = Field(default=None, description="K8s namespace (Relevant to Kubernetes targets)", alias="k8s-namespace")
    name: StrictStr = Field(description="Universal Secrets Connector name")
    tags: Optional[List[StrictStr]] = Field(default=None, description="List of the tags attached to this Universal Secrets Connector")
    target_to_associate: StrictStr = Field(description="Target Universal Secrets Connector to connect", alias="target-to-associate")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["azure-kv-name", "delete_protection", "description", "json", "k8s-namespace", "name", "tags", "target-to-associate", "token", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateUSC from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateUSC from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "azure-kv-name": obj.get("azure-kv-name"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "k8s-namespace": obj.get("k8s-namespace"),
            "name": obj.get("name"),
            "tags": obj.get("tags"),
            "target-to-associate": obj.get("target-to-associate"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


