# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayCreateProducerOracleDb(BaseModel):
    """
    gatewayCreateProducerOracleDb is a command that creates oracle db producer [Deprecated: Use dynamic-secret-create-oracledb command]
    """ # noqa: E501
    db_server_certificates: Optional[StrictStr] = Field(default=None, description="(Optional) DB server certificates", alias="db-server-certificates")
    db_server_name: Optional[StrictStr] = Field(default=None, description="(Optional) Server name for certificate verification", alias="db-server-name")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    name: StrictStr = Field(description="Dynamic secret name")
    oracle_host: Optional[StrictStr] = Field(default='127.0.0.1', description="Oracle Host", alias="oracle-host")
    oracle_password: Optional[StrictStr] = Field(default=None, description="Oracle Password", alias="oracle-password")
    oracle_port: Optional[StrictStr] = Field(default='1521', description="Oracle Port", alias="oracle-port")
    oracle_revocation_statements: Optional[StrictStr] = Field(default=None, description="Oracle Revocation statements", alias="oracle-revocation-statements")
    oracle_screation_statements: Optional[StrictStr] = Field(default=None, description="Oracle Creation statements", alias="oracle-screation-statements")
    oracle_service_name: Optional[StrictStr] = Field(default=None, description="Oracle DB Name", alias="oracle-service-name")
    oracle_username: Optional[StrictStr] = Field(default=None, description="Oracle Username", alias="oracle-username")
    password_length: Optional[StrictStr] = Field(default=None, description="The length of the password to be generated", alias="password-length")
    producer_encryption_key_name: Optional[StrictStr] = Field(default=None, description="Dynamic producer encryption key", alias="producer-encryption-key-name")
    secure_access_bastion_issuer: Optional[StrictStr] = Field(default=None, description="Deprecated. use secure-access-certificate-issuer", alias="secure-access-bastion-issuer")
    secure_access_certificate_issuer: Optional[StrictStr] = Field(default=None, description="Path to the SSH Certificate Issuer for your Akeyless Secure Access", alias="secure-access-certificate-issuer")
    secure_access_enable: Optional[StrictStr] = Field(default='false', description="Enable/Disable secure remote access [true/false]", alias="secure-access-enable")
    secure_access_host: Optional[List[StrictStr]] = Field(default=None, description="Target DB servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts)", alias="secure-access-host")
    secure_access_web: Optional[StrictBool] = Field(default=False, description="Enable Web Secure Remote Access", alias="secure-access-web")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Add tags attached to this object")
    target_name: Optional[StrictStr] = Field(default=None, description="Target name", alias="target-name")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    user_ttl: Optional[StrictStr] = Field(default='60m', description="User TTL", alias="user-ttl")
    __properties: ClassVar[List[str]] = ["db-server-certificates", "db-server-name", "delete_protection", "json", "name", "oracle-host", "oracle-password", "oracle-port", "oracle-revocation-statements", "oracle-screation-statements", "oracle-service-name", "oracle-username", "password-length", "producer-encryption-key-name", "secure-access-bastion-issuer", "secure-access-certificate-issuer", "secure-access-enable", "secure-access-host", "secure-access-web", "tags", "target-name", "token", "uid-token", "user-ttl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayCreateProducerOracleDb from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayCreateProducerOracleDb from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "db-server-certificates": obj.get("db-server-certificates"),
            "db-server-name": obj.get("db-server-name"),
            "delete_protection": obj.get("delete_protection"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "name": obj.get("name"),
            "oracle-host": obj.get("oracle-host") if obj.get("oracle-host") is not None else '127.0.0.1',
            "oracle-password": obj.get("oracle-password"),
            "oracle-port": obj.get("oracle-port") if obj.get("oracle-port") is not None else '1521',
            "oracle-revocation-statements": obj.get("oracle-revocation-statements"),
            "oracle-screation-statements": obj.get("oracle-screation-statements"),
            "oracle-service-name": obj.get("oracle-service-name"),
            "oracle-username": obj.get("oracle-username"),
            "password-length": obj.get("password-length"),
            "producer-encryption-key-name": obj.get("producer-encryption-key-name"),
            "secure-access-bastion-issuer": obj.get("secure-access-bastion-issuer"),
            "secure-access-certificate-issuer": obj.get("secure-access-certificate-issuer"),
            "secure-access-enable": obj.get("secure-access-enable") if obj.get("secure-access-enable") is not None else 'false',
            "secure-access-host": obj.get("secure-access-host"),
            "secure-access-web": obj.get("secure-access-web") if obj.get("secure-access-web") is not None else False,
            "tags": obj.get("tags"),
            "target-name": obj.get("target-name"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "user-ttl": obj.get("user-ttl") if obj.get("user-ttl") is not None else '60m'
        })
        return _obj


