# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class Producer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'failure_message': 'str',
        'id': 'int',
        'init': 'bool',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'active': 'active',
        'failure_message': 'failure_message',
        'id': 'id',
        'init': 'init',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, active=None, failure_message=None, id=None, init=None, name=None, type=None, local_vars_configuration=None):  # noqa: E501
        """Producer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._failure_message = None
        self._id = None
        self._init = None
        self._name = None
        self._type = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if failure_message is not None:
            self.failure_message = failure_message
        if id is not None:
            self.id = id
        if init is not None:
            self.init = init
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type

    @property
    def active(self):
        """Gets the active of this Producer.  # noqa: E501


        :return: The active of this Producer.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Producer.


        :param active: The active of this Producer.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def failure_message(self):
        """Gets the failure_message of this Producer.  # noqa: E501


        :return: The failure_message of this Producer.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this Producer.


        :param failure_message: The failure_message of this Producer.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def id(self):
        """Gets the id of this Producer.  # noqa: E501


        :return: The id of this Producer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Producer.


        :param id: The id of this Producer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def init(self):
        """Gets the init of this Producer.  # noqa: E501


        :return: The init of this Producer.  # noqa: E501
        :rtype: bool
        """
        return self._init

    @init.setter
    def init(self, init):
        """Sets the init of this Producer.


        :param init: The init of this Producer.  # noqa: E501
        :type: bool
        """

        self._init = init

    @property
    def name(self):
        """Gets the name of this Producer.  # noqa: E501


        :return: The name of this Producer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Producer.


        :param name: The name of this Producer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Producer.  # noqa: E501


        :return: The type of this Producer.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Producer.


        :param type: The type of this Producer.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Producer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Producer):
            return True

        return self.to_dict() != other.to_dict()
