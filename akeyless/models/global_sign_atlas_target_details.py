# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GlobalSignAtlasTargetDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_key': 'str',
        'api_secret': 'str',
        'mtls_cert': 'str',
        'mtls_key': 'str',
        'timeout': 'int'
    }

    attribute_map = {
        'api_key': 'api_key',
        'api_secret': 'api_secret',
        'mtls_cert': 'mtls_cert',
        'mtls_key': 'mtls_key',
        'timeout': 'timeout'
    }

    def __init__(self, api_key=None, api_secret=None, mtls_cert=None, mtls_key=None, timeout=None, local_vars_configuration=None):  # noqa: E501
        """GlobalSignAtlasTargetDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_key = None
        self._api_secret = None
        self._mtls_cert = None
        self._mtls_key = None
        self._timeout = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if api_secret is not None:
            self.api_secret = api_secret
        if mtls_cert is not None:
            self.mtls_cert = mtls_cert
        if mtls_key is not None:
            self.mtls_key = mtls_key
        if timeout is not None:
            self.timeout = timeout

    @property
    def api_key(self):
        """Gets the api_key of this GlobalSignAtlasTargetDetails.  # noqa: E501


        :return: The api_key of this GlobalSignAtlasTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this GlobalSignAtlasTargetDetails.


        :param api_key: The api_key of this GlobalSignAtlasTargetDetails.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def api_secret(self):
        """Gets the api_secret of this GlobalSignAtlasTargetDetails.  # noqa: E501


        :return: The api_secret of this GlobalSignAtlasTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._api_secret

    @api_secret.setter
    def api_secret(self, api_secret):
        """Sets the api_secret of this GlobalSignAtlasTargetDetails.


        :param api_secret: The api_secret of this GlobalSignAtlasTargetDetails.  # noqa: E501
        :type: str
        """

        self._api_secret = api_secret

    @property
    def mtls_cert(self):
        """Gets the mtls_cert of this GlobalSignAtlasTargetDetails.  # noqa: E501


        :return: The mtls_cert of this GlobalSignAtlasTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._mtls_cert

    @mtls_cert.setter
    def mtls_cert(self, mtls_cert):
        """Sets the mtls_cert of this GlobalSignAtlasTargetDetails.


        :param mtls_cert: The mtls_cert of this GlobalSignAtlasTargetDetails.  # noqa: E501
        :type: str
        """

        self._mtls_cert = mtls_cert

    @property
    def mtls_key(self):
        """Gets the mtls_key of this GlobalSignAtlasTargetDetails.  # noqa: E501


        :return: The mtls_key of this GlobalSignAtlasTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._mtls_key

    @mtls_key.setter
    def mtls_key(self, mtls_key):
        """Sets the mtls_key of this GlobalSignAtlasTargetDetails.


        :param mtls_key: The mtls_key of this GlobalSignAtlasTargetDetails.  # noqa: E501
        :type: str
        """

        self._mtls_key = mtls_key

    @property
    def timeout(self):
        """Gets the timeout of this GlobalSignAtlasTargetDetails.  # noqa: E501

        A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.  # noqa: E501

        :return: The timeout of this GlobalSignAtlasTargetDetails.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this GlobalSignAtlasTargetDetails.

        A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.  # noqa: E501

        :param timeout: The timeout of this GlobalSignAtlasTargetDetails.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalSignAtlasTargetDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GlobalSignAtlasTargetDetails):
            return True

        return self.to_dict() != other.to_dict()
