# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.access_or_group_permission_assignment import AccessOrGroupPermissionAssignment
from typing import Optional, Set
from typing_extensions import Self

class OidcClientInfo(BaseModel):
    """
    OidcClientInfo
    """ # noqa: E501
    access_permission_assignment: Optional[List[AccessOrGroupPermissionAssignment]] = None
    audience: Optional[List[StrictStr]] = None
    client_id: Optional[StrictStr] = None
    grant_types: Optional[List[StrictStr]] = None
    issuer_url: Optional[StrictStr] = None
    logout_uris: Optional[List[StrictStr]] = None
    public: Optional[StrictBool] = None
    redirect_uris: Optional[List[StrictStr]] = None
    response_types: Optional[List[StrictStr]] = None
    scopes: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["access_permission_assignment", "audience", "client_id", "grant_types", "issuer_url", "logout_uris", "public", "redirect_uris", "response_types", "scopes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OidcClientInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_permission_assignment (list)
        _items = []
        if self.access_permission_assignment:
            for _item_access_permission_assignment in self.access_permission_assignment:
                if _item_access_permission_assignment:
                    _items.append(_item_access_permission_assignment.to_dict())
            _dict['access_permission_assignment'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OidcClientInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_permission_assignment": [AccessOrGroupPermissionAssignment.from_dict(_item) for _item in obj["access_permission_assignment"]] if obj.get("access_permission_assignment") is not None else None,
            "audience": obj.get("audience"),
            "client_id": obj.get("client_id"),
            "grant_types": obj.get("grant_types"),
            "issuer_url": obj.get("issuer_url"),
            "logout_uris": obj.get("logout_uris"),
            "public": obj.get("public"),
            "redirect_uris": obj.get("redirect_uris"),
            "response_types": obj.get("response_types"),
            "scopes": obj.get("scopes")
        })
        return _obj


