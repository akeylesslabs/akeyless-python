# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AuthMethodUpdateK8s(BaseModel):
    """
    authMethodUpdateK8s is a command that updates a new auth method that will be able to authenticate using K8S.
    """ # noqa: E501
    access_expires: Optional[StrictInt] = Field(default=0, description="Access expiration date in Unix timestamp (select 0 for access without expiry date)", alias="access-expires")
    audience: Optional[StrictStr] = Field(default=None, description="The audience in the Kubernetes JWT that the access is restricted to")
    audit_logs_claims: Optional[List[StrictStr]] = Field(default=None, description="Subclaims to include in audit logs, e.g \"--audit-logs-claims email --audit-logs-claims username\"", alias="audit-logs-claims")
    bound_ips: Optional[List[StrictStr]] = Field(default=None, description="A CIDR whitelist with the IPs that the access is restricted to", alias="bound-ips")
    bound_namespaces: Optional[List[StrictStr]] = Field(default=None, description="A list of namespaces that the access is restricted to", alias="bound-namespaces")
    bound_pod_names: Optional[List[StrictStr]] = Field(default=None, description="A list of pod names that the access is restricted to", alias="bound-pod-names")
    bound_sa_names: Optional[List[StrictStr]] = Field(default=None, description="A list of service account names that the access is restricted to", alias="bound-sa-names")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default=None, description="Auth Method description")
    expiration_event_in: Optional[List[StrictStr]] = Field(default=None, description="How many days before the expiration of the auth method would you like to be notified.", alias="expiration-event-in")
    force_sub_claims: Optional[StrictBool] = Field(default=None, description="if true: enforce role-association must include sub claims", alias="force-sub-claims")
    gen_key: Optional[StrictStr] = Field(default=None, description="Automatically generate key-pair for K8S configuration. If set to false, a public key needs to be provided [true/false]", alias="gen-key")
    gw_bound_ips: Optional[List[StrictStr]] = Field(default=None, description="A CIDR whitelist with the GW IPs that the access is restricted to", alias="gw-bound-ips")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    jwt_ttl: Optional[StrictInt] = Field(default=0, description="Jwt TTL", alias="jwt-ttl")
    name: StrictStr = Field(description="Auth Method name")
    new_name: Optional[StrictStr] = Field(default=None, description="Auth Method new name", alias="new-name")
    product_type: Optional[List[StrictStr]] = Field(default=None, description="Choose the relevant product type for the auth method [sm, sra, pm, dp, ca]", alias="product-type")
    public_key: Optional[StrictStr] = Field(default=None, description="Base64-encoded or PEM formatted public key data for K8S authentication method is required [RSA2048]", alias="public-key")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["access-expires", "audience", "audit-logs-claims", "bound-ips", "bound-namespaces", "bound-pod-names", "bound-sa-names", "delete_protection", "description", "expiration-event-in", "force-sub-claims", "gen-key", "gw-bound-ips", "json", "jwt-ttl", "name", "new-name", "product-type", "public-key", "token", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthMethodUpdateK8s from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthMethodUpdateK8s from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access-expires": obj.get("access-expires") if obj.get("access-expires") is not None else 0,
            "audience": obj.get("audience"),
            "audit-logs-claims": obj.get("audit-logs-claims"),
            "bound-ips": obj.get("bound-ips"),
            "bound-namespaces": obj.get("bound-namespaces"),
            "bound-pod-names": obj.get("bound-pod-names"),
            "bound-sa-names": obj.get("bound-sa-names"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "expiration-event-in": obj.get("expiration-event-in"),
            "force-sub-claims": obj.get("force-sub-claims"),
            "gen-key": obj.get("gen-key"),
            "gw-bound-ips": obj.get("gw-bound-ips"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "jwt-ttl": obj.get("jwt-ttl") if obj.get("jwt-ttl") is not None else 0,
            "name": obj.get("name"),
            "new-name": obj.get("new-name"),
            "product-type": obj.get("product-type"),
            "public-key": obj.get("public-key"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


