# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GenCustomerFragment(BaseModel):
    """
    GenCustomerFragment
    """ # noqa: E501
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    hsm_key_label: Optional[StrictStr] = Field(default=None, description="The label of the hsm key to use for customer fragment operations (relevant for hsm_wrapped/hsm_protected customer fragments)", alias="hsm-key-label")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    metadata: Optional[StrictStr] = Field(default=None, description="Deprecated - use description")
    name: Optional[StrictStr] = Field(default=None, description="Customer fragment name")
    type: Optional[StrictStr] = Field(default='standard', description="Customer fragment type [standard/hsm_wrapped/hsm_secured]")
    __properties: ClassVar[List[str]] = ["description", "hsm-key-label", "json", "metadata", "name", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenCustomerFragment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenCustomerFragment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "description": obj.get("description"),
            "hsm-key-label": obj.get("hsm-key-label"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "type": obj.get("type") if obj.get("type") is not None else 'standard'
        })
        return _obj


