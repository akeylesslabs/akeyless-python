# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class AwsStorage(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_key_id': 'str',
        'access_key_secret': 'str',
        'auth_type': 'str',
        'bucket': 'str',
        'prefix': 'str',
        'region': 'str'
    }

    attribute_map = {
        'access_key_id': 'access_key_id',
        'access_key_secret': 'access_key_secret',
        'auth_type': 'auth_type',
        'bucket': 'bucket',
        'prefix': 'prefix',
        'region': 'region'
    }

    def __init__(self, access_key_id=None, access_key_secret=None, auth_type=None, bucket=None, prefix=None, region=None, local_vars_configuration=None):  # noqa: E501
        """AwsStorage - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_key_id = None
        self._access_key_secret = None
        self._auth_type = None
        self._bucket = None
        self._prefix = None
        self._region = None
        self.discriminator = None

        if access_key_id is not None:
            self.access_key_id = access_key_id
        if access_key_secret is not None:
            self.access_key_secret = access_key_secret
        if auth_type is not None:
            self.auth_type = auth_type
        if bucket is not None:
            self.bucket = bucket
        if prefix is not None:
            self.prefix = prefix
        if region is not None:
            self.region = region

    @property
    def access_key_id(self):
        """Gets the access_key_id of this AwsStorage.  # noqa: E501

        creds  # noqa: E501

        :return: The access_key_id of this AwsStorage.  # noqa: E501
        :rtype: str
        """
        return self._access_key_id

    @access_key_id.setter
    def access_key_id(self, access_key_id):
        """Sets the access_key_id of this AwsStorage.

        creds  # noqa: E501

        :param access_key_id: The access_key_id of this AwsStorage.  # noqa: E501
        :type: str
        """

        self._access_key_id = access_key_id

    @property
    def access_key_secret(self):
        """Gets the access_key_secret of this AwsStorage.  # noqa: E501


        :return: The access_key_secret of this AwsStorage.  # noqa: E501
        :rtype: str
        """
        return self._access_key_secret

    @access_key_secret.setter
    def access_key_secret(self, access_key_secret):
        """Sets the access_key_secret of this AwsStorage.


        :param access_key_secret: The access_key_secret of this AwsStorage.  # noqa: E501
        :type: str
        """

        self._access_key_secret = access_key_secret

    @property
    def auth_type(self):
        """Gets the auth_type of this AwsStorage.  # noqa: E501


        :return: The auth_type of this AwsStorage.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this AwsStorage.


        :param auth_type: The auth_type of this AwsStorage.  # noqa: E501
        :type: str
        """

        self._auth_type = auth_type

    @property
    def bucket(self):
        """Gets the bucket of this AwsStorage.  # noqa: E501


        :return: The bucket of this AwsStorage.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this AwsStorage.


        :param bucket: The bucket of this AwsStorage.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def prefix(self):
        """Gets the prefix of this AwsStorage.  # noqa: E501


        :return: The prefix of this AwsStorage.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this AwsStorage.


        :param prefix: The prefix of this AwsStorage.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def region(self):
        """Gets the region of this AwsStorage.  # noqa: E501


        :return: The region of this AwsStorage.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AwsStorage.


        :param region: The region of this AwsStorage.  # noqa: E501
        :type: str
        """

        self._region = region

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsStorage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwsStorage):
            return True

        return self.to_dict() != other.to_dict()
