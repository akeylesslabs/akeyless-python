# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.item_sra_status import ItemSraStatus
from akeyless.models.target_name_with_hosts import TargetNameWithHosts
from typing import Optional, Set
from typing_extensions import Self

class SecureRemoteAccess(BaseModel):
    """
    SecureRemoteAccess
    """ # noqa: E501
    account_id: Optional[StrictStr] = None
    allow_port_forwarding: Optional[StrictBool] = None
    allow_providing_external_username: Optional[StrictBool] = None
    bastion_api: Optional[StrictStr] = None
    bastion_issuer: Optional[StrictStr] = None
    bastion_issuer_id: Optional[StrictInt] = None
    bastion_ssh: Optional[StrictStr] = None
    block_concurrent_connections: Optional[StrictBool] = None
    block_concurrent_connections_level: Optional[StrictStr] = None
    category: Optional[StrictStr] = None
    connection_delay_seconds: Optional[StrictInt] = None
    dashboard_url: Optional[StrictStr] = None
    db_name: Optional[StrictStr] = None
    domain: Optional[StrictStr] = None
    enable: Optional[StrictBool] = None
    endpoint: Optional[StrictStr] = None
    enforce_hosts_restriction: Optional[StrictBool] = None
    gw_cluster_id: Optional[StrictInt] = None
    host: Optional[List[StrictStr]] = None
    host_provider_type: Optional[StrictStr] = None
    is_cli: Optional[StrictBool] = None
    is_web: Optional[StrictBool] = None
    isolated: Optional[StrictBool] = None
    native: Optional[StrictBool] = None
    rd_gateway_server: Optional[StrictStr] = None
    rdp_user: Optional[StrictStr] = None
    region: Optional[StrictStr] = None
    rotate_after_disconnect: Optional[StrictBool] = None
    var_schema: Optional[StrictStr] = Field(default=None, alias="schema")
    ssh_password: Optional[StrictBool] = None
    ssh_private_key: Optional[StrictBool] = None
    ssh_user: Optional[StrictStr] = None
    status_info: Optional[ItemSraStatus] = None
    target_hosts: Optional[List[TargetNameWithHosts]] = None
    targets: Optional[List[StrictStr]] = None
    url: Optional[StrictStr] = None
    use_internal_bastion: Optional[StrictBool] = None
    web_proxy: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["account_id", "allow_port_forwarding", "allow_providing_external_username", "bastion_api", "bastion_issuer", "bastion_issuer_id", "bastion_ssh", "block_concurrent_connections", "block_concurrent_connections_level", "category", "connection_delay_seconds", "dashboard_url", "db_name", "domain", "enable", "endpoint", "enforce_hosts_restriction", "gw_cluster_id", "host", "host_provider_type", "is_cli", "is_web", "isolated", "native", "rd_gateway_server", "rdp_user", "region", "rotate_after_disconnect", "schema", "ssh_password", "ssh_private_key", "ssh_user", "status_info", "target_hosts", "targets", "url", "use_internal_bastion", "web_proxy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecureRemoteAccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status_info
        if self.status_info:
            _dict['status_info'] = self.status_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in target_hosts (list)
        _items = []
        if self.target_hosts:
            for _item_target_hosts in self.target_hosts:
                if _item_target_hosts:
                    _items.append(_item_target_hosts.to_dict())
            _dict['target_hosts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecureRemoteAccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "allow_port_forwarding": obj.get("allow_port_forwarding"),
            "allow_providing_external_username": obj.get("allow_providing_external_username"),
            "bastion_api": obj.get("bastion_api"),
            "bastion_issuer": obj.get("bastion_issuer"),
            "bastion_issuer_id": obj.get("bastion_issuer_id"),
            "bastion_ssh": obj.get("bastion_ssh"),
            "block_concurrent_connections": obj.get("block_concurrent_connections"),
            "block_concurrent_connections_level": obj.get("block_concurrent_connections_level"),
            "category": obj.get("category"),
            "connection_delay_seconds": obj.get("connection_delay_seconds"),
            "dashboard_url": obj.get("dashboard_url"),
            "db_name": obj.get("db_name"),
            "domain": obj.get("domain"),
            "enable": obj.get("enable"),
            "endpoint": obj.get("endpoint"),
            "enforce_hosts_restriction": obj.get("enforce_hosts_restriction"),
            "gw_cluster_id": obj.get("gw_cluster_id"),
            "host": obj.get("host"),
            "host_provider_type": obj.get("host_provider_type"),
            "is_cli": obj.get("is_cli"),
            "is_web": obj.get("is_web"),
            "isolated": obj.get("isolated"),
            "native": obj.get("native"),
            "rd_gateway_server": obj.get("rd_gateway_server"),
            "rdp_user": obj.get("rdp_user"),
            "region": obj.get("region"),
            "rotate_after_disconnect": obj.get("rotate_after_disconnect"),
            "schema": obj.get("schema"),
            "ssh_password": obj.get("ssh_password"),
            "ssh_private_key": obj.get("ssh_private_key"),
            "ssh_user": obj.get("ssh_user"),
            "status_info": ItemSraStatus.from_dict(obj["status_info"]) if obj.get("status_info") is not None else None,
            "target_hosts": [TargetNameWithHosts.from_dict(_item) for _item in obj["target_hosts"]] if obj.get("target_hosts") is not None else None,
            "targets": obj.get("targets"),
            "url": obj.get("url"),
            "use_internal_bastion": obj.get("use_internal_bastion"),
            "web_proxy": obj.get("web_proxy")
        })
        return _obj


