# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class KmipDescribeServerOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active': 'bool',
        'ca_cert': 'list[int]',
        'certificate_issue_date': 'datetime',
        'certificate_ttl_in_seconds': 'int',
        'hostname': 'str',
        'root': 'str'
    }

    attribute_map = {
        'active': 'active',
        'ca_cert': 'ca_cert',
        'certificate_issue_date': 'certificate_issue_date',
        'certificate_ttl_in_seconds': 'certificate_ttl_in_seconds',
        'hostname': 'hostname',
        'root': 'root'
    }

    def __init__(self, active=None, ca_cert=None, certificate_issue_date=None, certificate_ttl_in_seconds=None, hostname=None, root=None, local_vars_configuration=None):  # noqa: E501
        """KmipDescribeServerOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active = None
        self._ca_cert = None
        self._certificate_issue_date = None
        self._certificate_ttl_in_seconds = None
        self._hostname = None
        self._root = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if ca_cert is not None:
            self.ca_cert = ca_cert
        if certificate_issue_date is not None:
            self.certificate_issue_date = certificate_issue_date
        if certificate_ttl_in_seconds is not None:
            self.certificate_ttl_in_seconds = certificate_ttl_in_seconds
        if hostname is not None:
            self.hostname = hostname
        if root is not None:
            self.root = root

    @property
    def active(self):
        """Gets the active of this KmipDescribeServerOutput.  # noqa: E501


        :return: The active of this KmipDescribeServerOutput.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this KmipDescribeServerOutput.


        :param active: The active of this KmipDescribeServerOutput.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def ca_cert(self):
        """Gets the ca_cert of this KmipDescribeServerOutput.  # noqa: E501


        :return: The ca_cert of this KmipDescribeServerOutput.  # noqa: E501
        :rtype: list[int]
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert):
        """Sets the ca_cert of this KmipDescribeServerOutput.


        :param ca_cert: The ca_cert of this KmipDescribeServerOutput.  # noqa: E501
        :type: list[int]
        """

        self._ca_cert = ca_cert

    @property
    def certificate_issue_date(self):
        """Gets the certificate_issue_date of this KmipDescribeServerOutput.  # noqa: E501


        :return: The certificate_issue_date of this KmipDescribeServerOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._certificate_issue_date

    @certificate_issue_date.setter
    def certificate_issue_date(self, certificate_issue_date):
        """Sets the certificate_issue_date of this KmipDescribeServerOutput.


        :param certificate_issue_date: The certificate_issue_date of this KmipDescribeServerOutput.  # noqa: E501
        :type: datetime
        """

        self._certificate_issue_date = certificate_issue_date

    @property
    def certificate_ttl_in_seconds(self):
        """Gets the certificate_ttl_in_seconds of this KmipDescribeServerOutput.  # noqa: E501


        :return: The certificate_ttl_in_seconds of this KmipDescribeServerOutput.  # noqa: E501
        :rtype: int
        """
        return self._certificate_ttl_in_seconds

    @certificate_ttl_in_seconds.setter
    def certificate_ttl_in_seconds(self, certificate_ttl_in_seconds):
        """Sets the certificate_ttl_in_seconds of this KmipDescribeServerOutput.


        :param certificate_ttl_in_seconds: The certificate_ttl_in_seconds of this KmipDescribeServerOutput.  # noqa: E501
        :type: int
        """

        self._certificate_ttl_in_seconds = certificate_ttl_in_seconds

    @property
    def hostname(self):
        """Gets the hostname of this KmipDescribeServerOutput.  # noqa: E501


        :return: The hostname of this KmipDescribeServerOutput.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this KmipDescribeServerOutput.


        :param hostname: The hostname of this KmipDescribeServerOutput.  # noqa: E501
        :type: str
        """

        self._hostname = hostname

    @property
    def root(self):
        """Gets the root of this KmipDescribeServerOutput.  # noqa: E501


        :return: The root of this KmipDescribeServerOutput.  # noqa: E501
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this KmipDescribeServerOutput.


        :param root: The root of this KmipDescribeServerOutput.  # noqa: E501
        :type: str
        """

        self._root = root

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KmipDescribeServerOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KmipDescribeServerOutput):
            return True

        return self.to_dict() != other.to_dict()
