# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class EmailTokenizerInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'domain_suffix_length': 'int',
        'fixed_domain_suffix': 'str',
        'keep_prefix_length': 'int'
    }

    attribute_map = {
        'domain_suffix_length': 'domain_suffix_length',
        'fixed_domain_suffix': 'fixed_domain_suffix',
        'keep_prefix_length': 'keep_prefix_length'
    }

    def __init__(self, domain_suffix_length=None, fixed_domain_suffix=None, keep_prefix_length=None, local_vars_configuration=None):  # noqa: E501
        """EmailTokenizerInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._domain_suffix_length = None
        self._fixed_domain_suffix = None
        self._keep_prefix_length = None
        self.discriminator = None

        if domain_suffix_length is not None:
            self.domain_suffix_length = domain_suffix_length
        if fixed_domain_suffix is not None:
            self.fixed_domain_suffix = fixed_domain_suffix
        if keep_prefix_length is not None:
            self.keep_prefix_length = keep_prefix_length

    @property
    def domain_suffix_length(self):
        """Gets the domain_suffix_length of this EmailTokenizerInfo.  # noqa: E501

        What length of a random domain suffix to generate used only if FixedDomainSuffix is empty  # noqa: E501

        :return: The domain_suffix_length of this EmailTokenizerInfo.  # noqa: E501
        :rtype: int
        """
        return self._domain_suffix_length

    @domain_suffix_length.setter
    def domain_suffix_length(self, domain_suffix_length):
        """Sets the domain_suffix_length of this EmailTokenizerInfo.

        What length of a random domain suffix to generate used only if FixedDomainSuffix is empty  # noqa: E501

        :param domain_suffix_length: The domain_suffix_length of this EmailTokenizerInfo.  # noqa: E501
        :type: int
        """

        self._domain_suffix_length = domain_suffix_length

    @property
    def fixed_domain_suffix(self):
        """Gets the fixed_domain_suffix of this EmailTokenizerInfo.  # noqa: E501

        if FixedDomainSuffix isn't empty, it will be appended to the output  # noqa: E501

        :return: The fixed_domain_suffix of this EmailTokenizerInfo.  # noqa: E501
        :rtype: str
        """
        return self._fixed_domain_suffix

    @fixed_domain_suffix.setter
    def fixed_domain_suffix(self, fixed_domain_suffix):
        """Sets the fixed_domain_suffix of this EmailTokenizerInfo.

        if FixedDomainSuffix isn't empty, it will be appended to the output  # noqa: E501

        :param fixed_domain_suffix: The fixed_domain_suffix of this EmailTokenizerInfo.  # noqa: E501
        :type: str
        """

        self._fixed_domain_suffix = fixed_domain_suffix

    @property
    def keep_prefix_length(self):
        """Gets the keep_prefix_length of this EmailTokenizerInfo.  # noqa: E501

        How many letters of the plaintext to keep in the output  # noqa: E501

        :return: The keep_prefix_length of this EmailTokenizerInfo.  # noqa: E501
        :rtype: int
        """
        return self._keep_prefix_length

    @keep_prefix_length.setter
    def keep_prefix_length(self, keep_prefix_length):
        """Sets the keep_prefix_length of this EmailTokenizerInfo.

        How many letters of the plaintext to keep in the output  # noqa: E501

        :param keep_prefix_length: The keep_prefix_length of this EmailTokenizerInfo.  # noqa: E501
        :type: int
        """

        self._keep_prefix_length = keep_prefix_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailTokenizerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailTokenizerInfo):
            return True

        return self.to_dict() != other.to_dict()
