# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class ActiveDirectoryPayload(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'active_directory_target_id': 'int',
        'auto_rotate': 'bool',
        'auto_rotate_interval_in_days': 'int',
        'auto_rotate_rotation_hour': 'int',
        'computer_base_dn': 'str',
        'discover_local_users': 'bool',
        'domain_name': 'str',
        'domain_server_targets_path_template': 'str',
        'domain_users_rotated_secrets_path_template': 'str',
        'enable_rdp_sra': 'bool',
        'local_users_ignore_list': 'dict(str, bool)',
        'local_users_rotated_secrets_path_template': 'str',
        'ssh_port': 'str',
        'targets_type': 'str',
        'user_base_dn': 'str',
        'user_groups': 'list[str]',
        'winrm_over_http': 'bool',
        'winrm_port': 'str'
    }

    attribute_map = {
        'active_directory_target_id': 'active_directory_target_id',
        'auto_rotate': 'auto_rotate',
        'auto_rotate_interval_in_days': 'auto_rotate_interval_in_days',
        'auto_rotate_rotation_hour': 'auto_rotate_rotation_hour',
        'computer_base_dn': 'computer_base_dn',
        'discover_local_users': 'discover_local_users',
        'domain_name': 'domain_name',
        'domain_server_targets_path_template': 'domain_server_targets_path_template',
        'domain_users_rotated_secrets_path_template': 'domain_users_rotated_secrets_path_template',
        'enable_rdp_sra': 'enable_rdp_sra',
        'local_users_ignore_list': 'local_users_ignore_list',
        'local_users_rotated_secrets_path_template': 'local_users_rotated_secrets_path_template',
        'ssh_port': 'ssh_port',
        'targets_type': 'targets_type',
        'user_base_dn': 'user_base_dn',
        'user_groups': 'user_groups',
        'winrm_over_http': 'winrm_over_http',
        'winrm_port': 'winrm_port'
    }

    def __init__(self, active_directory_target_id=None, auto_rotate=None, auto_rotate_interval_in_days=None, auto_rotate_rotation_hour=None, computer_base_dn=None, discover_local_users=None, domain_name=None, domain_server_targets_path_template=None, domain_users_rotated_secrets_path_template=None, enable_rdp_sra=None, local_users_ignore_list=None, local_users_rotated_secrets_path_template=None, ssh_port=None, targets_type=None, user_base_dn=None, user_groups=None, winrm_over_http=None, winrm_port=None, local_vars_configuration=None):  # noqa: E501
        """ActiveDirectoryPayload - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._active_directory_target_id = None
        self._auto_rotate = None
        self._auto_rotate_interval_in_days = None
        self._auto_rotate_rotation_hour = None
        self._computer_base_dn = None
        self._discover_local_users = None
        self._domain_name = None
        self._domain_server_targets_path_template = None
        self._domain_users_rotated_secrets_path_template = None
        self._enable_rdp_sra = None
        self._local_users_ignore_list = None
        self._local_users_rotated_secrets_path_template = None
        self._ssh_port = None
        self._targets_type = None
        self._user_base_dn = None
        self._user_groups = None
        self._winrm_over_http = None
        self._winrm_port = None
        self.discriminator = None

        if active_directory_target_id is not None:
            self.active_directory_target_id = active_directory_target_id
        if auto_rotate is not None:
            self.auto_rotate = auto_rotate
        if auto_rotate_interval_in_days is not None:
            self.auto_rotate_interval_in_days = auto_rotate_interval_in_days
        if auto_rotate_rotation_hour is not None:
            self.auto_rotate_rotation_hour = auto_rotate_rotation_hour
        if computer_base_dn is not None:
            self.computer_base_dn = computer_base_dn
        if discover_local_users is not None:
            self.discover_local_users = discover_local_users
        if domain_name is not None:
            self.domain_name = domain_name
        if domain_server_targets_path_template is not None:
            self.domain_server_targets_path_template = domain_server_targets_path_template
        if domain_users_rotated_secrets_path_template is not None:
            self.domain_users_rotated_secrets_path_template = domain_users_rotated_secrets_path_template
        if enable_rdp_sra is not None:
            self.enable_rdp_sra = enable_rdp_sra
        if local_users_ignore_list is not None:
            self.local_users_ignore_list = local_users_ignore_list
        if local_users_rotated_secrets_path_template is not None:
            self.local_users_rotated_secrets_path_template = local_users_rotated_secrets_path_template
        if ssh_port is not None:
            self.ssh_port = ssh_port
        if targets_type is not None:
            self.targets_type = targets_type
        if user_base_dn is not None:
            self.user_base_dn = user_base_dn
        if user_groups is not None:
            self.user_groups = user_groups
        if winrm_over_http is not None:
            self.winrm_over_http = winrm_over_http
        if winrm_port is not None:
            self.winrm_port = winrm_port

    @property
    def active_directory_target_id(self):
        """Gets the active_directory_target_id of this ActiveDirectoryPayload.  # noqa: E501


        :return: The active_directory_target_id of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: int
        """
        return self._active_directory_target_id

    @active_directory_target_id.setter
    def active_directory_target_id(self, active_directory_target_id):
        """Sets the active_directory_target_id of this ActiveDirectoryPayload.


        :param active_directory_target_id: The active_directory_target_id of this ActiveDirectoryPayload.  # noqa: E501
        :type: int
        """

        self._active_directory_target_id = active_directory_target_id

    @property
    def auto_rotate(self):
        """Gets the auto_rotate of this ActiveDirectoryPayload.  # noqa: E501


        :return: The auto_rotate of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: bool
        """
        return self._auto_rotate

    @auto_rotate.setter
    def auto_rotate(self, auto_rotate):
        """Sets the auto_rotate of this ActiveDirectoryPayload.


        :param auto_rotate: The auto_rotate of this ActiveDirectoryPayload.  # noqa: E501
        :type: bool
        """

        self._auto_rotate = auto_rotate

    @property
    def auto_rotate_interval_in_days(self):
        """Gets the auto_rotate_interval_in_days of this ActiveDirectoryPayload.  # noqa: E501


        :return: The auto_rotate_interval_in_days of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: int
        """
        return self._auto_rotate_interval_in_days

    @auto_rotate_interval_in_days.setter
    def auto_rotate_interval_in_days(self, auto_rotate_interval_in_days):
        """Sets the auto_rotate_interval_in_days of this ActiveDirectoryPayload.


        :param auto_rotate_interval_in_days: The auto_rotate_interval_in_days of this ActiveDirectoryPayload.  # noqa: E501
        :type: int
        """

        self._auto_rotate_interval_in_days = auto_rotate_interval_in_days

    @property
    def auto_rotate_rotation_hour(self):
        """Gets the auto_rotate_rotation_hour of this ActiveDirectoryPayload.  # noqa: E501


        :return: The auto_rotate_rotation_hour of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: int
        """
        return self._auto_rotate_rotation_hour

    @auto_rotate_rotation_hour.setter
    def auto_rotate_rotation_hour(self, auto_rotate_rotation_hour):
        """Sets the auto_rotate_rotation_hour of this ActiveDirectoryPayload.


        :param auto_rotate_rotation_hour: The auto_rotate_rotation_hour of this ActiveDirectoryPayload.  # noqa: E501
        :type: int
        """

        self._auto_rotate_rotation_hour = auto_rotate_rotation_hour

    @property
    def computer_base_dn(self):
        """Gets the computer_base_dn of this ActiveDirectoryPayload.  # noqa: E501


        :return: The computer_base_dn of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._computer_base_dn

    @computer_base_dn.setter
    def computer_base_dn(self, computer_base_dn):
        """Sets the computer_base_dn of this ActiveDirectoryPayload.


        :param computer_base_dn: The computer_base_dn of this ActiveDirectoryPayload.  # noqa: E501
        :type: str
        """

        self._computer_base_dn = computer_base_dn

    @property
    def discover_local_users(self):
        """Gets the discover_local_users of this ActiveDirectoryPayload.  # noqa: E501


        :return: The discover_local_users of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: bool
        """
        return self._discover_local_users

    @discover_local_users.setter
    def discover_local_users(self, discover_local_users):
        """Sets the discover_local_users of this ActiveDirectoryPayload.


        :param discover_local_users: The discover_local_users of this ActiveDirectoryPayload.  # noqa: E501
        :type: bool
        """

        self._discover_local_users = discover_local_users

    @property
    def domain_name(self):
        """Gets the domain_name of this ActiveDirectoryPayload.  # noqa: E501


        :return: The domain_name of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this ActiveDirectoryPayload.


        :param domain_name: The domain_name of this ActiveDirectoryPayload.  # noqa: E501
        :type: str
        """

        self._domain_name = domain_name

    @property
    def domain_server_targets_path_template(self):
        """Gets the domain_server_targets_path_template of this ActiveDirectoryPayload.  # noqa: E501


        :return: The domain_server_targets_path_template of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._domain_server_targets_path_template

    @domain_server_targets_path_template.setter
    def domain_server_targets_path_template(self, domain_server_targets_path_template):
        """Sets the domain_server_targets_path_template of this ActiveDirectoryPayload.


        :param domain_server_targets_path_template: The domain_server_targets_path_template of this ActiveDirectoryPayload.  # noqa: E501
        :type: str
        """

        self._domain_server_targets_path_template = domain_server_targets_path_template

    @property
    def domain_users_rotated_secrets_path_template(self):
        """Gets the domain_users_rotated_secrets_path_template of this ActiveDirectoryPayload.  # noqa: E501


        :return: The domain_users_rotated_secrets_path_template of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._domain_users_rotated_secrets_path_template

    @domain_users_rotated_secrets_path_template.setter
    def domain_users_rotated_secrets_path_template(self, domain_users_rotated_secrets_path_template):
        """Sets the domain_users_rotated_secrets_path_template of this ActiveDirectoryPayload.


        :param domain_users_rotated_secrets_path_template: The domain_users_rotated_secrets_path_template of this ActiveDirectoryPayload.  # noqa: E501
        :type: str
        """

        self._domain_users_rotated_secrets_path_template = domain_users_rotated_secrets_path_template

    @property
    def enable_rdp_sra(self):
        """Gets the enable_rdp_sra of this ActiveDirectoryPayload.  # noqa: E501


        :return: The enable_rdp_sra of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: bool
        """
        return self._enable_rdp_sra

    @enable_rdp_sra.setter
    def enable_rdp_sra(self, enable_rdp_sra):
        """Sets the enable_rdp_sra of this ActiveDirectoryPayload.


        :param enable_rdp_sra: The enable_rdp_sra of this ActiveDirectoryPayload.  # noqa: E501
        :type: bool
        """

        self._enable_rdp_sra = enable_rdp_sra

    @property
    def local_users_ignore_list(self):
        """Gets the local_users_ignore_list of this ActiveDirectoryPayload.  # noqa: E501


        :return: The local_users_ignore_list of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._local_users_ignore_list

    @local_users_ignore_list.setter
    def local_users_ignore_list(self, local_users_ignore_list):
        """Sets the local_users_ignore_list of this ActiveDirectoryPayload.


        :param local_users_ignore_list: The local_users_ignore_list of this ActiveDirectoryPayload.  # noqa: E501
        :type: dict(str, bool)
        """

        self._local_users_ignore_list = local_users_ignore_list

    @property
    def local_users_rotated_secrets_path_template(self):
        """Gets the local_users_rotated_secrets_path_template of this ActiveDirectoryPayload.  # noqa: E501


        :return: The local_users_rotated_secrets_path_template of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._local_users_rotated_secrets_path_template

    @local_users_rotated_secrets_path_template.setter
    def local_users_rotated_secrets_path_template(self, local_users_rotated_secrets_path_template):
        """Sets the local_users_rotated_secrets_path_template of this ActiveDirectoryPayload.


        :param local_users_rotated_secrets_path_template: The local_users_rotated_secrets_path_template of this ActiveDirectoryPayload.  # noqa: E501
        :type: str
        """

        self._local_users_rotated_secrets_path_template = local_users_rotated_secrets_path_template

    @property
    def ssh_port(self):
        """Gets the ssh_port of this ActiveDirectoryPayload.  # noqa: E501


        :return: The ssh_port of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._ssh_port

    @ssh_port.setter
    def ssh_port(self, ssh_port):
        """Sets the ssh_port of this ActiveDirectoryPayload.


        :param ssh_port: The ssh_port of this ActiveDirectoryPayload.  # noqa: E501
        :type: str
        """

        self._ssh_port = ssh_port

    @property
    def targets_type(self):
        """Gets the targets_type of this ActiveDirectoryPayload.  # noqa: E501


        :return: The targets_type of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._targets_type

    @targets_type.setter
    def targets_type(self, targets_type):
        """Sets the targets_type of this ActiveDirectoryPayload.


        :param targets_type: The targets_type of this ActiveDirectoryPayload.  # noqa: E501
        :type: str
        """

        self._targets_type = targets_type

    @property
    def user_base_dn(self):
        """Gets the user_base_dn of this ActiveDirectoryPayload.  # noqa: E501


        :return: The user_base_dn of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._user_base_dn

    @user_base_dn.setter
    def user_base_dn(self, user_base_dn):
        """Sets the user_base_dn of this ActiveDirectoryPayload.


        :param user_base_dn: The user_base_dn of this ActiveDirectoryPayload.  # noqa: E501
        :type: str
        """

        self._user_base_dn = user_base_dn

    @property
    def user_groups(self):
        """Gets the user_groups of this ActiveDirectoryPayload.  # noqa: E501


        :return: The user_groups of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this ActiveDirectoryPayload.


        :param user_groups: The user_groups of this ActiveDirectoryPayload.  # noqa: E501
        :type: list[str]
        """

        self._user_groups = user_groups

    @property
    def winrm_over_http(self):
        """Gets the winrm_over_http of this ActiveDirectoryPayload.  # noqa: E501


        :return: The winrm_over_http of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: bool
        """
        return self._winrm_over_http

    @winrm_over_http.setter
    def winrm_over_http(self, winrm_over_http):
        """Sets the winrm_over_http of this ActiveDirectoryPayload.


        :param winrm_over_http: The winrm_over_http of this ActiveDirectoryPayload.  # noqa: E501
        :type: bool
        """

        self._winrm_over_http = winrm_over_http

    @property
    def winrm_port(self):
        """Gets the winrm_port of this ActiveDirectoryPayload.  # noqa: E501


        :return: The winrm_port of this ActiveDirectoryPayload.  # noqa: E501
        :rtype: str
        """
        return self._winrm_port

    @winrm_port.setter
    def winrm_port(self, winrm_port):
        """Sets the winrm_port of this ActiveDirectoryPayload.


        :param winrm_port: The winrm_port of this ActiveDirectoryPayload.  # noqa: E501
        :type: str
        """

        self._winrm_port = winrm_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActiveDirectoryPayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActiveDirectoryPayload):
            return True

        return self.to_dict() != other.to_dict()
