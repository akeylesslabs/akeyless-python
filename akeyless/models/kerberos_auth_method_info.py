# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class KerberosAuthMethodInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'kerberos_keytab': 'str',
        'kerberos_krb5_conf': 'str',
        'ldap_anonymous_search': 'bool',
        'ldap_bind_dn': 'str',
        'ldap_bind_password': 'str',
        'ldap_certificate': 'str',
        'ldap_group_attr': 'str',
        'ldap_group_dn': 'str',
        'ldap_group_filter': 'str',
        'ldap_url_address': 'str',
        'ldap_user_attr': 'str',
        'ldap_user_dn': 'str'
    }

    attribute_map = {
        'kerberos_keytab': 'kerberos_keytab',
        'kerberos_krb5_conf': 'kerberos_krb5_conf',
        'ldap_anonymous_search': 'ldap_anonymous_search',
        'ldap_bind_dn': 'ldap_bind_dn',
        'ldap_bind_password': 'ldap_bind_password',
        'ldap_certificate': 'ldap_certificate',
        'ldap_group_attr': 'ldap_group_attr',
        'ldap_group_dn': 'ldap_group_dn',
        'ldap_group_filter': 'ldap_group_filter',
        'ldap_url_address': 'ldap_url_address',
        'ldap_user_attr': 'ldap_user_attr',
        'ldap_user_dn': 'ldap_user_dn'
    }

    def __init__(self, kerberos_keytab=None, kerberos_krb5_conf=None, ldap_anonymous_search=None, ldap_bind_dn=None, ldap_bind_password=None, ldap_certificate=None, ldap_group_attr=None, ldap_group_dn=None, ldap_group_filter=None, ldap_url_address=None, ldap_user_attr=None, ldap_user_dn=None, local_vars_configuration=None):  # noqa: E501
        """KerberosAuthMethodInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._kerberos_keytab = None
        self._kerberos_krb5_conf = None
        self._ldap_anonymous_search = None
        self._ldap_bind_dn = None
        self._ldap_bind_password = None
        self._ldap_certificate = None
        self._ldap_group_attr = None
        self._ldap_group_dn = None
        self._ldap_group_filter = None
        self._ldap_url_address = None
        self._ldap_user_attr = None
        self._ldap_user_dn = None
        self.discriminator = None

        if kerberos_keytab is not None:
            self.kerberos_keytab = kerberos_keytab
        if kerberos_krb5_conf is not None:
            self.kerberos_krb5_conf = kerberos_krb5_conf
        if ldap_anonymous_search is not None:
            self.ldap_anonymous_search = ldap_anonymous_search
        if ldap_bind_dn is not None:
            self.ldap_bind_dn = ldap_bind_dn
        if ldap_bind_password is not None:
            self.ldap_bind_password = ldap_bind_password
        if ldap_certificate is not None:
            self.ldap_certificate = ldap_certificate
        if ldap_group_attr is not None:
            self.ldap_group_attr = ldap_group_attr
        if ldap_group_dn is not None:
            self.ldap_group_dn = ldap_group_dn
        if ldap_group_filter is not None:
            self.ldap_group_filter = ldap_group_filter
        if ldap_url_address is not None:
            self.ldap_url_address = ldap_url_address
        if ldap_user_attr is not None:
            self.ldap_user_attr = ldap_user_attr
        if ldap_user_dn is not None:
            self.ldap_user_dn = ldap_user_dn

    @property
    def kerberos_keytab(self):
        """Gets the kerberos_keytab of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The kerberos_keytab of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._kerberos_keytab

    @kerberos_keytab.setter
    def kerberos_keytab(self, kerberos_keytab):
        """Sets the kerberos_keytab of this KerberosAuthMethodInfo.


        :param kerberos_keytab: The kerberos_keytab of this KerberosAuthMethodInfo.  # noqa: E501
        :type: str
        """

        self._kerberos_keytab = kerberos_keytab

    @property
    def kerberos_krb5_conf(self):
        """Gets the kerberos_krb5_conf of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The kerberos_krb5_conf of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._kerberos_krb5_conf

    @kerberos_krb5_conf.setter
    def kerberos_krb5_conf(self, kerberos_krb5_conf):
        """Sets the kerberos_krb5_conf of this KerberosAuthMethodInfo.


        :param kerberos_krb5_conf: The kerberos_krb5_conf of this KerberosAuthMethodInfo.  # noqa: E501
        :type: str
        """

        self._kerberos_krb5_conf = kerberos_krb5_conf

    @property
    def ldap_anonymous_search(self):
        """Gets the ldap_anonymous_search of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The ldap_anonymous_search of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._ldap_anonymous_search

    @ldap_anonymous_search.setter
    def ldap_anonymous_search(self, ldap_anonymous_search):
        """Sets the ldap_anonymous_search of this KerberosAuthMethodInfo.


        :param ldap_anonymous_search: The ldap_anonymous_search of this KerberosAuthMethodInfo.  # noqa: E501
        :type: bool
        """

        self._ldap_anonymous_search = ldap_anonymous_search

    @property
    def ldap_bind_dn(self):
        """Gets the ldap_bind_dn of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The ldap_bind_dn of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._ldap_bind_dn

    @ldap_bind_dn.setter
    def ldap_bind_dn(self, ldap_bind_dn):
        """Sets the ldap_bind_dn of this KerberosAuthMethodInfo.


        :param ldap_bind_dn: The ldap_bind_dn of this KerberosAuthMethodInfo.  # noqa: E501
        :type: str
        """

        self._ldap_bind_dn = ldap_bind_dn

    @property
    def ldap_bind_password(self):
        """Gets the ldap_bind_password of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The ldap_bind_password of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._ldap_bind_password

    @ldap_bind_password.setter
    def ldap_bind_password(self, ldap_bind_password):
        """Sets the ldap_bind_password of this KerberosAuthMethodInfo.


        :param ldap_bind_password: The ldap_bind_password of this KerberosAuthMethodInfo.  # noqa: E501
        :type: str
        """

        self._ldap_bind_password = ldap_bind_password

    @property
    def ldap_certificate(self):
        """Gets the ldap_certificate of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The ldap_certificate of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._ldap_certificate

    @ldap_certificate.setter
    def ldap_certificate(self, ldap_certificate):
        """Sets the ldap_certificate of this KerberosAuthMethodInfo.


        :param ldap_certificate: The ldap_certificate of this KerberosAuthMethodInfo.  # noqa: E501
        :type: str
        """

        self._ldap_certificate = ldap_certificate

    @property
    def ldap_group_attr(self):
        """Gets the ldap_group_attr of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The ldap_group_attr of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._ldap_group_attr

    @ldap_group_attr.setter
    def ldap_group_attr(self, ldap_group_attr):
        """Sets the ldap_group_attr of this KerberosAuthMethodInfo.


        :param ldap_group_attr: The ldap_group_attr of this KerberosAuthMethodInfo.  # noqa: E501
        :type: str
        """

        self._ldap_group_attr = ldap_group_attr

    @property
    def ldap_group_dn(self):
        """Gets the ldap_group_dn of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The ldap_group_dn of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._ldap_group_dn

    @ldap_group_dn.setter
    def ldap_group_dn(self, ldap_group_dn):
        """Sets the ldap_group_dn of this KerberosAuthMethodInfo.


        :param ldap_group_dn: The ldap_group_dn of this KerberosAuthMethodInfo.  # noqa: E501
        :type: str
        """

        self._ldap_group_dn = ldap_group_dn

    @property
    def ldap_group_filter(self):
        """Gets the ldap_group_filter of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The ldap_group_filter of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._ldap_group_filter

    @ldap_group_filter.setter
    def ldap_group_filter(self, ldap_group_filter):
        """Sets the ldap_group_filter of this KerberosAuthMethodInfo.


        :param ldap_group_filter: The ldap_group_filter of this KerberosAuthMethodInfo.  # noqa: E501
        :type: str
        """

        self._ldap_group_filter = ldap_group_filter

    @property
    def ldap_url_address(self):
        """Gets the ldap_url_address of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The ldap_url_address of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._ldap_url_address

    @ldap_url_address.setter
    def ldap_url_address(self, ldap_url_address):
        """Sets the ldap_url_address of this KerberosAuthMethodInfo.


        :param ldap_url_address: The ldap_url_address of this KerberosAuthMethodInfo.  # noqa: E501
        :type: str
        """

        self._ldap_url_address = ldap_url_address

    @property
    def ldap_user_attr(self):
        """Gets the ldap_user_attr of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The ldap_user_attr of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._ldap_user_attr

    @ldap_user_attr.setter
    def ldap_user_attr(self, ldap_user_attr):
        """Sets the ldap_user_attr of this KerberosAuthMethodInfo.


        :param ldap_user_attr: The ldap_user_attr of this KerberosAuthMethodInfo.  # noqa: E501
        :type: str
        """

        self._ldap_user_attr = ldap_user_attr

    @property
    def ldap_user_dn(self):
        """Gets the ldap_user_dn of this KerberosAuthMethodInfo.  # noqa: E501


        :return: The ldap_user_dn of this KerberosAuthMethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._ldap_user_dn

    @ldap_user_dn.setter
    def ldap_user_dn(self, ldap_user_dn):
        """Sets the ldap_user_dn of this KerberosAuthMethodInfo.


        :param ldap_user_dn: The ldap_user_dn of this KerberosAuthMethodInfo.  # noqa: E501
        :type: str
        """

        self._ldap_user_dn = ldap_user_dn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerberosAuthMethodInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KerberosAuthMethodInfo):
            return True

        return self.to_dict() != other.to_dict()
