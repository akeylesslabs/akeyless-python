# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GatewayUpdateLogForwardingElasticsearch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_key': 'str',
        'auth_type': 'str',
        'cloud_id': 'str',
        'enable': 'str',
        'enable_tls': 'bool',
        'index': 'str',
        'json': 'bool',
        'nodes': 'str',
        'output_format': 'str',
        'password': 'str',
        'pull_interval': 'str',
        'server_type': 'str',
        'tls_certificate': 'str',
        'token': 'str',
        'uid_token': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'api_key': 'api-key',
        'auth_type': 'auth-type',
        'cloud_id': 'cloud-id',
        'enable': 'enable',
        'enable_tls': 'enable-tls',
        'index': 'index',
        'json': 'json',
        'nodes': 'nodes',
        'output_format': 'output-format',
        'password': 'password',
        'pull_interval': 'pull-interval',
        'server_type': 'server-type',
        'tls_certificate': 'tls-certificate',
        'token': 'token',
        'uid_token': 'uid-token',
        'user_name': 'user-name'
    }

    def __init__(self, api_key=None, auth_type=None, cloud_id=None, enable='true', enable_tls=None, index=None, json=False, nodes=None, output_format='text', password=None, pull_interval='10', server_type=None, tls_certificate='use-existing', token=None, uid_token=None, user_name=None, local_vars_configuration=None):  # noqa: E501
        """GatewayUpdateLogForwardingElasticsearch - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_key = None
        self._auth_type = None
        self._cloud_id = None
        self._enable = None
        self._enable_tls = None
        self._index = None
        self._json = None
        self._nodes = None
        self._output_format = None
        self._password = None
        self._pull_interval = None
        self._server_type = None
        self._tls_certificate = None
        self._token = None
        self._uid_token = None
        self._user_name = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if auth_type is not None:
            self.auth_type = auth_type
        if cloud_id is not None:
            self.cloud_id = cloud_id
        if enable is not None:
            self.enable = enable
        if enable_tls is not None:
            self.enable_tls = enable_tls
        if index is not None:
            self.index = index
        if json is not None:
            self.json = json
        if nodes is not None:
            self.nodes = nodes
        if output_format is not None:
            self.output_format = output_format
        if password is not None:
            self.password = password
        if pull_interval is not None:
            self.pull_interval = pull_interval
        if server_type is not None:
            self.server_type = server_type
        if tls_certificate is not None:
            self.tls_certificate = tls_certificate
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token
        if user_name is not None:
            self.user_name = user_name

    @property
    def api_key(self):
        """Gets the api_key of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Elasticsearch api key relevant only for api_key auth-type  # noqa: E501

        :return: The api_key of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this GatewayUpdateLogForwardingElasticsearch.

        Elasticsearch api key relevant only for api_key auth-type  # noqa: E501

        :param api_key: The api_key of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def auth_type(self):
        """Gets the auth_type of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Elasticsearch auth type [api_key/password]  # noqa: E501

        :return: The auth_type of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this GatewayUpdateLogForwardingElasticsearch.

        Elasticsearch auth type [api_key/password]  # noqa: E501

        :param auth_type: The auth_type of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._auth_type = auth_type

    @property
    def cloud_id(self):
        """Gets the cloud_id of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Elasticsearch cloud id relevant only for cloud server-type  # noqa: E501

        :return: The cloud_id of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this GatewayUpdateLogForwardingElasticsearch.

        Elasticsearch cloud id relevant only for cloud server-type  # noqa: E501

        :param cloud_id: The cloud_id of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._cloud_id = cloud_id

    @property
    def enable(self):
        """Gets the enable of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Enable Log Forwarding [true/false]  # noqa: E501

        :return: The enable of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this GatewayUpdateLogForwardingElasticsearch.

        Enable Log Forwarding [true/false]  # noqa: E501

        :param enable: The enable of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._enable = enable

    @property
    def enable_tls(self):
        """Gets the enable_tls of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Enable tls  # noqa: E501

        :return: The enable_tls of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: bool
        """
        return self._enable_tls

    @enable_tls.setter
    def enable_tls(self, enable_tls):
        """Sets the enable_tls of this GatewayUpdateLogForwardingElasticsearch.

        Enable tls  # noqa: E501

        :param enable_tls: The enable_tls of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: bool
        """

        self._enable_tls = enable_tls

    @property
    def index(self):
        """Gets the index of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Elasticsearch index  # noqa: E501

        :return: The index of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this GatewayUpdateLogForwardingElasticsearch.

        Elasticsearch index  # noqa: E501

        :param index: The index of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._index = index

    @property
    def json(self):
        """Gets the json of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this GatewayUpdateLogForwardingElasticsearch.

        Set output format to JSON  # noqa: E501

        :param json: The json of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def nodes(self):
        """Gets the nodes of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Elasticsearch nodes relevant only for nodes server-type  # noqa: E501

        :return: The nodes of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this GatewayUpdateLogForwardingElasticsearch.

        Elasticsearch nodes relevant only for nodes server-type  # noqa: E501

        :param nodes: The nodes of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._nodes = nodes

    @property
    def output_format(self):
        """Gets the output_format of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Logs format [text/json]  # noqa: E501

        :return: The output_format of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this GatewayUpdateLogForwardingElasticsearch.

        Logs format [text/json]  # noqa: E501

        :param output_format: The output_format of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._output_format = output_format

    @property
    def password(self):
        """Gets the password of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Elasticsearch password relevant only for password auth-type  # noqa: E501

        :return: The password of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this GatewayUpdateLogForwardingElasticsearch.

        Elasticsearch password relevant only for password auth-type  # noqa: E501

        :param password: The password of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def pull_interval(self):
        """Gets the pull_interval of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Pull interval in seconds  # noqa: E501

        :return: The pull_interval of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._pull_interval

    @pull_interval.setter
    def pull_interval(self, pull_interval):
        """Sets the pull_interval of this GatewayUpdateLogForwardingElasticsearch.

        Pull interval in seconds  # noqa: E501

        :param pull_interval: The pull_interval of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._pull_interval = pull_interval

    @property
    def server_type(self):
        """Gets the server_type of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Elasticsearch server type [cloud/nodes]  # noqa: E501

        :return: The server_type of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._server_type

    @server_type.setter
    def server_type(self, server_type):
        """Sets the server_type of this GatewayUpdateLogForwardingElasticsearch.

        Elasticsearch server type [cloud/nodes]  # noqa: E501

        :param server_type: The server_type of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._server_type = server_type

    @property
    def tls_certificate(self):
        """Gets the tls_certificate of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Elasticsearch tls certificate  # noqa: E501

        :return: The tls_certificate of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._tls_certificate

    @tls_certificate.setter
    def tls_certificate(self, tls_certificate):
        """Sets the tls_certificate of this GatewayUpdateLogForwardingElasticsearch.

        Elasticsearch tls certificate  # noqa: E501

        :param tls_certificate: The tls_certificate of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._tls_certificate = tls_certificate

    @property
    def token(self):
        """Gets the token of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GatewayUpdateLogForwardingElasticsearch.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this GatewayUpdateLogForwardingElasticsearch.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    @property
    def user_name(self):
        """Gets the user_name of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501

        Elasticsearch user name relevant only for password auth-type  # noqa: E501

        :return: The user_name of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this GatewayUpdateLogForwardingElasticsearch.

        Elasticsearch user name relevant only for password auth-type  # noqa: E501

        :param user_name: The user_name of this GatewayUpdateLogForwardingElasticsearch.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GatewayUpdateLogForwardingElasticsearch):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GatewayUpdateLogForwardingElasticsearch):
            return True

        return self.to_dict() != other.to_dict()
