# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayUpdateLogForwardingElasticsearch(BaseModel):
    """
    gatewayUpdateLogForwardingElasticsearch is a command that updates log forwarding config (elasticsearch target)
    """ # noqa: E501
    api_key: Optional[StrictStr] = Field(default=None, description="Elasticsearch api key relevant only for api_key auth-type", alias="api-key")
    auth_type: Optional[StrictStr] = Field(default=None, description="Elasticsearch auth type [api_key/password]", alias="auth-type")
    cloud_id: Optional[StrictStr] = Field(default=None, description="Elasticsearch cloud id relevant only for cloud server-type", alias="cloud-id")
    enable: Optional[StrictStr] = Field(default='true', description="Enable Log Forwarding [true/false]")
    enable_tls: Optional[StrictBool] = Field(default=None, description="Enable tls", alias="enable-tls")
    index: Optional[StrictStr] = Field(default=None, description="Elasticsearch index")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    nodes: Optional[StrictStr] = Field(default=None, description="Elasticsearch nodes relevant only for nodes server-type")
    output_format: Optional[StrictStr] = Field(default='text', description="Logs format [text/json]", alias="output-format")
    password: Optional[StrictStr] = Field(default=None, description="Elasticsearch password relevant only for password auth-type")
    pull_interval: Optional[StrictStr] = Field(default='10', description="Pull interval in seconds", alias="pull-interval")
    server_type: Optional[StrictStr] = Field(default=None, description="Elasticsearch server type [cloud/nodes]", alias="server-type")
    tls_certificate: Optional[StrictStr] = Field(default='use-existing', description="Elasticsearch tls certificate", alias="tls-certificate")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    user_name: Optional[StrictStr] = Field(default=None, description="Elasticsearch user name relevant only for password auth-type", alias="user-name")
    __properties: ClassVar[List[str]] = ["api-key", "auth-type", "cloud-id", "enable", "enable-tls", "index", "json", "nodes", "output-format", "password", "pull-interval", "server-type", "tls-certificate", "token", "uid-token", "user-name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayUpdateLogForwardingElasticsearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayUpdateLogForwardingElasticsearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "api-key": obj.get("api-key"),
            "auth-type": obj.get("auth-type"),
            "cloud-id": obj.get("cloud-id"),
            "enable": obj.get("enable") if obj.get("enable") is not None else 'true',
            "enable-tls": obj.get("enable-tls"),
            "index": obj.get("index"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "nodes": obj.get("nodes"),
            "output-format": obj.get("output-format") if obj.get("output-format") is not None else 'text',
            "password": obj.get("password"),
            "pull-interval": obj.get("pull-interval") if obj.get("pull-interval") is not None else '10',
            "server-type": obj.get("server-type"),
            "tls-certificate": obj.get("tls-certificate") if obj.get("tls-certificate") is not None else 'use-existing',
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "user-name": obj.get("user-name")
        })
        return _obj


