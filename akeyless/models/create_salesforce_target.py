# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateSalesforceTarget(BaseModel):
    """
    createSalesforceTarget is a command that creates a new target. [Deprecated: Use target-create-salesforce command]
    """ # noqa: E501
    app_private_key_data: Optional[StrictStr] = Field(default=None, description="Base64 encoded PEM of the connected app private key (relevant for JWT auth only)", alias="app-private-key-data")
    auth_flow: StrictStr = Field(description="type of the auth flow ('jwt' / 'user-password')", alias="auth-flow")
    ca_cert_data: Optional[StrictStr] = Field(default=None, description="Base64 encoded PEM cert to use when uploading a new key to Salesforce", alias="ca-cert-data")
    ca_cert_name: Optional[StrictStr] = Field(default=None, description="name of the certificate in Salesforce tenant to use when uploading new key", alias="ca-cert-name")
    client_id: StrictStr = Field(description="Client ID of the oauth2 app to use for connecting to Salesforce", alias="client-id")
    client_secret: Optional[StrictStr] = Field(default=None, description="Client secret of the oauth2 app to use for connecting to Salesforce (required for password flow)", alias="client-secret")
    comment: Optional[StrictStr] = Field(default=None, description="Deprecated - use description")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    email: StrictStr = Field(description="The email of the user attached to the oauth2 app used for connecting to Salesforce")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    key: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)")
    max_versions: Optional[StrictStr] = Field(default=None, description="Set the maximum number of versions, limited by the account settings defaults.", alias="max-versions")
    name: StrictStr = Field(description="Target name")
    password: Optional[StrictStr] = Field(default=None, description="The password of the user attached to the oauth2 app used for connecting to Salesforce (required for user-password flow)")
    security_token: Optional[StrictStr] = Field(default=None, description="The security token of the user attached to the oauth2 app used for connecting to Salesforce  (required for user-password flow)", alias="security-token")
    tenant_url: StrictStr = Field(description="Url of the Salesforce tenant", alias="tenant-url")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["app-private-key-data", "auth-flow", "ca-cert-data", "ca-cert-name", "client-id", "client-secret", "comment", "description", "email", "json", "key", "max-versions", "name", "password", "security-token", "tenant-url", "token", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSalesforceTarget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSalesforceTarget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "app-private-key-data": obj.get("app-private-key-data"),
            "auth-flow": obj.get("auth-flow"),
            "ca-cert-data": obj.get("ca-cert-data"),
            "ca-cert-name": obj.get("ca-cert-name"),
            "client-id": obj.get("client-id"),
            "client-secret": obj.get("client-secret"),
            "comment": obj.get("comment"),
            "description": obj.get("description"),
            "email": obj.get("email"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "key": obj.get("key"),
            "max-versions": obj.get("max-versions"),
            "name": obj.get("name"),
            "password": obj.get("password"),
            "security-token": obj.get("security-token"),
            "tenant-url": obj.get("tenant-url"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


