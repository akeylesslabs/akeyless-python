# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class TargetObjectAssociation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'assoc_id': 'str',
        'attributes': 'dict(str, str)',
        'object_id': 'str',
        'object_name': 'str',
        'object_type': 'str',
        'target_name': 'str'
    }

    attribute_map = {
        'assoc_id': 'assoc_id',
        'attributes': 'attributes',
        'object_id': 'object_id',
        'object_name': 'object_name',
        'object_type': 'object_type',
        'target_name': 'target_name'
    }

    def __init__(self, assoc_id=None, attributes=None, object_id=None, object_name=None, object_type=None, target_name=None, local_vars_configuration=None):  # noqa: E501
        """TargetObjectAssociation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._assoc_id = None
        self._attributes = None
        self._object_id = None
        self._object_name = None
        self._object_type = None
        self._target_name = None
        self.discriminator = None

        if assoc_id is not None:
            self.assoc_id = assoc_id
        if attributes is not None:
            self.attributes = attributes
        if object_id is not None:
            self.object_id = object_id
        if object_name is not None:
            self.object_name = object_name
        if object_type is not None:
            self.object_type = object_type
        if target_name is not None:
            self.target_name = target_name

    @property
    def assoc_id(self):
        """Gets the assoc_id of this TargetObjectAssociation.  # noqa: E501


        :return: The assoc_id of this TargetObjectAssociation.  # noqa: E501
        :rtype: str
        """
        return self._assoc_id

    @assoc_id.setter
    def assoc_id(self, assoc_id):
        """Sets the assoc_id of this TargetObjectAssociation.


        :param assoc_id: The assoc_id of this TargetObjectAssociation.  # noqa: E501
        :type: str
        """

        self._assoc_id = assoc_id

    @property
    def attributes(self):
        """Gets the attributes of this TargetObjectAssociation.  # noqa: E501


        :return: The attributes of this TargetObjectAssociation.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this TargetObjectAssociation.


        :param attributes: The attributes of this TargetObjectAssociation.  # noqa: E501
        :type: dict(str, str)
        """

        self._attributes = attributes

    @property
    def object_id(self):
        """Gets the object_id of this TargetObjectAssociation.  # noqa: E501


        :return: The object_id of this TargetObjectAssociation.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this TargetObjectAssociation.


        :param object_id: The object_id of this TargetObjectAssociation.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def object_name(self):
        """Gets the object_name of this TargetObjectAssociation.  # noqa: E501


        :return: The object_name of this TargetObjectAssociation.  # noqa: E501
        :rtype: str
        """
        return self._object_name

    @object_name.setter
    def object_name(self, object_name):
        """Sets the object_name of this TargetObjectAssociation.


        :param object_name: The object_name of this TargetObjectAssociation.  # noqa: E501
        :type: str
        """

        self._object_name = object_name

    @property
    def object_type(self):
        """Gets the object_type of this TargetObjectAssociation.  # noqa: E501


        :return: The object_type of this TargetObjectAssociation.  # noqa: E501
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this TargetObjectAssociation.


        :param object_type: The object_type of this TargetObjectAssociation.  # noqa: E501
        :type: str
        """

        self._object_type = object_type

    @property
    def target_name(self):
        """Gets the target_name of this TargetObjectAssociation.  # noqa: E501


        :return: The target_name of this TargetObjectAssociation.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this TargetObjectAssociation.


        :param target_name: The target_name of this TargetObjectAssociation.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TargetObjectAssociation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TargetObjectAssociation):
            return True

        return self.to_dict() != other.to_dict()
