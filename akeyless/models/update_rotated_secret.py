# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateRotatedSecret(BaseModel):
    """
    updateRotatedSecret is a command that updates rotated secret. [Deprecated: Use rotated-secret update commands]
    """ # noqa: E501
    provider_type: Optional[StrictStr] = Field(default=None, alias="ProviderType")
    add_tag: Optional[List[StrictStr]] = Field(default=None, description="List of the new tags that will be attached to this item", alias="add-tag")
    api_id: Optional[StrictStr] = Field(default=None, description="API ID to rotate", alias="api-id")
    api_key: Optional[StrictStr] = Field(default=None, description="API key to rotate", alias="api-key")
    auto_rotate: Optional[StrictStr] = Field(default=None, description="Whether to automatically rotate every --rotation-interval days, or disable existing automatic rotation [true/false]", alias="auto-rotate")
    aws_region: Optional[StrictStr] = Field(default='us-east-2', description="Aws Region (relevant only for aws)", alias="aws-region")
    custom_payload: Optional[StrictStr] = Field(default=None, description="Secret payload to be sent with rotation request (relevant only for rotator-type=custom)", alias="custom-payload")
    description: Optional[StrictStr] = Field(default='default_metadata', description="Description of the object")
    gcp_key: Optional[StrictStr] = Field(default=None, description="Base64-encoded service account private key text", alias="gcp-key")
    grace_rotation: Optional[StrictStr] = Field(default=None, description="Create a new access key without deleting the old key from AWS for backup (relevant only for AWS) [true/false]", alias="grace-rotation")
    host_provider: Optional[StrictStr] = Field(default=None, description="Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret", alias="host-provider")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    keep_prev_version: Optional[StrictStr] = Field(default=None, description="Whether to keep previous version [true/false]. If not set, use default according to account settings", alias="keep-prev-version")
    key: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)")
    name: StrictStr = Field(description="Secret name")
    new_metadata: Optional[StrictStr] = Field(default='default_metadata', description="Deprecated - use description", alias="new-metadata")
    new_name: Optional[StrictStr] = Field(default=None, description="New item name", alias="new-name")
    new_version: Optional[StrictBool] = Field(default=None, description="Deprecated", alias="new-version")
    rm_tag: Optional[List[StrictStr]] = Field(default=None, description="List of the existent tags that will be removed from this item", alias="rm-tag")
    rotate_after_disconnect: Optional[StrictStr] = Field(default='false', description="Rotate the value of the secret after SRA session ends [true/false]", alias="rotate-after-disconnect")
    rotated_password: Optional[StrictStr] = Field(default=None, description="rotated-username password", alias="rotated-password")
    rotated_username: Optional[StrictStr] = Field(default=None, description="username to be rotated, if selected use-self-creds at rotator-creds-type, this username will try to rotate it's own password, if use-target-creds is selected, target credentials will be use to rotate the rotated-password", alias="rotated-username")
    rotation_hour: Optional[StrictInt] = Field(default=None, description="The Hour of the rotation in UTC", alias="rotation-hour")
    rotation_interval: Optional[StrictStr] = Field(default=None, description="The number of days to wait between every automatic key rotation (7-365)", alias="rotation-interval")
    rotator_creds_type: Optional[StrictStr] = Field(default='use-self-creds', description="The credentials to connect with use-self-creds/use-target-creds", alias="rotator-creds-type")
    rotator_custom_cmd: Optional[StrictStr] = Field(default=None, description="\"Custom rotation command (relevant only for ssh target)", alias="rotator-custom-cmd")
    same_password: Optional[StrictStr] = Field(default=None, description="Rotate same password for each host from the Linked Target (relevant only for Linked Target)", alias="same-password")
    secure_access_allow_external_user: Optional[StrictBool] = Field(default=False, description="Allow providing external user for a domain users (relevant only for rdp)", alias="secure-access-allow-external-user")
    secure_access_aws_account_id: Optional[StrictStr] = Field(default=None, description="The AWS account id (relevant only for aws)", alias="secure-access-aws-account-id")
    secure_access_aws_native_cli: Optional[StrictBool] = Field(default=None, description="The AWS native cli", alias="secure-access-aws-native-cli")
    secure_access_bastion_issuer: Optional[StrictStr] = Field(default=None, description="Deprecated. use secure-access-certificate-issuer", alias="secure-access-bastion-issuer")
    secure_access_certificate_issuer: Optional[StrictStr] = Field(default=None, description="Path to the SSH Certificate Issuer for your Akeyless Secure Access", alias="secure-access-certificate-issuer")
    secure_access_db_name: Optional[StrictStr] = Field(default=None, description="The DB name (relevant only for DB Dynamic-Secret)", alias="secure-access-db-name")
    secure_access_db_schema: Optional[StrictStr] = Field(default=None, description="The db schema (relevant only for mssql or postgresql)", alias="secure-access-db-schema")
    secure_access_disable_concurrent_connections: Optional[StrictBool] = Field(default=None, description="Enable this flag to prevent simultaneous use of the same secret", alias="secure-access-disable-concurrent-connections")
    secure_access_enable: Optional[StrictStr] = Field(default=None, description="Enable/Disable secure remote access [true/false]", alias="secure-access-enable")
    secure_access_host: Optional[List[StrictStr]] = Field(default=None, description="Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)", alias="secure-access-host")
    secure_access_rdp_domain: Optional[StrictStr] = Field(default=None, description="Required when the Dynamic Secret is used for a domain user (relevant only for RDP Dynamic-Secret)", alias="secure-access-rdp-domain")
    secure_access_rdp_user: Optional[StrictStr] = Field(default=None, description="Override the RDP Domain username (relevant only for rdp)", alias="secure-access-rdp-user")
    secure_access_url: Optional[StrictStr] = Field(default=None, description="Destination URL to inject secrets", alias="secure-access-url")
    secure_access_web: Optional[StrictBool] = Field(default=False, description="Enable Web Secure Remote Access", alias="secure-access-web")
    secure_access_web_browsing: Optional[StrictBool] = Field(default=False, description="Secure browser viaAkeyless's Secure Remote Access (SRA) (relevant only for aws or azure)", alias="secure-access-web-browsing")
    secure_access_web_proxy: Optional[StrictBool] = Field(default=False, description="Web-Proxy via Akeyless's Secure Remote Access (SRA) (relevant only for aws or azure)", alias="secure-access-web-proxy")
    ssh_password: Optional[StrictStr] = Field(default=None, description="Deprecated: use RotatedPassword", alias="ssh-password")
    ssh_username: Optional[StrictStr] = Field(default=None, description="Deprecated: use RotatedUser", alias="ssh-username")
    storage_account_key_name: Optional[StrictStr] = Field(default=None, description="The name of the storage account key to rotate [key1/key2/kerb1/kerb2]", alias="storage-account-key-name")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    user_attribute: Optional[StrictStr] = Field(default='cn', description="LDAP User Attribute, Default value \"cn\"", alias="user-attribute")
    user_dn: Optional[StrictStr] = Field(default=None, description="LDAP User Base DN", alias="user-dn")
    __properties: ClassVar[List[str]] = ["ProviderType", "add-tag", "api-id", "api-key", "auto-rotate", "aws-region", "custom-payload", "description", "gcp-key", "grace-rotation", "host-provider", "json", "keep-prev-version", "key", "name", "new-metadata", "new-name", "new-version", "rm-tag", "rotate-after-disconnect", "rotated-password", "rotated-username", "rotation-hour", "rotation-interval", "rotator-creds-type", "rotator-custom-cmd", "same-password", "secure-access-allow-external-user", "secure-access-aws-account-id", "secure-access-aws-native-cli", "secure-access-bastion-issuer", "secure-access-certificate-issuer", "secure-access-db-name", "secure-access-db-schema", "secure-access-disable-concurrent-connections", "secure-access-enable", "secure-access-host", "secure-access-rdp-domain", "secure-access-rdp-user", "secure-access-url", "secure-access-web", "secure-access-web-browsing", "secure-access-web-proxy", "ssh-password", "ssh-username", "storage-account-key-name", "token", "uid-token", "user-attribute", "user-dn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateRotatedSecret from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateRotatedSecret from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ProviderType": obj.get("ProviderType"),
            "add-tag": obj.get("add-tag"),
            "api-id": obj.get("api-id"),
            "api-key": obj.get("api-key"),
            "auto-rotate": obj.get("auto-rotate"),
            "aws-region": obj.get("aws-region") if obj.get("aws-region") is not None else 'us-east-2',
            "custom-payload": obj.get("custom-payload"),
            "description": obj.get("description") if obj.get("description") is not None else 'default_metadata',
            "gcp-key": obj.get("gcp-key"),
            "grace-rotation": obj.get("grace-rotation"),
            "host-provider": obj.get("host-provider"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "keep-prev-version": obj.get("keep-prev-version"),
            "key": obj.get("key"),
            "name": obj.get("name"),
            "new-metadata": obj.get("new-metadata") if obj.get("new-metadata") is not None else 'default_metadata',
            "new-name": obj.get("new-name"),
            "new-version": obj.get("new-version"),
            "rm-tag": obj.get("rm-tag"),
            "rotate-after-disconnect": obj.get("rotate-after-disconnect") if obj.get("rotate-after-disconnect") is not None else 'false',
            "rotated-password": obj.get("rotated-password"),
            "rotated-username": obj.get("rotated-username"),
            "rotation-hour": obj.get("rotation-hour"),
            "rotation-interval": obj.get("rotation-interval"),
            "rotator-creds-type": obj.get("rotator-creds-type") if obj.get("rotator-creds-type") is not None else 'use-self-creds',
            "rotator-custom-cmd": obj.get("rotator-custom-cmd"),
            "same-password": obj.get("same-password"),
            "secure-access-allow-external-user": obj.get("secure-access-allow-external-user") if obj.get("secure-access-allow-external-user") is not None else False,
            "secure-access-aws-account-id": obj.get("secure-access-aws-account-id"),
            "secure-access-aws-native-cli": obj.get("secure-access-aws-native-cli"),
            "secure-access-bastion-issuer": obj.get("secure-access-bastion-issuer"),
            "secure-access-certificate-issuer": obj.get("secure-access-certificate-issuer"),
            "secure-access-db-name": obj.get("secure-access-db-name"),
            "secure-access-db-schema": obj.get("secure-access-db-schema"),
            "secure-access-disable-concurrent-connections": obj.get("secure-access-disable-concurrent-connections"),
            "secure-access-enable": obj.get("secure-access-enable"),
            "secure-access-host": obj.get("secure-access-host"),
            "secure-access-rdp-domain": obj.get("secure-access-rdp-domain"),
            "secure-access-rdp-user": obj.get("secure-access-rdp-user"),
            "secure-access-url": obj.get("secure-access-url"),
            "secure-access-web": obj.get("secure-access-web") if obj.get("secure-access-web") is not None else False,
            "secure-access-web-browsing": obj.get("secure-access-web-browsing") if obj.get("secure-access-web-browsing") is not None else False,
            "secure-access-web-proxy": obj.get("secure-access-web-proxy") if obj.get("secure-access-web-proxy") is not None else False,
            "ssh-password": obj.get("ssh-password"),
            "ssh-username": obj.get("ssh-username"),
            "storage-account-key-name": obj.get("storage-account-key-name"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "user-attribute": obj.get("user-attribute") if obj.get("user-attribute") is not None else 'cn',
            "user-dn": obj.get("user-dn")
        })
        return _obj


