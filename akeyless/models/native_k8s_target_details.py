# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class NativeK8sTargetDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'k8s_auth_type': 'str',
        'k8s_bearer_token': 'str',
        'k8s_client_cert_data': 'str',
        'k8s_client_key_data': 'str',
        'k8s_cluster_ca_certificate': 'str',
        'k8s_cluster_endpoint': 'str',
        'use_gw_service_account': 'bool'
    }

    attribute_map = {
        'k8s_auth_type': 'k8s_auth_type',
        'k8s_bearer_token': 'k8s_bearer_token',
        'k8s_client_cert_data': 'k8s_client_cert_data',
        'k8s_client_key_data': 'k8s_client_key_data',
        'k8s_cluster_ca_certificate': 'k8s_cluster_ca_certificate',
        'k8s_cluster_endpoint': 'k8s_cluster_endpoint',
        'use_gw_service_account': 'use_gw_service_account'
    }

    def __init__(self, k8s_auth_type=None, k8s_bearer_token=None, k8s_client_cert_data=None, k8s_client_key_data=None, k8s_cluster_ca_certificate=None, k8s_cluster_endpoint=None, use_gw_service_account=None, local_vars_configuration=None):  # noqa: E501
        """NativeK8sTargetDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._k8s_auth_type = None
        self._k8s_bearer_token = None
        self._k8s_client_cert_data = None
        self._k8s_client_key_data = None
        self._k8s_cluster_ca_certificate = None
        self._k8s_cluster_endpoint = None
        self._use_gw_service_account = None
        self.discriminator = None

        if k8s_auth_type is not None:
            self.k8s_auth_type = k8s_auth_type
        if k8s_bearer_token is not None:
            self.k8s_bearer_token = k8s_bearer_token
        if k8s_client_cert_data is not None:
            self.k8s_client_cert_data = k8s_client_cert_data
        if k8s_client_key_data is not None:
            self.k8s_client_key_data = k8s_client_key_data
        if k8s_cluster_ca_certificate is not None:
            self.k8s_cluster_ca_certificate = k8s_cluster_ca_certificate
        if k8s_cluster_endpoint is not None:
            self.k8s_cluster_endpoint = k8s_cluster_endpoint
        if use_gw_service_account is not None:
            self.use_gw_service_account = use_gw_service_account

    @property
    def k8s_auth_type(self):
        """Gets the k8s_auth_type of this NativeK8sTargetDetails.  # noqa: E501


        :return: The k8s_auth_type of this NativeK8sTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_auth_type

    @k8s_auth_type.setter
    def k8s_auth_type(self, k8s_auth_type):
        """Sets the k8s_auth_type of this NativeK8sTargetDetails.


        :param k8s_auth_type: The k8s_auth_type of this NativeK8sTargetDetails.  # noqa: E501
        :type: str
        """

        self._k8s_auth_type = k8s_auth_type

    @property
    def k8s_bearer_token(self):
        """Gets the k8s_bearer_token of this NativeK8sTargetDetails.  # noqa: E501


        :return: The k8s_bearer_token of this NativeK8sTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_bearer_token

    @k8s_bearer_token.setter
    def k8s_bearer_token(self, k8s_bearer_token):
        """Sets the k8s_bearer_token of this NativeK8sTargetDetails.


        :param k8s_bearer_token: The k8s_bearer_token of this NativeK8sTargetDetails.  # noqa: E501
        :type: str
        """

        self._k8s_bearer_token = k8s_bearer_token

    @property
    def k8s_client_cert_data(self):
        """Gets the k8s_client_cert_data of this NativeK8sTargetDetails.  # noqa: E501

        For K8s Client certificates authentication  # noqa: E501

        :return: The k8s_client_cert_data of this NativeK8sTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_client_cert_data

    @k8s_client_cert_data.setter
    def k8s_client_cert_data(self, k8s_client_cert_data):
        """Sets the k8s_client_cert_data of this NativeK8sTargetDetails.

        For K8s Client certificates authentication  # noqa: E501

        :param k8s_client_cert_data: The k8s_client_cert_data of this NativeK8sTargetDetails.  # noqa: E501
        :type: str
        """

        self._k8s_client_cert_data = k8s_client_cert_data

    @property
    def k8s_client_key_data(self):
        """Gets the k8s_client_key_data of this NativeK8sTargetDetails.  # noqa: E501


        :return: The k8s_client_key_data of this NativeK8sTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_client_key_data

    @k8s_client_key_data.setter
    def k8s_client_key_data(self, k8s_client_key_data):
        """Sets the k8s_client_key_data of this NativeK8sTargetDetails.


        :param k8s_client_key_data: The k8s_client_key_data of this NativeK8sTargetDetails.  # noqa: E501
        :type: str
        """

        self._k8s_client_key_data = k8s_client_key_data

    @property
    def k8s_cluster_ca_certificate(self):
        """Gets the k8s_cluster_ca_certificate of this NativeK8sTargetDetails.  # noqa: E501


        :return: The k8s_cluster_ca_certificate of this NativeK8sTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_cluster_ca_certificate

    @k8s_cluster_ca_certificate.setter
    def k8s_cluster_ca_certificate(self, k8s_cluster_ca_certificate):
        """Sets the k8s_cluster_ca_certificate of this NativeK8sTargetDetails.


        :param k8s_cluster_ca_certificate: The k8s_cluster_ca_certificate of this NativeK8sTargetDetails.  # noqa: E501
        :type: str
        """

        self._k8s_cluster_ca_certificate = k8s_cluster_ca_certificate

    @property
    def k8s_cluster_endpoint(self):
        """Gets the k8s_cluster_endpoint of this NativeK8sTargetDetails.  # noqa: E501


        :return: The k8s_cluster_endpoint of this NativeK8sTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._k8s_cluster_endpoint

    @k8s_cluster_endpoint.setter
    def k8s_cluster_endpoint(self, k8s_cluster_endpoint):
        """Sets the k8s_cluster_endpoint of this NativeK8sTargetDetails.


        :param k8s_cluster_endpoint: The k8s_cluster_endpoint of this NativeK8sTargetDetails.  # noqa: E501
        :type: str
        """

        self._k8s_cluster_endpoint = k8s_cluster_endpoint

    @property
    def use_gw_service_account(self):
        """Gets the use_gw_service_account of this NativeK8sTargetDetails.  # noqa: E501


        :return: The use_gw_service_account of this NativeK8sTargetDetails.  # noqa: E501
        :rtype: bool
        """
        return self._use_gw_service_account

    @use_gw_service_account.setter
    def use_gw_service_account(self, use_gw_service_account):
        """Sets the use_gw_service_account of this NativeK8sTargetDetails.


        :param use_gw_service_account: The use_gw_service_account of this NativeK8sTargetDetails.  # noqa: E501
        :type: bool
        """

        self._use_gw_service_account = use_gw_service_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NativeK8sTargetDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NativeK8sTargetDetails):
            return True

        return self.to_dict() != other.to_dict()
