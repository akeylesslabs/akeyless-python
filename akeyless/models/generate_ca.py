# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GenerateCA(BaseModel):
    """
    GenerateCA is a command that creates a new PKI CA and Intermediate issuers
    """ # noqa: E501
    alg: Optional[StrictStr] = None
    allowed_domains: StrictStr = Field(description="A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)", alias="allowed-domains")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    extended_key_usage: Optional[StrictStr] = Field(default='serverauth,clientauth', description="A comma sepereted list of extended key usage for the intermediate (serverauth / clientauth / codesigning)", alias="extended-key-usage")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    key_type: Optional[StrictStr] = Field(default=None, alias="key-type")
    max_path_len: Optional[StrictInt] = Field(default=1, description="The maximum number of intermediate certificates that can appear in a certification path", alias="max-path-len")
    pki_chain_name: StrictStr = Field(description="PKI chain name", alias="pki-chain-name")
    protection_key_name: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the secrets values (if empty, the account default protectionKey key will be used)", alias="protection-key-name")
    split_level: Optional[StrictInt] = Field(default=3, description="The number of fragments that the item will be split into", alias="split-level")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    ttl: StrictStr = Field(description="The maximum requested Time To Live for issued certificate by default in seconds, supported formats are s,m,h,d")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["alg", "allowed-domains", "delete_protection", "extended-key-usage", "json", "key-type", "max-path-len", "pki-chain-name", "protection-key-name", "split-level", "token", "ttl", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GenerateCA from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GenerateCA from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alg": obj.get("alg"),
            "allowed-domains": obj.get("allowed-domains"),
            "delete_protection": obj.get("delete_protection"),
            "extended-key-usage": obj.get("extended-key-usage") if obj.get("extended-key-usage") is not None else 'serverauth,clientauth',
            "json": obj.get("json") if obj.get("json") is not None else False,
            "key-type": obj.get("key-type"),
            "max-path-len": obj.get("max-path-len") if obj.get("max-path-len") is not None else 1,
            "pki-chain-name": obj.get("pki-chain-name"),
            "protection-key-name": obj.get("protection-key-name"),
            "split-level": obj.get("split-level") if obj.get("split-level") is not None else 3,
            "token": obj.get("token"),
            "ttl": obj.get("ttl"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


