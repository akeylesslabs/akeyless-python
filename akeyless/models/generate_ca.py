# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GenerateCA(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'alg': 'str',
        'allowed_domains': 'str',
        'delete_protection': 'str',
        'extended_key_usage': 'str',
        'json': 'bool',
        'key_type': 'str',
        'max_path_len': 'int',
        'pki_chain_name': 'str',
        'protection_key_name': 'str',
        'split_level': 'int',
        'token': 'str',
        'ttl': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'alg': 'alg',
        'allowed_domains': 'allowed-domains',
        'delete_protection': 'delete_protection',
        'extended_key_usage': 'extended-key-usage',
        'json': 'json',
        'key_type': 'key-type',
        'max_path_len': 'max-path-len',
        'pki_chain_name': 'pki-chain-name',
        'protection_key_name': 'protection-key-name',
        'split_level': 'split-level',
        'token': 'token',
        'ttl': 'ttl',
        'uid_token': 'uid-token'
    }

    def __init__(self, alg=None, allowed_domains=None, delete_protection=None, extended_key_usage='serverauth,clientauth', json=False, key_type=None, max_path_len=1, pki_chain_name=None, protection_key_name=None, split_level=3, token=None, ttl=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """GenerateCA - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._alg = None
        self._allowed_domains = None
        self._delete_protection = None
        self._extended_key_usage = None
        self._json = None
        self._key_type = None
        self._max_path_len = None
        self._pki_chain_name = None
        self._protection_key_name = None
        self._split_level = None
        self._token = None
        self._ttl = None
        self._uid_token = None
        self.discriminator = None

        if alg is not None:
            self.alg = alg
        self.allowed_domains = allowed_domains
        if delete_protection is not None:
            self.delete_protection = delete_protection
        if extended_key_usage is not None:
            self.extended_key_usage = extended_key_usage
        if json is not None:
            self.json = json
        if key_type is not None:
            self.key_type = key_type
        if max_path_len is not None:
            self.max_path_len = max_path_len
        self.pki_chain_name = pki_chain_name
        if protection_key_name is not None:
            self.protection_key_name = protection_key_name
        if split_level is not None:
            self.split_level = split_level
        if token is not None:
            self.token = token
        self.ttl = ttl
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def alg(self):
        """Gets the alg of this GenerateCA.  # noqa: E501


        :return: The alg of this GenerateCA.  # noqa: E501
        :rtype: str
        """
        return self._alg

    @alg.setter
    def alg(self, alg):
        """Sets the alg of this GenerateCA.


        :param alg: The alg of this GenerateCA.  # noqa: E501
        :type: str
        """

        self._alg = alg

    @property
    def allowed_domains(self):
        """Gets the allowed_domains of this GenerateCA.  # noqa: E501

        A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)  # noqa: E501

        :return: The allowed_domains of this GenerateCA.  # noqa: E501
        :rtype: str
        """
        return self._allowed_domains

    @allowed_domains.setter
    def allowed_domains(self, allowed_domains):
        """Sets the allowed_domains of this GenerateCA.

        A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)  # noqa: E501

        :param allowed_domains: The allowed_domains of this GenerateCA.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and allowed_domains is None:  # noqa: E501
            raise ValueError("Invalid value for `allowed_domains`, must not be `None`")  # noqa: E501

        self._allowed_domains = allowed_domains

    @property
    def delete_protection(self):
        """Gets the delete_protection of this GenerateCA.  # noqa: E501

        Protection from accidental deletion of this object [true/false]  # noqa: E501

        :return: The delete_protection of this GenerateCA.  # noqa: E501
        :rtype: str
        """
        return self._delete_protection

    @delete_protection.setter
    def delete_protection(self, delete_protection):
        """Sets the delete_protection of this GenerateCA.

        Protection from accidental deletion of this object [true/false]  # noqa: E501

        :param delete_protection: The delete_protection of this GenerateCA.  # noqa: E501
        :type: str
        """

        self._delete_protection = delete_protection

    @property
    def extended_key_usage(self):
        """Gets the extended_key_usage of this GenerateCA.  # noqa: E501

        A comma sepereted list of extended key usage for the intermediate (serverauth / clientauth / codesigning)  # noqa: E501

        :return: The extended_key_usage of this GenerateCA.  # noqa: E501
        :rtype: str
        """
        return self._extended_key_usage

    @extended_key_usage.setter
    def extended_key_usage(self, extended_key_usage):
        """Sets the extended_key_usage of this GenerateCA.

        A comma sepereted list of extended key usage for the intermediate (serverauth / clientauth / codesigning)  # noqa: E501

        :param extended_key_usage: The extended_key_usage of this GenerateCA.  # noqa: E501
        :type: str
        """

        self._extended_key_usage = extended_key_usage

    @property
    def json(self):
        """Gets the json of this GenerateCA.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this GenerateCA.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this GenerateCA.

        Set output format to JSON  # noqa: E501

        :param json: The json of this GenerateCA.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def key_type(self):
        """Gets the key_type of this GenerateCA.  # noqa: E501


        :return: The key_type of this GenerateCA.  # noqa: E501
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this GenerateCA.


        :param key_type: The key_type of this GenerateCA.  # noqa: E501
        :type: str
        """

        self._key_type = key_type

    @property
    def max_path_len(self):
        """Gets the max_path_len of this GenerateCA.  # noqa: E501

        The maximum number of intermediate certificates that can appear in a certification path  # noqa: E501

        :return: The max_path_len of this GenerateCA.  # noqa: E501
        :rtype: int
        """
        return self._max_path_len

    @max_path_len.setter
    def max_path_len(self, max_path_len):
        """Sets the max_path_len of this GenerateCA.

        The maximum number of intermediate certificates that can appear in a certification path  # noqa: E501

        :param max_path_len: The max_path_len of this GenerateCA.  # noqa: E501
        :type: int
        """

        self._max_path_len = max_path_len

    @property
    def pki_chain_name(self):
        """Gets the pki_chain_name of this GenerateCA.  # noqa: E501

        PKI chain name  # noqa: E501

        :return: The pki_chain_name of this GenerateCA.  # noqa: E501
        :rtype: str
        """
        return self._pki_chain_name

    @pki_chain_name.setter
    def pki_chain_name(self, pki_chain_name):
        """Sets the pki_chain_name of this GenerateCA.

        PKI chain name  # noqa: E501

        :param pki_chain_name: The pki_chain_name of this GenerateCA.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and pki_chain_name is None:  # noqa: E501
            raise ValueError("Invalid value for `pki_chain_name`, must not be `None`")  # noqa: E501

        self._pki_chain_name = pki_chain_name

    @property
    def protection_key_name(self):
        """Gets the protection_key_name of this GenerateCA.  # noqa: E501

        The name of a key that used to encrypt the secrets values (if empty, the account default protectionKey key will be used)  # noqa: E501

        :return: The protection_key_name of this GenerateCA.  # noqa: E501
        :rtype: str
        """
        return self._protection_key_name

    @protection_key_name.setter
    def protection_key_name(self, protection_key_name):
        """Sets the protection_key_name of this GenerateCA.

        The name of a key that used to encrypt the secrets values (if empty, the account default protectionKey key will be used)  # noqa: E501

        :param protection_key_name: The protection_key_name of this GenerateCA.  # noqa: E501
        :type: str
        """

        self._protection_key_name = protection_key_name

    @property
    def split_level(self):
        """Gets the split_level of this GenerateCA.  # noqa: E501

        The number of fragments that the item will be split into  # noqa: E501

        :return: The split_level of this GenerateCA.  # noqa: E501
        :rtype: int
        """
        return self._split_level

    @split_level.setter
    def split_level(self, split_level):
        """Sets the split_level of this GenerateCA.

        The number of fragments that the item will be split into  # noqa: E501

        :param split_level: The split_level of this GenerateCA.  # noqa: E501
        :type: int
        """

        self._split_level = split_level

    @property
    def token(self):
        """Gets the token of this GenerateCA.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this GenerateCA.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GenerateCA.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this GenerateCA.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def ttl(self):
        """Gets the ttl of this GenerateCA.  # noqa: E501

        The maximum requested Time To Live for issued certificate by default in seconds, supported formats are s,m,h,d  # noqa: E501

        :return: The ttl of this GenerateCA.  # noqa: E501
        :rtype: str
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this GenerateCA.

        The maximum requested Time To Live for issued certificate by default in seconds, supported formats are s,m,h,d  # noqa: E501

        :param ttl: The ttl of this GenerateCA.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and ttl is None:  # noqa: E501
            raise ValueError("Invalid value for `ttl`, must not be `None`")  # noqa: E501

        self._ttl = ttl

    @property
    def uid_token(self):
        """Gets the uid_token of this GenerateCA.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this GenerateCA.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this GenerateCA.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this GenerateCA.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateCA):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateCA):
            return True

        return self.to_dict() != other.to_dict()
