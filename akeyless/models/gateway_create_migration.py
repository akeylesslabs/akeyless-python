# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GatewayCreateMigration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws_key': 'str',
        'aws_key_id': 'str',
        'aws_region': 'str',
        'azure_client_id': 'str',
        'azure_kv_name': 'str',
        'azure_secret': 'str',
        'azure_tenant_id': 'str',
        'hashi_json': 'str',
        'hashi_ns': 'list[str]',
        'hashi_token': 'str',
        'hashi_url': 'str',
        'name': 'str',
        'protection_key': 'str',
        'target_location': 'str',
        'token': 'str',
        'type': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'aws_key': 'aws-key',
        'aws_key_id': 'aws-key-id',
        'aws_region': 'aws-region',
        'azure_client_id': 'azure-client-id',
        'azure_kv_name': 'azure-kv-name',
        'azure_secret': 'azure-secret',
        'azure_tenant_id': 'azure-tenant-id',
        'hashi_json': 'hashi-json',
        'hashi_ns': 'hashi-ns',
        'hashi_token': 'hashi-token',
        'hashi_url': 'hashi-url',
        'name': 'name',
        'protection_key': 'protection-key',
        'target_location': 'target-location',
        'token': 'token',
        'type': 'type',
        'uid_token': 'uid-token'
    }

    def __init__(self, aws_key=None, aws_key_id=None, aws_region=None, azure_client_id=None, azure_kv_name=None, azure_secret=None, azure_tenant_id=None, hashi_json=None, hashi_ns=None, hashi_token=None, hashi_url=None, name=None, protection_key=None, target_location=None, token=None, type=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """GatewayCreateMigration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aws_key = None
        self._aws_key_id = None
        self._aws_region = None
        self._azure_client_id = None
        self._azure_kv_name = None
        self._azure_secret = None
        self._azure_tenant_id = None
        self._hashi_json = None
        self._hashi_ns = None
        self._hashi_token = None
        self._hashi_url = None
        self._name = None
        self._protection_key = None
        self._target_location = None
        self._token = None
        self._type = None
        self._uid_token = None
        self.discriminator = None

        if aws_key is not None:
            self.aws_key = aws_key
        if aws_key_id is not None:
            self.aws_key_id = aws_key_id
        if aws_region is not None:
            self.aws_region = aws_region
        if azure_client_id is not None:
            self.azure_client_id = azure_client_id
        if azure_kv_name is not None:
            self.azure_kv_name = azure_kv_name
        if azure_secret is not None:
            self.azure_secret = azure_secret
        if azure_tenant_id is not None:
            self.azure_tenant_id = azure_tenant_id
        if hashi_json is not None:
            self.hashi_json = hashi_json
        if hashi_ns is not None:
            self.hashi_ns = hashi_ns
        if hashi_token is not None:
            self.hashi_token = hashi_token
        if hashi_url is not None:
            self.hashi_url = hashi_url
        self.name = name
        if protection_key is not None:
            self.protection_key = protection_key
        if target_location is not None:
            self.target_location = target_location
        if token is not None:
            self.token = token
        if type is not None:
            self.type = type
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def aws_key(self):
        """Gets the aws_key of this GatewayCreateMigration.  # noqa: E501


        :return: The aws_key of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._aws_key

    @aws_key.setter
    def aws_key(self, aws_key):
        """Sets the aws_key of this GatewayCreateMigration.


        :param aws_key: The aws_key of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._aws_key = aws_key

    @property
    def aws_key_id(self):
        """Gets the aws_key_id of this GatewayCreateMigration.  # noqa: E501


        :return: The aws_key_id of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._aws_key_id

    @aws_key_id.setter
    def aws_key_id(self, aws_key_id):
        """Sets the aws_key_id of this GatewayCreateMigration.


        :param aws_key_id: The aws_key_id of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._aws_key_id = aws_key_id

    @property
    def aws_region(self):
        """Gets the aws_region of this GatewayCreateMigration.  # noqa: E501


        :return: The aws_region of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """Sets the aws_region of this GatewayCreateMigration.


        :param aws_region: The aws_region of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._aws_region = aws_region

    @property
    def azure_client_id(self):
        """Gets the azure_client_id of this GatewayCreateMigration.  # noqa: E501


        :return: The azure_client_id of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._azure_client_id

    @azure_client_id.setter
    def azure_client_id(self, azure_client_id):
        """Sets the azure_client_id of this GatewayCreateMigration.


        :param azure_client_id: The azure_client_id of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._azure_client_id = azure_client_id

    @property
    def azure_kv_name(self):
        """Gets the azure_kv_name of this GatewayCreateMigration.  # noqa: E501


        :return: The azure_kv_name of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._azure_kv_name

    @azure_kv_name.setter
    def azure_kv_name(self, azure_kv_name):
        """Sets the azure_kv_name of this GatewayCreateMigration.


        :param azure_kv_name: The azure_kv_name of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._azure_kv_name = azure_kv_name

    @property
    def azure_secret(self):
        """Gets the azure_secret of this GatewayCreateMigration.  # noqa: E501


        :return: The azure_secret of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._azure_secret

    @azure_secret.setter
    def azure_secret(self, azure_secret):
        """Sets the azure_secret of this GatewayCreateMigration.


        :param azure_secret: The azure_secret of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._azure_secret = azure_secret

    @property
    def azure_tenant_id(self):
        """Gets the azure_tenant_id of this GatewayCreateMigration.  # noqa: E501


        :return: The azure_tenant_id of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._azure_tenant_id

    @azure_tenant_id.setter
    def azure_tenant_id(self, azure_tenant_id):
        """Sets the azure_tenant_id of this GatewayCreateMigration.


        :param azure_tenant_id: The azure_tenant_id of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._azure_tenant_id = azure_tenant_id

    @property
    def hashi_json(self):
        """Gets the hashi_json of this GatewayCreateMigration.  # noqa: E501


        :return: The hashi_json of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._hashi_json

    @hashi_json.setter
    def hashi_json(self, hashi_json):
        """Sets the hashi_json of this GatewayCreateMigration.


        :param hashi_json: The hashi_json of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._hashi_json = hashi_json

    @property
    def hashi_ns(self):
        """Gets the hashi_ns of this GatewayCreateMigration.  # noqa: E501


        :return: The hashi_ns of this GatewayCreateMigration.  # noqa: E501
        :rtype: list[str]
        """
        return self._hashi_ns

    @hashi_ns.setter
    def hashi_ns(self, hashi_ns):
        """Sets the hashi_ns of this GatewayCreateMigration.


        :param hashi_ns: The hashi_ns of this GatewayCreateMigration.  # noqa: E501
        :type: list[str]
        """

        self._hashi_ns = hashi_ns

    @property
    def hashi_token(self):
        """Gets the hashi_token of this GatewayCreateMigration.  # noqa: E501


        :return: The hashi_token of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._hashi_token

    @hashi_token.setter
    def hashi_token(self, hashi_token):
        """Sets the hashi_token of this GatewayCreateMigration.


        :param hashi_token: The hashi_token of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._hashi_token = hashi_token

    @property
    def hashi_url(self):
        """Gets the hashi_url of this GatewayCreateMigration.  # noqa: E501


        :return: The hashi_url of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._hashi_url

    @hashi_url.setter
    def hashi_url(self, hashi_url):
        """Sets the hashi_url of this GatewayCreateMigration.


        :param hashi_url: The hashi_url of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._hashi_url = hashi_url

    @property
    def name(self):
        """Gets the name of this GatewayCreateMigration.  # noqa: E501

        Migration name  # noqa: E501

        :return: The name of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GatewayCreateMigration.

        Migration name  # noqa: E501

        :param name: The name of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def protection_key(self):
        """Gets the protection_key of this GatewayCreateMigration.  # noqa: E501


        :return: The protection_key of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._protection_key

    @protection_key.setter
    def protection_key(self, protection_key):
        """Sets the protection_key of this GatewayCreateMigration.


        :param protection_key: The protection_key of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._protection_key = protection_key

    @property
    def target_location(self):
        """Gets the target_location of this GatewayCreateMigration.  # noqa: E501


        :return: The target_location of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._target_location

    @target_location.setter
    def target_location(self, target_location):
        """Sets the target_location of this GatewayCreateMigration.


        :param target_location: The target_location of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._target_location = target_location

    @property
    def token(self):
        """Gets the token of this GatewayCreateMigration.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GatewayCreateMigration.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def type(self):
        """Gets the type of this GatewayCreateMigration.  # noqa: E501


        :return: The type of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GatewayCreateMigration.


        :param type: The type of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def uid_token(self):
        """Gets the uid_token of this GatewayCreateMigration.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this GatewayCreateMigration.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this GatewayCreateMigration.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this GatewayCreateMigration.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GatewayCreateMigration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GatewayCreateMigration):
            return True

        return self.to_dict() != other.to_dict()
