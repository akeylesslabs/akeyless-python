# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateEventForwarder(BaseModel):
    """
    createEventForwarder is a command that creates a new event forwarder [Deprecated - please use event-forwarder-create-* command]
    """ # noqa: E501
    admin_name: Optional[StrictStr] = Field(default=None, description="Workstation Admin Name", alias="admin-name")
    admin_pwd: Optional[StrictStr] = Field(default=None, description="Workstation Admin password", alias="admin-pwd")
    app_private_key_base64: Optional[StrictStr] = Field(default=None, description="The RSA Private Key PEM formatted in base64 to use when connecting to ServiceNow with jwt authentication", alias="app-private-key-base64")
    auth_type: Optional[StrictStr] = Field(default='user-pass', description="The authentication type to use when connecting to ServiceNow (user-pass / jwt)", alias="auth-type")
    client_id: Optional[StrictStr] = Field(default=None, description="The client ID to use when connecting to ServiceNow with jwt authentication", alias="client-id")
    client_secret: Optional[StrictStr] = Field(default=None, description="The client secret to use when connecting to ServiceNow with jwt authentication", alias="client-secret")
    comment: Optional[StrictStr] = Field(default=None, description="Deprecated - use description")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    email_to: Optional[StrictStr] = Field(default=None, description="A comma seperated list of email addresses to send event to (relevant only for \"email\" Event Forwarder)", alias="email-to")
    event_source_locations: List[StrictStr] = Field(description="Event sources", alias="event-source-locations")
    event_source_type: Optional[StrictStr] = Field(default='item', description="Event Source type [item, target, auth_method, gateway]", alias="event-source-type")
    event_types: Optional[List[StrictStr]] = Field(default=None, description="List of event types to notify about [request-access, certificate-pending-expiration, certificate-expired, certificate-provisioning-success, certificate-provisioning-failure, auth-method-pending-expiration, auth-method-expired, rotated-secret-success, rotated-secret-failure, dynamic-secret-failure, multi-auth-failure, uid-rotation-failure, apply-justification, email-auth-method-approved, usage, rotation-usage, gateway-inactive, static-secret-updated]", alias="event-types")
    every: Optional[StrictStr] = Field(default=None, description="Rate of periodic runner repetition in hours")
    forwarder_type: StrictStr = Field(alias="forwarder-type")
    host: Optional[StrictStr] = Field(default=None, description="Workstation Host")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    key: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the EventForwarder secret value (if empty, the account default protectionKey key will be used)")
    name: StrictStr = Field(description="EventForwarder name")
    runner_type: StrictStr = Field(alias="runner-type")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    user_email: Optional[StrictStr] = Field(default=None, description="The user email to use when connecting to ServiceNow with jwt authentication", alias="user-email")
    __properties: ClassVar[List[str]] = ["admin-name", "admin-pwd", "app-private-key-base64", "auth-type", "client-id", "client-secret", "comment", "description", "email-to", "event-source-locations", "event-source-type", "event-types", "every", "forwarder-type", "host", "json", "key", "name", "runner-type", "token", "uid-token", "user-email"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateEventForwarder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateEventForwarder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admin-name": obj.get("admin-name"),
            "admin-pwd": obj.get("admin-pwd"),
            "app-private-key-base64": obj.get("app-private-key-base64"),
            "auth-type": obj.get("auth-type") if obj.get("auth-type") is not None else 'user-pass',
            "client-id": obj.get("client-id"),
            "client-secret": obj.get("client-secret"),
            "comment": obj.get("comment"),
            "description": obj.get("description"),
            "email-to": obj.get("email-to"),
            "event-source-locations": obj.get("event-source-locations"),
            "event-source-type": obj.get("event-source-type") if obj.get("event-source-type") is not None else 'item',
            "event-types": obj.get("event-types"),
            "every": obj.get("every"),
            "forwarder-type": obj.get("forwarder-type"),
            "host": obj.get("host"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "key": obj.get("key"),
            "name": obj.get("name"),
            "runner-type": obj.get("runner-type"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "user-email": obj.get("user-email")
        })
        return _obj


