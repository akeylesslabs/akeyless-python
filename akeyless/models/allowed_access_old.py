# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AllowedAccessOld(BaseModel):
    """
    Deprecated: AllowedAccessOld please use Gator allowed_access API structs such as AllowedAccessInput/AllowedAccess
    """ # noqa: E501
    acc_id: Optional[StrictStr] = None
    access_permissions: Optional[List[StrictStr]] = None
    access_rules_type: Optional[StrictStr] = None
    allowed_api: Optional[StrictBool] = None
    alloweds_login: Optional[StrictBool] = None
    editable: Optional[StrictBool] = None
    err_msg: Optional[StrictStr] = None
    hash: Optional[StrictStr] = None
    is_valid: Optional[StrictBool] = None
    name: Optional[StrictStr] = None
    sub_claims: Optional[Dict[str, List[StrictStr]]] = None
    __properties: ClassVar[List[str]] = ["acc_id", "access_permissions", "access_rules_type", "allowed_api", "alloweds_login", "editable", "err_msg", "hash", "is_valid", "name", "sub_claims"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllowedAccessOld from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllowedAccessOld from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "acc_id": obj.get("acc_id"),
            "access_permissions": obj.get("access_permissions"),
            "access_rules_type": obj.get("access_rules_type"),
            "allowed_api": obj.get("allowed_api"),
            "alloweds_login": obj.get("alloweds_login"),
            "editable": obj.get("editable"),
            "err_msg": obj.get("err_msg"),
            "hash": obj.get("hash"),
            "is_valid": obj.get("is_valid"),
            "name": obj.get("name"),
            "sub_claims": obj.get("sub_claims")
        })
        return _obj


