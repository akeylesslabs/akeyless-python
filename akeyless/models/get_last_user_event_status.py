# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GetLastUserEventStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event_source': 'str',
        'event_type': 'str',
        'item_name': 'str',
        'item_type': 'str',
        'json': 'bool',
        'time_back': 'str',
        'token': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'event_source': 'event-source',
        'event_type': 'event-type',
        'item_name': 'item-name',
        'item_type': 'item-type',
        'json': 'json',
        'time_back': 'time-back',
        'token': 'token',
        'uid_token': 'uid-token'
    }

    def __init__(self, event_source=None, event_type=None, item_name=None, item_type=None, json=False, time_back=None, token=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """GetLastUserEventStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._event_source = None
        self._event_type = None
        self._item_name = None
        self._item_type = None
        self._json = None
        self._time_back = None
        self._token = None
        self._uid_token = None
        self.discriminator = None

        if event_source is not None:
            self.event_source = event_source
        self.event_type = event_type
        self.item_name = item_name
        self.item_type = item_type
        if json is not None:
            self.json = json
        if time_back is not None:
            self.time_back = time_back
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def event_source(self):
        """Gets the event_source of this GetLastUserEventStatus.  # noqa: E501


        :return: The event_source of this GetLastUserEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this GetLastUserEventStatus.


        :param event_source: The event_source of this GetLastUserEventStatus.  # noqa: E501
        :type: str
        """

        self._event_source = event_source

    @property
    def event_type(self):
        """Gets the event_type of this GetLastUserEventStatus.  # noqa: E501


        :return: The event_type of this GetLastUserEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this GetLastUserEventStatus.


        :param event_type: The event_type of this GetLastUserEventStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and event_type is None:  # noqa: E501
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501

        self._event_type = event_type

    @property
    def item_name(self):
        """Gets the item_name of this GetLastUserEventStatus.  # noqa: E501

        Event item name  # noqa: E501

        :return: The item_name of this GetLastUserEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this GetLastUserEventStatus.

        Event item name  # noqa: E501

        :param item_name: The item_name of this GetLastUserEventStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and item_name is None:  # noqa: E501
            raise ValueError("Invalid value for `item_name`, must not be `None`")  # noqa: E501

        self._item_name = item_name

    @property
    def item_type(self):
        """Gets the item_type of this GetLastUserEventStatus.  # noqa: E501

        Event item type can be either \"target\" or type of item eg \"static_secret\"/\"dynamic_secret\" To get type of some item run `akeyless describe-item -n {ITEM_NAME} --jq-expression .item_type`  # noqa: E501

        :return: The item_type of this GetLastUserEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this GetLastUserEventStatus.

        Event item type can be either \"target\" or type of item eg \"static_secret\"/\"dynamic_secret\" To get type of some item run `akeyless describe-item -n {ITEM_NAME} --jq-expression .item_type`  # noqa: E501

        :param item_type: The item_type of this GetLastUserEventStatus.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and item_type is None:  # noqa: E501
            raise ValueError("Invalid value for `item_type`, must not be `None`")  # noqa: E501

        self._item_type = item_type

    @property
    def json(self):
        """Gets the json of this GetLastUserEventStatus.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this GetLastUserEventStatus.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this GetLastUserEventStatus.

        Set output format to JSON  # noqa: E501

        :param json: The json of this GetLastUserEventStatus.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def time_back(self):
        """Gets the time_back of this GetLastUserEventStatus.  # noqa: E501

        The time back to search the event, for example if the value is \"5m\" we will return the last user event issued in the last 5 minutes. By default, we will search without any time boundary.  # noqa: E501

        :return: The time_back of this GetLastUserEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._time_back

    @time_back.setter
    def time_back(self, time_back):
        """Sets the time_back of this GetLastUserEventStatus.

        The time back to search the event, for example if the value is \"5m\" we will return the last user event issued in the last 5 minutes. By default, we will search without any time boundary.  # noqa: E501

        :param time_back: The time_back of this GetLastUserEventStatus.  # noqa: E501
        :type: str
        """

        self._time_back = time_back

    @property
    def token(self):
        """Gets the token of this GetLastUserEventStatus.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this GetLastUserEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this GetLastUserEventStatus.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this GetLastUserEventStatus.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this GetLastUserEventStatus.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this GetLastUserEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this GetLastUserEventStatus.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this GetLastUserEventStatus.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetLastUserEventStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetLastUserEventStatus):
            return True

        return self.to_dict() != other.to_dict()
