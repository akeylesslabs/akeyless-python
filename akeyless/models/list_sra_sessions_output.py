# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class ListSraSessionsOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed_gateways': 'list[str]',
        'next_page': 'str',
        'sessions': 'list[SraSessionEntryOut]'
    }

    attribute_map = {
        'allowed_gateways': 'allowed_gateways',
        'next_page': 'next_page',
        'sessions': 'sessions'
    }

    def __init__(self, allowed_gateways=None, next_page=None, sessions=None, local_vars_configuration=None):  # noqa: E501
        """ListSraSessionsOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allowed_gateways = None
        self._next_page = None
        self._sessions = None
        self.discriminator = None

        if allowed_gateways is not None:
            self.allowed_gateways = allowed_gateways
        if next_page is not None:
            self.next_page = next_page
        if sessions is not None:
            self.sessions = sessions

    @property
    def allowed_gateways(self):
        """Gets the allowed_gateways of this ListSraSessionsOutput.  # noqa: E501


        :return: The allowed_gateways of this ListSraSessionsOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_gateways

    @allowed_gateways.setter
    def allowed_gateways(self, allowed_gateways):
        """Sets the allowed_gateways of this ListSraSessionsOutput.


        :param allowed_gateways: The allowed_gateways of this ListSraSessionsOutput.  # noqa: E501
        :type: list[str]
        """

        self._allowed_gateways = allowed_gateways

    @property
    def next_page(self):
        """Gets the next_page of this ListSraSessionsOutput.  # noqa: E501


        :return: The next_page of this ListSraSessionsOutput.  # noqa: E501
        :rtype: str
        """
        return self._next_page

    @next_page.setter
    def next_page(self, next_page):
        """Sets the next_page of this ListSraSessionsOutput.


        :param next_page: The next_page of this ListSraSessionsOutput.  # noqa: E501
        :type: str
        """

        self._next_page = next_page

    @property
    def sessions(self):
        """Gets the sessions of this ListSraSessionsOutput.  # noqa: E501


        :return: The sessions of this ListSraSessionsOutput.  # noqa: E501
        :rtype: list[SraSessionEntryOut]
        """
        return self._sessions

    @sessions.setter
    def sessions(self, sessions):
        """Sets the sessions of this ListSraSessionsOutput.


        :param sessions: The sessions of this ListSraSessionsOutput.  # noqa: E501
        :type: list[SraSessionEntryOut]
        """

        self._sessions = sessions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListSraSessionsOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListSraSessionsOutput):
            return True

        return self.to_dict() != other.to_dict()
