# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class OpenAITargetDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_key': 'str',
        'api_key_id': 'str',
        'model': 'str',
        'openai_url': 'str',
        'organization_id': 'str'
    }

    attribute_map = {
        'api_key': 'api_key',
        'api_key_id': 'api_key_id',
        'model': 'model',
        'openai_url': 'openai_url',
        'organization_id': 'organization_id'
    }

    def __init__(self, api_key=None, api_key_id=None, model=None, openai_url=None, organization_id=None, local_vars_configuration=None):  # noqa: E501
        """OpenAITargetDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_key = None
        self._api_key_id = None
        self._model = None
        self._openai_url = None
        self._organization_id = None
        self.discriminator = None

        if api_key is not None:
            self.api_key = api_key
        if api_key_id is not None:
            self.api_key_id = api_key_id
        if model is not None:
            self.model = model
        if openai_url is not None:
            self.openai_url = openai_url
        if organization_id is not None:
            self.organization_id = organization_id

    @property
    def api_key(self):
        """Gets the api_key of this OpenAITargetDetails.  # noqa: E501


        :return: The api_key of this OpenAITargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this OpenAITargetDetails.


        :param api_key: The api_key of this OpenAITargetDetails.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def api_key_id(self):
        """Gets the api_key_id of this OpenAITargetDetails.  # noqa: E501


        :return: The api_key_id of this OpenAITargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._api_key_id

    @api_key_id.setter
    def api_key_id(self, api_key_id):
        """Sets the api_key_id of this OpenAITargetDetails.


        :param api_key_id: The api_key_id of this OpenAITargetDetails.  # noqa: E501
        :type: str
        """

        self._api_key_id = api_key_id

    @property
    def model(self):
        """Gets the model of this OpenAITargetDetails.  # noqa: E501


        :return: The model of this OpenAITargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this OpenAITargetDetails.


        :param model: The model of this OpenAITargetDetails.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def openai_url(self):
        """Gets the openai_url of this OpenAITargetDetails.  # noqa: E501


        :return: The openai_url of this OpenAITargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._openai_url

    @openai_url.setter
    def openai_url(self, openai_url):
        """Sets the openai_url of this OpenAITargetDetails.


        :param openai_url: The openai_url of this OpenAITargetDetails.  # noqa: E501
        :type: str
        """

        self._openai_url = openai_url

    @property
    def organization_id(self):
        """Gets the organization_id of this OpenAITargetDetails.  # noqa: E501


        :return: The organization_id of this OpenAITargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this OpenAITargetDetails.


        :param organization_id: The organization_id of this OpenAITargetDetails.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenAITargetDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OpenAITargetDetails):
            return True

        return self.to_dict() != other.to_dict()
