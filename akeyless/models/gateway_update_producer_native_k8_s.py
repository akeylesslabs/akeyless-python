# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayUpdateProducerNativeK8S(BaseModel):
    """
    gatewayUpdateProducerNativeK8S is a command that updates k8s producer [Deprecated: Use dynamic-secret-update-k8s command]
    """ # noqa: E501
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    k8s_allowed_namespaces: Optional[StrictStr] = Field(default=None, description="Comma-separated list of allowed K8S namespaces for the generated ServiceAccount (relevant only for k8s-service-account-type=dynamic)", alias="k8s-allowed-namespaces")
    k8s_cluster_ca_cert: Optional[StrictStr] = Field(default=None, description="K8S cluster CA certificate", alias="k8s-cluster-ca-cert")
    k8s_cluster_endpoint: Optional[StrictStr] = Field(default=None, description="K8S cluster URL endpoint", alias="k8s-cluster-endpoint")
    k8s_cluster_name: Optional[StrictStr] = Field(default=None, description="K8S cluster name", alias="k8s-cluster-name")
    k8s_cluster_token: Optional[StrictStr] = Field(default=None, description="K8S cluster Bearer token", alias="k8s-cluster-token")
    k8s_namespace: Optional[StrictStr] = Field(default=None, description="K8S Namespace where the ServiceAccount exists.", alias="k8s-namespace")
    k8s_predefined_role_name: Optional[StrictStr] = Field(default=None, description="The pre-existing Role or ClusterRole name to bind the generated ServiceAccount to (relevant only for k8s-service-account-type=dynamic)", alias="k8s-predefined-role-name")
    k8s_predefined_role_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of the pre-existing K8S role [Role, ClusterRole] (relevant only for k8s-service-account-type=dynamic)", alias="k8s-predefined-role-type")
    k8s_rolebinding_yaml_def: Optional[StrictStr] = Field(default=None, description="Path to yaml file that contains definitions of K8S role and role binding (relevant only for k8s-service-account-type=dynamic)", alias="k8s-rolebinding-yaml-def")
    k8s_service_account: Optional[StrictStr] = Field(default=None, description="K8S ServiceAccount to extract token from.", alias="k8s-service-account")
    k8s_service_account_type: Optional[StrictStr] = Field(default=None, description="K8S ServiceAccount type [fixed, dynamic].", alias="k8s-service-account-type")
    name: StrictStr = Field(description="Dynamic secret name")
    new_name: Optional[StrictStr] = Field(default=None, description="Dynamic secret name", alias="new-name")
    producer_encryption_key_name: Optional[StrictStr] = Field(default=None, description="Dynamic producer encryption key", alias="producer-encryption-key-name")
    secure_access_allow_port_forwading: Optional[StrictBool] = Field(default=None, description="Enable Port forwarding while using CLI access", alias="secure-access-allow-port-forwading")
    secure_access_bastion_issuer: Optional[StrictStr] = Field(default=None, description="Deprecated. use secure-access-certificate-issuer", alias="secure-access-bastion-issuer")
    secure_access_certificate_issuer: Optional[StrictStr] = Field(default=None, description="Path to the SSH Certificate Issuer for your Akeyless Secure Access", alias="secure-access-certificate-issuer")
    secure_access_cluster_endpoint: Optional[StrictStr] = Field(default=None, description="The K8s cluster endpoint URL", alias="secure-access-cluster-endpoint")
    secure_access_dashboard_url: Optional[StrictStr] = Field(default=None, description="The K8s dashboard url", alias="secure-access-dashboard-url")
    secure_access_delay: Optional[StrictInt] = Field(default=None, description="The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds", alias="secure-access-delay")
    secure_access_enable: Optional[StrictStr] = Field(default=None, description="Enable/Disable secure remote access [true/false]", alias="secure-access-enable")
    secure_access_web: Optional[StrictBool] = Field(default=False, description="Enable Web Secure Remote Access", alias="secure-access-web")
    secure_access_web_browsing: Optional[StrictBool] = Field(default=False, description="Secure browser via Akeyless's Secure Remote Access (SRA)", alias="secure-access-web-browsing")
    secure_access_web_proxy: Optional[StrictBool] = Field(default=False, description="Web-Proxy via Akeyless's Secure Remote Access (SRA)", alias="secure-access-web-proxy")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Add tags attached to this object")
    target_name: Optional[StrictStr] = Field(default=None, description="Target name", alias="target-name")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    use_gw_service_account: Optional[StrictBool] = Field(default=None, description="Use the GW's service account", alias="use-gw-service-account")
    user_ttl: Optional[StrictStr] = Field(default='60m', description="User TTL", alias="user-ttl")
    __properties: ClassVar[List[str]] = ["delete_protection", "json", "k8s-allowed-namespaces", "k8s-cluster-ca-cert", "k8s-cluster-endpoint", "k8s-cluster-name", "k8s-cluster-token", "k8s-namespace", "k8s-predefined-role-name", "k8s-predefined-role-type", "k8s-rolebinding-yaml-def", "k8s-service-account", "k8s-service-account-type", "name", "new-name", "producer-encryption-key-name", "secure-access-allow-port-forwading", "secure-access-bastion-issuer", "secure-access-certificate-issuer", "secure-access-cluster-endpoint", "secure-access-dashboard-url", "secure-access-delay", "secure-access-enable", "secure-access-web", "secure-access-web-browsing", "secure-access-web-proxy", "tags", "target-name", "token", "uid-token", "use-gw-service-account", "user-ttl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayUpdateProducerNativeK8S from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayUpdateProducerNativeK8S from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "delete_protection": obj.get("delete_protection"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "k8s-allowed-namespaces": obj.get("k8s-allowed-namespaces"),
            "k8s-cluster-ca-cert": obj.get("k8s-cluster-ca-cert"),
            "k8s-cluster-endpoint": obj.get("k8s-cluster-endpoint"),
            "k8s-cluster-name": obj.get("k8s-cluster-name"),
            "k8s-cluster-token": obj.get("k8s-cluster-token"),
            "k8s-namespace": obj.get("k8s-namespace"),
            "k8s-predefined-role-name": obj.get("k8s-predefined-role-name"),
            "k8s-predefined-role-type": obj.get("k8s-predefined-role-type"),
            "k8s-rolebinding-yaml-def": obj.get("k8s-rolebinding-yaml-def"),
            "k8s-service-account": obj.get("k8s-service-account"),
            "k8s-service-account-type": obj.get("k8s-service-account-type"),
            "name": obj.get("name"),
            "new-name": obj.get("new-name"),
            "producer-encryption-key-name": obj.get("producer-encryption-key-name"),
            "secure-access-allow-port-forwading": obj.get("secure-access-allow-port-forwading"),
            "secure-access-bastion-issuer": obj.get("secure-access-bastion-issuer"),
            "secure-access-certificate-issuer": obj.get("secure-access-certificate-issuer"),
            "secure-access-cluster-endpoint": obj.get("secure-access-cluster-endpoint"),
            "secure-access-dashboard-url": obj.get("secure-access-dashboard-url"),
            "secure-access-delay": obj.get("secure-access-delay"),
            "secure-access-enable": obj.get("secure-access-enable"),
            "secure-access-web": obj.get("secure-access-web") if obj.get("secure-access-web") is not None else False,
            "secure-access-web-browsing": obj.get("secure-access-web-browsing") if obj.get("secure-access-web-browsing") is not None else False,
            "secure-access-web-proxy": obj.get("secure-access-web-proxy") if obj.get("secure-access-web-proxy") is not None else False,
            "tags": obj.get("tags"),
            "target-name": obj.get("target-name"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "use-gw-service-account": obj.get("use-gw-service-account"),
            "user-ttl": obj.get("user-ttl") if obj.get("user-ttl") is not None else '60m'
        })
        return _obj


