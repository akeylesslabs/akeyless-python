# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class LdapTargetDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'implementation_type': 'str',
        'ldap_audience': 'str',
        'ldap_bind_dn': 'str',
        'ldap_bind_password': 'str',
        'ldap_certificate': 'str',
        'ldap_token_expiration': 'str',
        'ldap_url': 'str'
    }

    attribute_map = {
        'implementation_type': 'implementation_type',
        'ldap_audience': 'ldap_audience',
        'ldap_bind_dn': 'ldap_bind_dn',
        'ldap_bind_password': 'ldap_bind_password',
        'ldap_certificate': 'ldap_certificate',
        'ldap_token_expiration': 'ldap_token_expiration',
        'ldap_url': 'ldap_url'
    }

    def __init__(self, implementation_type=None, ldap_audience=None, ldap_bind_dn=None, ldap_bind_password=None, ldap_certificate=None, ldap_token_expiration=None, ldap_url=None, local_vars_configuration=None):  # noqa: E501
        """LdapTargetDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._implementation_type = None
        self._ldap_audience = None
        self._ldap_bind_dn = None
        self._ldap_bind_password = None
        self._ldap_certificate = None
        self._ldap_token_expiration = None
        self._ldap_url = None
        self.discriminator = None

        if implementation_type is not None:
            self.implementation_type = implementation_type
        if ldap_audience is not None:
            self.ldap_audience = ldap_audience
        if ldap_bind_dn is not None:
            self.ldap_bind_dn = ldap_bind_dn
        if ldap_bind_password is not None:
            self.ldap_bind_password = ldap_bind_password
        if ldap_certificate is not None:
            self.ldap_certificate = ldap_certificate
        if ldap_token_expiration is not None:
            self.ldap_token_expiration = ldap_token_expiration
        if ldap_url is not None:
            self.ldap_url = ldap_url

    @property
    def implementation_type(self):
        """Gets the implementation_type of this LdapTargetDetails.  # noqa: E501


        :return: The implementation_type of this LdapTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._implementation_type

    @implementation_type.setter
    def implementation_type(self, implementation_type):
        """Sets the implementation_type of this LdapTargetDetails.


        :param implementation_type: The implementation_type of this LdapTargetDetails.  # noqa: E501
        :type: str
        """

        self._implementation_type = implementation_type

    @property
    def ldap_audience(self):
        """Gets the ldap_audience of this LdapTargetDetails.  # noqa: E501


        :return: The ldap_audience of this LdapTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_audience

    @ldap_audience.setter
    def ldap_audience(self, ldap_audience):
        """Sets the ldap_audience of this LdapTargetDetails.


        :param ldap_audience: The ldap_audience of this LdapTargetDetails.  # noqa: E501
        :type: str
        """

        self._ldap_audience = ldap_audience

    @property
    def ldap_bind_dn(self):
        """Gets the ldap_bind_dn of this LdapTargetDetails.  # noqa: E501


        :return: The ldap_bind_dn of this LdapTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_bind_dn

    @ldap_bind_dn.setter
    def ldap_bind_dn(self, ldap_bind_dn):
        """Sets the ldap_bind_dn of this LdapTargetDetails.


        :param ldap_bind_dn: The ldap_bind_dn of this LdapTargetDetails.  # noqa: E501
        :type: str
        """

        self._ldap_bind_dn = ldap_bind_dn

    @property
    def ldap_bind_password(self):
        """Gets the ldap_bind_password of this LdapTargetDetails.  # noqa: E501


        :return: The ldap_bind_password of this LdapTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_bind_password

    @ldap_bind_password.setter
    def ldap_bind_password(self, ldap_bind_password):
        """Sets the ldap_bind_password of this LdapTargetDetails.


        :param ldap_bind_password: The ldap_bind_password of this LdapTargetDetails.  # noqa: E501
        :type: str
        """

        self._ldap_bind_password = ldap_bind_password

    @property
    def ldap_certificate(self):
        """Gets the ldap_certificate of this LdapTargetDetails.  # noqa: E501


        :return: The ldap_certificate of this LdapTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_certificate

    @ldap_certificate.setter
    def ldap_certificate(self, ldap_certificate):
        """Sets the ldap_certificate of this LdapTargetDetails.


        :param ldap_certificate: The ldap_certificate of this LdapTargetDetails.  # noqa: E501
        :type: str
        """

        self._ldap_certificate = ldap_certificate

    @property
    def ldap_token_expiration(self):
        """Gets the ldap_token_expiration of this LdapTargetDetails.  # noqa: E501


        :return: The ldap_token_expiration of this LdapTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_token_expiration

    @ldap_token_expiration.setter
    def ldap_token_expiration(self, ldap_token_expiration):
        """Sets the ldap_token_expiration of this LdapTargetDetails.


        :param ldap_token_expiration: The ldap_token_expiration of this LdapTargetDetails.  # noqa: E501
        :type: str
        """

        self._ldap_token_expiration = ldap_token_expiration

    @property
    def ldap_url(self):
        """Gets the ldap_url of this LdapTargetDetails.  # noqa: E501


        :return: The ldap_url of this LdapTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._ldap_url

    @ldap_url.setter
    def ldap_url(self, ldap_url):
        """Sets the ldap_url of this LdapTargetDetails.


        :param ldap_url: The ldap_url of this LdapTargetDetails.  # noqa: E501
        :type: str
        """

        self._ldap_url = ldap_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapTargetDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LdapTargetDetails):
            return True

        return self.to_dict() != other.to_dict()
