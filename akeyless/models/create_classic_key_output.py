# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class CreateClassicKeyOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'classic_key_id': 'int',
        'classic_key_name': 'str',
        'classic_key_type': 'str'
    }

    attribute_map = {
        'classic_key_id': 'classic_key_id',
        'classic_key_name': 'classic_key_name',
        'classic_key_type': 'classic_key_type'
    }

    def __init__(self, classic_key_id=None, classic_key_name=None, classic_key_type=None, local_vars_configuration=None):  # noqa: E501
        """CreateClassicKeyOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._classic_key_id = None
        self._classic_key_name = None
        self._classic_key_type = None
        self.discriminator = None

        if classic_key_id is not None:
            self.classic_key_id = classic_key_id
        if classic_key_name is not None:
            self.classic_key_name = classic_key_name
        if classic_key_type is not None:
            self.classic_key_type = classic_key_type

    @property
    def classic_key_id(self):
        """Gets the classic_key_id of this CreateClassicKeyOutput.  # noqa: E501


        :return: The classic_key_id of this CreateClassicKeyOutput.  # noqa: E501
        :rtype: int
        """
        return self._classic_key_id

    @classic_key_id.setter
    def classic_key_id(self, classic_key_id):
        """Sets the classic_key_id of this CreateClassicKeyOutput.


        :param classic_key_id: The classic_key_id of this CreateClassicKeyOutput.  # noqa: E501
        :type: int
        """

        self._classic_key_id = classic_key_id

    @property
    def classic_key_name(self):
        """Gets the classic_key_name of this CreateClassicKeyOutput.  # noqa: E501


        :return: The classic_key_name of this CreateClassicKeyOutput.  # noqa: E501
        :rtype: str
        """
        return self._classic_key_name

    @classic_key_name.setter
    def classic_key_name(self, classic_key_name):
        """Sets the classic_key_name of this CreateClassicKeyOutput.


        :param classic_key_name: The classic_key_name of this CreateClassicKeyOutput.  # noqa: E501
        :type: str
        """

        self._classic_key_name = classic_key_name

    @property
    def classic_key_type(self):
        """Gets the classic_key_type of this CreateClassicKeyOutput.  # noqa: E501


        :return: The classic_key_type of this CreateClassicKeyOutput.  # noqa: E501
        :rtype: str
        """
        return self._classic_key_type

    @classic_key_type.setter
    def classic_key_type(self, classic_key_type):
        """Sets the classic_key_type of this CreateClassicKeyOutput.


        :param classic_key_type: The classic_key_type of this CreateClassicKeyOutput.  # noqa: E501
        :type: str
        """

        self._classic_key_type = classic_key_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateClassicKeyOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateClassicKeyOutput):
            return True

        return self.to_dict() != other.to_dict()
