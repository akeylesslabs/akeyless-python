# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RotatedSecretUpdateLdap(BaseModel):
    """
    RotatedSecretUpdateLdap
    """ # noqa: E501
    provider_type: Optional[StrictStr] = Field(default=None, alias="ProviderType")
    add_tag: Optional[List[StrictStr]] = Field(default=None, description="List of the new tags that will be attached to this item", alias="add-tag")
    authentication_credentials: Optional[StrictStr] = Field(default='use-user-creds', description="The credentials to connect with use-user-creds/use-target-creds", alias="authentication-credentials")
    auto_rotate: Optional[StrictStr] = Field(default=None, description="Whether to automatically rotate every --rotation-interval days, or disable existing automatic rotation [true/false]", alias="auto-rotate")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default='default_metadata', description="Description of the object")
    host_provider: Optional[StrictStr] = Field(default=None, description="Host provider type [explicit/target], Default Host provider is explicit, Relevant only for Secure Remote Access of ssh cert issuer, ldap rotated secret and ldap dynamic secret", alias="host-provider")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    keep_prev_version: Optional[StrictStr] = Field(default=None, description="Whether to keep previous version [true/false]. If not set, use default according to account settings", alias="keep-prev-version")
    key: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)")
    max_versions: Optional[StrictStr] = Field(default=None, description="Set the maximum number of versions, limited by the account settings defaults.", alias="max-versions")
    name: StrictStr = Field(description="Rotated secret name")
    new_name: Optional[StrictStr] = Field(default=None, description="New item name", alias="new-name")
    password_length: Optional[StrictStr] = Field(default=None, description="The length of the password to be generated", alias="password-length")
    rm_tag: Optional[List[StrictStr]] = Field(default=None, description="List of the existent tags that will be removed from this item", alias="rm-tag")
    rotate_after_disconnect: Optional[StrictStr] = Field(default='false', description="Rotate the value of the secret after SRA session ends [true/false]", alias="rotate-after-disconnect")
    rotated_password: Optional[StrictStr] = Field(default=None, description="rotated-username password (relevant only for rotator-type=ldap)", alias="rotated-password")
    rotated_username: Optional[StrictStr] = Field(default=None, description="username to be rotated, if selected use-self-creds at rotator-creds-type, this username will try to rotate it's own password, if use-target-creds is selected, target credentials will be use to rotate the rotated-password (relevant only for rotator-type=ldap)", alias="rotated-username")
    rotation_event_in: Optional[List[StrictStr]] = Field(default=None, description="How many days before the rotation of the item would you like to be notified", alias="rotation-event-in")
    rotation_hour: Optional[StrictInt] = Field(default=None, description="The Hour of the rotation in UTC", alias="rotation-hour")
    rotation_interval: Optional[StrictStr] = Field(default=None, description="The number of days to wait between every automatic key rotation (1-365)", alias="rotation-interval")
    secure_access_enable: Optional[StrictStr] = Field(default=None, description="Enable/Disable secure remote access [true/false]", alias="secure-access-enable")
    secure_access_host: Optional[List[StrictStr]] = Field(default=None, description="Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)", alias="secure-access-host")
    secure_access_rdp_domain: Optional[StrictStr] = Field(default=None, description="Default domain name server. i.e. microsoft.com", alias="secure-access-rdp-domain")
    secure_access_url: Optional[StrictStr] = Field(default=None, description="Destination URL to inject secrets", alias="secure-access-url")
    secure_access_web: Optional[StrictBool] = Field(default=False, description="Enable Web Secure Remote Access", alias="secure-access-web")
    secure_access_web_browsing: Optional[StrictBool] = Field(default=False, description="Secure browser via Akeyless's Secure Remote Access (SRA)", alias="secure-access-web-browsing")
    secure_access_web_proxy: Optional[StrictBool] = Field(default=False, description="Web-Proxy via Akeyless's Secure Remote Access (SRA)", alias="secure-access-web-proxy")
    target: Optional[List[StrictStr]] = Field(default=None, description="A list of linked targets to be associated, Relevant only for Secure Remote Access for ssh cert issuer, ldap rotated secret and ldap dynamic secret, To specify multiple targets use argument multiple times")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    user_attribute: Optional[StrictStr] = Field(default='cn', description="LDAP User Attribute, Default value \"cn\"", alias="user-attribute")
    user_dn: Optional[StrictStr] = Field(default=None, description="Base DN to Perform User Search", alias="user-dn")
    __properties: ClassVar[List[str]] = ["ProviderType", "add-tag", "authentication-credentials", "auto-rotate", "delete_protection", "description", "host-provider", "json", "keep-prev-version", "key", "max-versions", "name", "new-name", "password-length", "rm-tag", "rotate-after-disconnect", "rotated-password", "rotated-username", "rotation-event-in", "rotation-hour", "rotation-interval", "secure-access-enable", "secure-access-host", "secure-access-rdp-domain", "secure-access-url", "secure-access-web", "secure-access-web-browsing", "secure-access-web-proxy", "target", "token", "uid-token", "user-attribute", "user-dn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RotatedSecretUpdateLdap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RotatedSecretUpdateLdap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ProviderType": obj.get("ProviderType"),
            "add-tag": obj.get("add-tag"),
            "authentication-credentials": obj.get("authentication-credentials") if obj.get("authentication-credentials") is not None else 'use-user-creds',
            "auto-rotate": obj.get("auto-rotate"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description") if obj.get("description") is not None else 'default_metadata',
            "host-provider": obj.get("host-provider"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "keep-prev-version": obj.get("keep-prev-version"),
            "key": obj.get("key"),
            "max-versions": obj.get("max-versions"),
            "name": obj.get("name"),
            "new-name": obj.get("new-name"),
            "password-length": obj.get("password-length"),
            "rm-tag": obj.get("rm-tag"),
            "rotate-after-disconnect": obj.get("rotate-after-disconnect") if obj.get("rotate-after-disconnect") is not None else 'false',
            "rotated-password": obj.get("rotated-password"),
            "rotated-username": obj.get("rotated-username"),
            "rotation-event-in": obj.get("rotation-event-in"),
            "rotation-hour": obj.get("rotation-hour"),
            "rotation-interval": obj.get("rotation-interval"),
            "secure-access-enable": obj.get("secure-access-enable"),
            "secure-access-host": obj.get("secure-access-host"),
            "secure-access-rdp-domain": obj.get("secure-access-rdp-domain"),
            "secure-access-url": obj.get("secure-access-url"),
            "secure-access-web": obj.get("secure-access-web") if obj.get("secure-access-web") is not None else False,
            "secure-access-web-browsing": obj.get("secure-access-web-browsing") if obj.get("secure-access-web-browsing") is not None else False,
            "secure-access-web-proxy": obj.get("secure-access-web-proxy") if obj.get("secure-access-web-proxy") is not None else False,
            "target": obj.get("target"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "user-attribute": obj.get("user-attribute") if obj.get("user-attribute") is not None else 'cn',
            "user-dn": obj.get("user-dn")
        })
        return _obj


