# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class ProvisionCertificateOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'fail_message': 'str',
        'success_message': 'str',
        'host_names': 'list[str]',
        'provisioned_at': 'datetime'
    }

    attribute_map = {
        'fail_message': 'FailMessage',
        'success_message': 'SuccessMessage',
        'host_names': 'host_names',
        'provisioned_at': 'provisioned_at'
    }

    def __init__(self, fail_message=None, success_message=None, host_names=None, provisioned_at=None, local_vars_configuration=None):  # noqa: E501
        """ProvisionCertificateOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._fail_message = None
        self._success_message = None
        self._host_names = None
        self._provisioned_at = None
        self.discriminator = None

        if fail_message is not None:
            self.fail_message = fail_message
        if success_message is not None:
            self.success_message = success_message
        if host_names is not None:
            self.host_names = host_names
        if provisioned_at is not None:
            self.provisioned_at = provisioned_at

    @property
    def fail_message(self):
        """Gets the fail_message of this ProvisionCertificateOutput.  # noqa: E501


        :return: The fail_message of this ProvisionCertificateOutput.  # noqa: E501
        :rtype: str
        """
        return self._fail_message

    @fail_message.setter
    def fail_message(self, fail_message):
        """Sets the fail_message of this ProvisionCertificateOutput.


        :param fail_message: The fail_message of this ProvisionCertificateOutput.  # noqa: E501
        :type: str
        """

        self._fail_message = fail_message

    @property
    def success_message(self):
        """Gets the success_message of this ProvisionCertificateOutput.  # noqa: E501


        :return: The success_message of this ProvisionCertificateOutput.  # noqa: E501
        :rtype: str
        """
        return self._success_message

    @success_message.setter
    def success_message(self, success_message):
        """Sets the success_message of this ProvisionCertificateOutput.


        :param success_message: The success_message of this ProvisionCertificateOutput.  # noqa: E501
        :type: str
        """

        self._success_message = success_message

    @property
    def host_names(self):
        """Gets the host_names of this ProvisionCertificateOutput.  # noqa: E501


        :return: The host_names of this ProvisionCertificateOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._host_names

    @host_names.setter
    def host_names(self, host_names):
        """Sets the host_names of this ProvisionCertificateOutput.


        :param host_names: The host_names of this ProvisionCertificateOutput.  # noqa: E501
        :type: list[str]
        """

        self._host_names = host_names

    @property
    def provisioned_at(self):
        """Gets the provisioned_at of this ProvisionCertificateOutput.  # noqa: E501


        :return: The provisioned_at of this ProvisionCertificateOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._provisioned_at

    @provisioned_at.setter
    def provisioned_at(self, provisioned_at):
        """Sets the provisioned_at of this ProvisionCertificateOutput.


        :param provisioned_at: The provisioned_at of this ProvisionCertificateOutput.  # noqa: E501
        :type: datetime
        """

        self._provisioned_at = provisioned_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisionCertificateOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProvisionCertificateOutput):
            return True

        return self.to_dict() != other.to_dict()
