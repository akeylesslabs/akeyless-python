# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class BastionListEntry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_id': 'str',
        'allowed_access_ids': 'list[str]',
        'allowed_urls': 'list[str]',
        'allowed_urls_per_instance': 'dict(str, list[str])',
        'cluster_name': 'str',
        'display_name': 'str',
        'last_report': 'datetime'
    }

    attribute_map = {
        'access_id': 'access_id',
        'allowed_access_ids': 'allowed_access_ids',
        'allowed_urls': 'allowed_urls',
        'allowed_urls_per_instance': 'allowed_urls_per_instance',
        'cluster_name': 'cluster_name',
        'display_name': 'display_name',
        'last_report': 'last_report'
    }

    def __init__(self, access_id=None, allowed_access_ids=None, allowed_urls=None, allowed_urls_per_instance=None, cluster_name=None, display_name=None, last_report=None, local_vars_configuration=None):  # noqa: E501
        """BastionListEntry - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._access_id = None
        self._allowed_access_ids = None
        self._allowed_urls = None
        self._allowed_urls_per_instance = None
        self._cluster_name = None
        self._display_name = None
        self._last_report = None
        self.discriminator = None

        if access_id is not None:
            self.access_id = access_id
        if allowed_access_ids is not None:
            self.allowed_access_ids = allowed_access_ids
        if allowed_urls is not None:
            self.allowed_urls = allowed_urls
        if allowed_urls_per_instance is not None:
            self.allowed_urls_per_instance = allowed_urls_per_instance
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if display_name is not None:
            self.display_name = display_name
        if last_report is not None:
            self.last_report = last_report

    @property
    def access_id(self):
        """Gets the access_id of this BastionListEntry.  # noqa: E501


        :return: The access_id of this BastionListEntry.  # noqa: E501
        :rtype: str
        """
        return self._access_id

    @access_id.setter
    def access_id(self, access_id):
        """Sets the access_id of this BastionListEntry.


        :param access_id: The access_id of this BastionListEntry.  # noqa: E501
        :type: str
        """

        self._access_id = access_id

    @property
    def allowed_access_ids(self):
        """Gets the allowed_access_ids of this BastionListEntry.  # noqa: E501


        :return: The allowed_access_ids of this BastionListEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_access_ids

    @allowed_access_ids.setter
    def allowed_access_ids(self, allowed_access_ids):
        """Sets the allowed_access_ids of this BastionListEntry.


        :param allowed_access_ids: The allowed_access_ids of this BastionListEntry.  # noqa: E501
        :type: list[str]
        """

        self._allowed_access_ids = allowed_access_ids

    @property
    def allowed_urls(self):
        """Gets the allowed_urls of this BastionListEntry.  # noqa: E501


        :return: The allowed_urls of this BastionListEntry.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_urls

    @allowed_urls.setter
    def allowed_urls(self, allowed_urls):
        """Sets the allowed_urls of this BastionListEntry.


        :param allowed_urls: The allowed_urls of this BastionListEntry.  # noqa: E501
        :type: list[str]
        """

        self._allowed_urls = allowed_urls

    @property
    def allowed_urls_per_instance(self):
        """Gets the allowed_urls_per_instance of this BastionListEntry.  # noqa: E501


        :return: The allowed_urls_per_instance of this BastionListEntry.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._allowed_urls_per_instance

    @allowed_urls_per_instance.setter
    def allowed_urls_per_instance(self, allowed_urls_per_instance):
        """Sets the allowed_urls_per_instance of this BastionListEntry.


        :param allowed_urls_per_instance: The allowed_urls_per_instance of this BastionListEntry.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._allowed_urls_per_instance = allowed_urls_per_instance

    @property
    def cluster_name(self):
        """Gets the cluster_name of this BastionListEntry.  # noqa: E501


        :return: The cluster_name of this BastionListEntry.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this BastionListEntry.


        :param cluster_name: The cluster_name of this BastionListEntry.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def display_name(self):
        """Gets the display_name of this BastionListEntry.  # noqa: E501


        :return: The display_name of this BastionListEntry.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this BastionListEntry.


        :param display_name: The display_name of this BastionListEntry.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def last_report(self):
        """Gets the last_report of this BastionListEntry.  # noqa: E501


        :return: The last_report of this BastionListEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._last_report

    @last_report.setter
    def last_report(self, last_report):
        """Sets the last_report of this BastionListEntry.


        :param last_report: The last_report of this BastionListEntry.  # noqa: E501
        :type: datetime
        """

        self._last_report = last_report

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BastionListEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BastionListEntry):
            return True

        return self.to_dict() != other.to_dict()
