# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class UpdateOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'changelog': 'str',
        'latest': 'str',
        'updated': 'bool'
    }

    attribute_map = {
        'changelog': 'changelog',
        'latest': 'latest',
        'updated': 'updated'
    }

    def __init__(self, changelog=None, latest=None, updated=None, local_vars_configuration=None):  # noqa: E501
        """UpdateOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._changelog = None
        self._latest = None
        self._updated = None
        self.discriminator = None

        if changelog is not None:
            self.changelog = changelog
        if latest is not None:
            self.latest = latest
        if updated is not None:
            self.updated = updated

    @property
    def changelog(self):
        """Gets the changelog of this UpdateOutput.  # noqa: E501


        :return: The changelog of this UpdateOutput.  # noqa: E501
        :rtype: str
        """
        return self._changelog

    @changelog.setter
    def changelog(self, changelog):
        """Sets the changelog of this UpdateOutput.


        :param changelog: The changelog of this UpdateOutput.  # noqa: E501
        :type: str
        """

        self._changelog = changelog

    @property
    def latest(self):
        """Gets the latest of this UpdateOutput.  # noqa: E501


        :return: The latest of this UpdateOutput.  # noqa: E501
        :rtype: str
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this UpdateOutput.


        :param latest: The latest of this UpdateOutput.  # noqa: E501
        :type: str
        """

        self._latest = latest

    @property
    def updated(self):
        """Gets the updated of this UpdateOutput.  # noqa: E501


        :return: The updated of this UpdateOutput.  # noqa: E501
        :rtype: bool
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this UpdateOutput.


        :param updated: The updated of this UpdateOutput.  # noqa: E501
        :type: bool
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateOutput):
            return True

        return self.to_dict() != other.to_dict()
