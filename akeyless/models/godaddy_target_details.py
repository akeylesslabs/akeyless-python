# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GodaddyTargetDetails(BaseModel):
    """
    GodaddyTargetDetails
    """ # noqa: E501
    imap_fqdn: Optional[StrictStr] = None
    imap_password: Optional[StrictStr] = None
    imap_port: Optional[StrictStr] = None
    imap_user: Optional[StrictStr] = None
    key: Optional[StrictStr] = None
    secret: Optional[StrictStr] = None
    timeout: Optional[StrictInt] = Field(default=None, description="A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.")
    validation_email: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["imap_fqdn", "imap_password", "imap_port", "imap_user", "key", "secret", "timeout", "validation_email"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GodaddyTargetDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GodaddyTargetDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "imap_fqdn": obj.get("imap_fqdn"),
            "imap_password": obj.get("imap_password"),
            "imap_port": obj.get("imap_port"),
            "imap_user": obj.get("imap_user"),
            "key": obj.get("key"),
            "secret": obj.get("secret"),
            "timeout": obj.get("timeout"),
            "validation_email": obj.get("validation_email")
        })
        return _obj


