# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UploadPKCS12(BaseModel):
    """
    UploadPKCS12
    """ # noqa: E501
    customer_frg_id: Optional[StrictStr] = Field(default=None, description="The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)", alias="customer-frg-id")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    var_in: StrictStr = Field(description="PKCS#12 input file (private key and certificate only)", alias="in")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    metadata: Optional[StrictStr] = Field(default=None, description="Deprecated - use description")
    name: StrictStr = Field(description="Name of key to be created")
    passphrase: StrictStr = Field(description="Passphrase to unlock the pkcs#12 bundle")
    split_level: Optional[StrictInt] = Field(default=3, description="The number of fragments that the item will be split into", alias="split-level")
    tag: Optional[List[StrictStr]] = Field(default=None, description="List of the tags attached to this key")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    __properties: ClassVar[List[str]] = ["customer-frg-id", "delete_protection", "description", "in", "json", "metadata", "name", "passphrase", "split-level", "tag", "token", "uid-token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UploadPKCS12 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UploadPKCS12 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "customer-frg-id": obj.get("customer-frg-id"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "in": obj.get("in"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "metadata": obj.get("metadata"),
            "name": obj.get("name"),
            "passphrase": obj.get("passphrase"),
            "split-level": obj.get("split-level") if obj.get("split-level") is not None else 3,
            "tag": obj.get("tag"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token")
        })
        return _obj


