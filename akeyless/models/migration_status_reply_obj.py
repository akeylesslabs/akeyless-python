# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.migration_items import MigrationItems
from typing import Optional, Set
from typing_extensions import Self

class MigrationStatusReplyObj(BaseModel):
    """
    MigrationStatusReplyObj
    """ # noqa: E501
    computers: Optional[StrictInt] = None
    duration_time: Optional[StrictStr] = None
    error: Optional[StrictStr] = None
    last_status_message: Optional[StrictStr] = None
    max_name_length: Optional[StrictInt] = None
    max_value_length: Optional[StrictInt] = None
    migration_id: Optional[StrictStr] = None
    migration_items: Optional[MigrationItems] = None
    migration_name: Optional[StrictStr] = None
    migration_state: Optional[StrictStr] = None
    migration_type: Optional[StrictStr] = None
    migration_type_name: Optional[StrictStr] = None
    rotated_secrets: Optional[MigrationItems] = None
    start_time: Optional[StrictStr] = None
    targets: Optional[MigrationItems] = None
    __properties: ClassVar[List[str]] = ["computers", "duration_time", "error", "last_status_message", "max_name_length", "max_value_length", "migration_id", "migration_items", "migration_name", "migration_state", "migration_type", "migration_type_name", "rotated_secrets", "start_time", "targets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MigrationStatusReplyObj from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of migration_items
        if self.migration_items:
            _dict['migration_items'] = self.migration_items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rotated_secrets
        if self.rotated_secrets:
            _dict['rotated_secrets'] = self.rotated_secrets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of targets
        if self.targets:
            _dict['targets'] = self.targets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MigrationStatusReplyObj from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "computers": obj.get("computers"),
            "duration_time": obj.get("duration_time"),
            "error": obj.get("error"),
            "last_status_message": obj.get("last_status_message"),
            "max_name_length": obj.get("max_name_length"),
            "max_value_length": obj.get("max_value_length"),
            "migration_id": obj.get("migration_id"),
            "migration_items": MigrationItems.from_dict(obj["migration_items"]) if obj.get("migration_items") is not None else None,
            "migration_name": obj.get("migration_name"),
            "migration_state": obj.get("migration_state"),
            "migration_type": obj.get("migration_type"),
            "migration_type_name": obj.get("migration_type_name"),
            "rotated_secrets": MigrationItems.from_dict(obj["rotated_secrets"]) if obj.get("rotated_secrets") is not None else None,
            "start_time": obj.get("start_time"),
            "targets": MigrationItems.from_dict(obj["targets"]) if obj.get("targets") is not None else None
        })
        return _obj


