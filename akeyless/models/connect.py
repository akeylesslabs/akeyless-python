# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Connect(BaseModel):
    """
    Connect is a command that performs secure remote access
    """ # noqa: E501
    helper: Optional[Dict[str, Any]] = Field(default=None, alias="Helper")
    rc_file_override: Optional[StrictStr] = Field(default=None, description="used to override .akeyless-connect.rc in tests", alias="RcFileOverride")
    bastion_ctrl_path: Optional[StrictStr] = Field(default=None, description="Deprecated. use bastion-ctrl-path", alias="bastion-ctrl-path")
    bastion_ctrl_port: Optional[StrictStr] = Field(default=None, description="Deprecated. use sra-ctrl-port", alias="bastion-ctrl-port")
    bastion_ctrl_proto: Optional[StrictStr] = Field(default=None, description="Deprecated. use sra-ctrl-proto", alias="bastion-ctrl-proto")
    bastion_ctrl_subdomain: Optional[StrictStr] = Field(default=None, description="Deprecated. use sra-ctrl-subdomain", alias="bastion-ctrl-subdomain")
    cert_issuer_name: Optional[StrictStr] = Field(default=None, description="The Akeyless certificate issuer name", alias="cert-issuer-name")
    gateway_url: Optional[StrictStr] = Field(default=None, description="The Gateway URL (configuration management) address, e.g. http://localhost:8000", alias="gateway-url")
    identity_file: Optional[StrictStr] = Field(default=None, description="The file from which the identity (private key) for public key authentication is read", alias="identity-file")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    justification: Optional[StrictStr] = None
    name: Optional[StrictStr] = Field(default=None, description="The Secret name (for database and AWS producers - producer name)")
    sra_ctrl_path: Optional[StrictStr] = Field(default=None, description="The Bastion API path", alias="sra-ctrl-path")
    sra_ctrl_port: Optional[StrictStr] = Field(default='9900', description="The Bastion API Port", alias="sra-ctrl-port")
    sra_ctrl_proto: Optional[StrictStr] = Field(default='http', description="The SRA API protocol", alias="sra-ctrl-proto")
    sra_ctrl_subdomain: Optional[StrictStr] = Field(default=None, description="The SRA API prefix", alias="sra-ctrl-subdomain")
    ssh_command: Optional[StrictStr] = Field(default=None, description="Path to SSH executable. e.g. /usr/bin/ssh", alias="ssh-command")
    ssh_extra_args: Optional[StrictStr] = Field(default=None, description="Additional SSH arguments (except -i)", alias="ssh-extra-args")
    ssh_legacy_signing_alg: Optional[StrictBool] = Field(default=False, description="Set this option to output legacy ('ssh-rsa-cert-v01@openssh.com') signing algorithm name in the ssh certificate.", alias="ssh-legacy-signing-alg")
    target: Optional[StrictStr] = Field(default=None, description="The target")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    use_ssh_agent: Optional[StrictBool] = Field(default=None, description="Enable ssh-agent", alias="use-ssh-agent")
    via_bastion: Optional[StrictStr] = Field(default=None, description="Deprecated. Use via-sra", alias="via-bastion")
    via_sra: Optional[StrictStr] = Field(default=None, description="The jump box server", alias="via-sra")
    __properties: ClassVar[List[str]] = ["Helper", "RcFileOverride", "bastion-ctrl-path", "bastion-ctrl-port", "bastion-ctrl-proto", "bastion-ctrl-subdomain", "cert-issuer-name", "gateway-url", "identity-file", "json", "justification", "name", "sra-ctrl-path", "sra-ctrl-port", "sra-ctrl-proto", "sra-ctrl-subdomain", "ssh-command", "ssh-extra-args", "ssh-legacy-signing-alg", "target", "token", "uid-token", "use-ssh-agent", "via-bastion", "via-sra"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Connect from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Connect from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Helper": obj.get("Helper"),
            "RcFileOverride": obj.get("RcFileOverride"),
            "bastion-ctrl-path": obj.get("bastion-ctrl-path"),
            "bastion-ctrl-port": obj.get("bastion-ctrl-port"),
            "bastion-ctrl-proto": obj.get("bastion-ctrl-proto"),
            "bastion-ctrl-subdomain": obj.get("bastion-ctrl-subdomain"),
            "cert-issuer-name": obj.get("cert-issuer-name"),
            "gateway-url": obj.get("gateway-url"),
            "identity-file": obj.get("identity-file"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "justification": obj.get("justification"),
            "name": obj.get("name"),
            "sra-ctrl-path": obj.get("sra-ctrl-path"),
            "sra-ctrl-port": obj.get("sra-ctrl-port") if obj.get("sra-ctrl-port") is not None else '9900',
            "sra-ctrl-proto": obj.get("sra-ctrl-proto") if obj.get("sra-ctrl-proto") is not None else 'http',
            "sra-ctrl-subdomain": obj.get("sra-ctrl-subdomain"),
            "ssh-command": obj.get("ssh-command"),
            "ssh-extra-args": obj.get("ssh-extra-args"),
            "ssh-legacy-signing-alg": obj.get("ssh-legacy-signing-alg") if obj.get("ssh-legacy-signing-alg") is not None else False,
            "target": obj.get("target"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "use-ssh-agent": obj.get("use-ssh-agent"),
            "via-bastion": obj.get("via-bastion"),
            "via-sra": obj.get("via-sra")
        })
        return _obj


