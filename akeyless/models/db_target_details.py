# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class DbTargetDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cloud_service_provider': 'str',
        'connection_type': 'str',
        'db_client_id': 'str',
        'db_client_secret': 'str',
        'db_host_name': 'str',
        'db_name': 'str',
        'db_port': 'str',
        'db_private_key': 'str',
        'db_private_key_passphrase': 'str',
        'db_pwd': 'str',
        'db_server_certificates': 'str',
        'db_server_name': 'str',
        'db_tenant_id': 'str',
        'db_user_name': 'str',
        'sf_account': 'str',
        'ssl_connection_certificate': 'str',
        'ssl_connection_mode': 'bool'
    }

    attribute_map = {
        'cloud_service_provider': 'cloud_service_provider',
        'connection_type': 'connection_type',
        'db_client_id': 'db_client_id',
        'db_client_secret': 'db_client_secret',
        'db_host_name': 'db_host_name',
        'db_name': 'db_name',
        'db_port': 'db_port',
        'db_private_key': 'db_private_key',
        'db_private_key_passphrase': 'db_private_key_passphrase',
        'db_pwd': 'db_pwd',
        'db_server_certificates': 'db_server_certificates',
        'db_server_name': 'db_server_name',
        'db_tenant_id': 'db_tenant_id',
        'db_user_name': 'db_user_name',
        'sf_account': 'sf_account',
        'ssl_connection_certificate': 'ssl_connection_certificate',
        'ssl_connection_mode': 'ssl_connection_mode'
    }

    def __init__(self, cloud_service_provider=None, connection_type=None, db_client_id=None, db_client_secret=None, db_host_name=None, db_name=None, db_port=None, db_private_key=None, db_private_key_passphrase=None, db_pwd=None, db_server_certificates=None, db_server_name=None, db_tenant_id=None, db_user_name=None, sf_account=None, ssl_connection_certificate=None, ssl_connection_mode=None, local_vars_configuration=None):  # noqa: E501
        """DbTargetDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cloud_service_provider = None
        self._connection_type = None
        self._db_client_id = None
        self._db_client_secret = None
        self._db_host_name = None
        self._db_name = None
        self._db_port = None
        self._db_private_key = None
        self._db_private_key_passphrase = None
        self._db_pwd = None
        self._db_server_certificates = None
        self._db_server_name = None
        self._db_tenant_id = None
        self._db_user_name = None
        self._sf_account = None
        self._ssl_connection_certificate = None
        self._ssl_connection_mode = None
        self.discriminator = None

        if cloud_service_provider is not None:
            self.cloud_service_provider = cloud_service_provider
        if connection_type is not None:
            self.connection_type = connection_type
        if db_client_id is not None:
            self.db_client_id = db_client_id
        if db_client_secret is not None:
            self.db_client_secret = db_client_secret
        if db_host_name is not None:
            self.db_host_name = db_host_name
        if db_name is not None:
            self.db_name = db_name
        if db_port is not None:
            self.db_port = db_port
        if db_private_key is not None:
            self.db_private_key = db_private_key
        if db_private_key_passphrase is not None:
            self.db_private_key_passphrase = db_private_key_passphrase
        if db_pwd is not None:
            self.db_pwd = db_pwd
        if db_server_certificates is not None:
            self.db_server_certificates = db_server_certificates
        if db_server_name is not None:
            self.db_server_name = db_server_name
        if db_tenant_id is not None:
            self.db_tenant_id = db_tenant_id
        if db_user_name is not None:
            self.db_user_name = db_user_name
        if sf_account is not None:
            self.sf_account = sf_account
        if ssl_connection_certificate is not None:
            self.ssl_connection_certificate = ssl_connection_certificate
        if ssl_connection_mode is not None:
            self.ssl_connection_mode = ssl_connection_mode

    @property
    def cloud_service_provider(self):
        """Gets the cloud_service_provider of this DbTargetDetails.  # noqa: E501


        :return: The cloud_service_provider of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._cloud_service_provider

    @cloud_service_provider.setter
    def cloud_service_provider(self, cloud_service_provider):
        """Sets the cloud_service_provider of this DbTargetDetails.


        :param cloud_service_provider: The cloud_service_provider of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._cloud_service_provider = cloud_service_provider

    @property
    def connection_type(self):
        """Gets the connection_type of this DbTargetDetails.  # noqa: E501


        :return: The connection_type of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this DbTargetDetails.


        :param connection_type: The connection_type of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._connection_type = connection_type

    @property
    def db_client_id(self):
        """Gets the db_client_id of this DbTargetDetails.  # noqa: E501


        :return: The db_client_id of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_client_id

    @db_client_id.setter
    def db_client_id(self, db_client_id):
        """Sets the db_client_id of this DbTargetDetails.


        :param db_client_id: The db_client_id of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_client_id = db_client_id

    @property
    def db_client_secret(self):
        """Gets the db_client_secret of this DbTargetDetails.  # noqa: E501


        :return: The db_client_secret of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_client_secret

    @db_client_secret.setter
    def db_client_secret(self, db_client_secret):
        """Sets the db_client_secret of this DbTargetDetails.


        :param db_client_secret: The db_client_secret of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_client_secret = db_client_secret

    @property
    def db_host_name(self):
        """Gets the db_host_name of this DbTargetDetails.  # noqa: E501


        :return: The db_host_name of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_host_name

    @db_host_name.setter
    def db_host_name(self, db_host_name):
        """Sets the db_host_name of this DbTargetDetails.


        :param db_host_name: The db_host_name of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_host_name = db_host_name

    @property
    def db_name(self):
        """Gets the db_name of this DbTargetDetails.  # noqa: E501


        :return: The db_name of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_name

    @db_name.setter
    def db_name(self, db_name):
        """Sets the db_name of this DbTargetDetails.


        :param db_name: The db_name of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_name = db_name

    @property
    def db_port(self):
        """Gets the db_port of this DbTargetDetails.  # noqa: E501


        :return: The db_port of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_port

    @db_port.setter
    def db_port(self, db_port):
        """Sets the db_port of this DbTargetDetails.


        :param db_port: The db_port of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_port = db_port

    @property
    def db_private_key(self):
        """Gets the db_private_key of this DbTargetDetails.  # noqa: E501

        (Optional) Private Key in PEM format  # noqa: E501

        :return: The db_private_key of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_private_key

    @db_private_key.setter
    def db_private_key(self, db_private_key):
        """Sets the db_private_key of this DbTargetDetails.

        (Optional) Private Key in PEM format  # noqa: E501

        :param db_private_key: The db_private_key of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_private_key = db_private_key

    @property
    def db_private_key_passphrase(self):
        """Gets the db_private_key_passphrase of this DbTargetDetails.  # noqa: E501


        :return: The db_private_key_passphrase of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_private_key_passphrase

    @db_private_key_passphrase.setter
    def db_private_key_passphrase(self, db_private_key_passphrase):
        """Sets the db_private_key_passphrase of this DbTargetDetails.


        :param db_private_key_passphrase: The db_private_key_passphrase of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_private_key_passphrase = db_private_key_passphrase

    @property
    def db_pwd(self):
        """Gets the db_pwd of this DbTargetDetails.  # noqa: E501


        :return: The db_pwd of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_pwd

    @db_pwd.setter
    def db_pwd(self, db_pwd):
        """Sets the db_pwd of this DbTargetDetails.


        :param db_pwd: The db_pwd of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_pwd = db_pwd

    @property
    def db_server_certificates(self):
        """Gets the db_server_certificates of this DbTargetDetails.  # noqa: E501

        (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host's root CA set.  # noqa: E501

        :return: The db_server_certificates of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_server_certificates

    @db_server_certificates.setter
    def db_server_certificates(self, db_server_certificates):
        """Sets the db_server_certificates of this DbTargetDetails.

        (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host's root CA set.  # noqa: E501

        :param db_server_certificates: The db_server_certificates of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_server_certificates = db_server_certificates

    @property
    def db_server_name(self):
        """Gets the db_server_name of this DbTargetDetails.  # noqa: E501

        (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client's handshake to support virtual hosting unless it is an IP address.  # noqa: E501

        :return: The db_server_name of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_server_name

    @db_server_name.setter
    def db_server_name(self, db_server_name):
        """Sets the db_server_name of this DbTargetDetails.

        (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client's handshake to support virtual hosting unless it is an IP address.  # noqa: E501

        :param db_server_name: The db_server_name of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_server_name = db_server_name

    @property
    def db_tenant_id(self):
        """Gets the db_tenant_id of this DbTargetDetails.  # noqa: E501


        :return: The db_tenant_id of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_tenant_id

    @db_tenant_id.setter
    def db_tenant_id(self, db_tenant_id):
        """Sets the db_tenant_id of this DbTargetDetails.


        :param db_tenant_id: The db_tenant_id of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_tenant_id = db_tenant_id

    @property
    def db_user_name(self):
        """Gets the db_user_name of this DbTargetDetails.  # noqa: E501


        :return: The db_user_name of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._db_user_name

    @db_user_name.setter
    def db_user_name(self, db_user_name):
        """Sets the db_user_name of this DbTargetDetails.


        :param db_user_name: The db_user_name of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._db_user_name = db_user_name

    @property
    def sf_account(self):
        """Gets the sf_account of this DbTargetDetails.  # noqa: E501


        :return: The sf_account of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._sf_account

    @sf_account.setter
    def sf_account(self, sf_account):
        """Sets the sf_account of this DbTargetDetails.


        :param sf_account: The sf_account of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._sf_account = sf_account

    @property
    def ssl_connection_certificate(self):
        """Gets the ssl_connection_certificate of this DbTargetDetails.  # noqa: E501

        (Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field  # noqa: E501

        :return: The ssl_connection_certificate of this DbTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._ssl_connection_certificate

    @ssl_connection_certificate.setter
    def ssl_connection_certificate(self, ssl_connection_certificate):
        """Sets the ssl_connection_certificate of this DbTargetDetails.

        (Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field  # noqa: E501

        :param ssl_connection_certificate: The ssl_connection_certificate of this DbTargetDetails.  # noqa: E501
        :type: str
        """

        self._ssl_connection_certificate = ssl_connection_certificate

    @property
    def ssl_connection_mode(self):
        """Gets the ssl_connection_mode of this DbTargetDetails.  # noqa: E501

        (Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB  # noqa: E501

        :return: The ssl_connection_mode of this DbTargetDetails.  # noqa: E501
        :rtype: bool
        """
        return self._ssl_connection_mode

    @ssl_connection_mode.setter
    def ssl_connection_mode(self, ssl_connection_mode):
        """Sets the ssl_connection_mode of this DbTargetDetails.

        (Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB  # noqa: E501

        :param ssl_connection_mode: The ssl_connection_mode of this DbTargetDetails.  # noqa: E501
        :type: bool
        """

        self._ssl_connection_mode = ssl_connection_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DbTargetDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DbTargetDetails):
            return True

        return self.to_dict() != other.to_dict()
