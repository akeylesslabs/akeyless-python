# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class BastionGlobalConf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allowed_bastion_urls': 'list[str]',
        'legacy_signing_alg': 'bool',
        'rdp_username_sub_claim': 'str',
        'ssh_username_sub_claim': 'str'
    }

    attribute_map = {
        'allowed_bastion_urls': 'allowed_bastion_urls',
        'legacy_signing_alg': 'legacy_signing_alg',
        'rdp_username_sub_claim': 'rdp_username_sub_claim',
        'ssh_username_sub_claim': 'ssh_username_sub_claim'
    }

    def __init__(self, allowed_bastion_urls=None, legacy_signing_alg=None, rdp_username_sub_claim=None, ssh_username_sub_claim=None, local_vars_configuration=None):  # noqa: E501
        """BastionGlobalConf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._allowed_bastion_urls = None
        self._legacy_signing_alg = None
        self._rdp_username_sub_claim = None
        self._ssh_username_sub_claim = None
        self.discriminator = None

        if allowed_bastion_urls is not None:
            self.allowed_bastion_urls = allowed_bastion_urls
        if legacy_signing_alg is not None:
            self.legacy_signing_alg = legacy_signing_alg
        if rdp_username_sub_claim is not None:
            self.rdp_username_sub_claim = rdp_username_sub_claim
        if ssh_username_sub_claim is not None:
            self.ssh_username_sub_claim = ssh_username_sub_claim

    @property
    def allowed_bastion_urls(self):
        """Gets the allowed_bastion_urls of this BastionGlobalConf.  # noqa: E501


        :return: The allowed_bastion_urls of this BastionGlobalConf.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_bastion_urls

    @allowed_bastion_urls.setter
    def allowed_bastion_urls(self, allowed_bastion_urls):
        """Sets the allowed_bastion_urls of this BastionGlobalConf.


        :param allowed_bastion_urls: The allowed_bastion_urls of this BastionGlobalConf.  # noqa: E501
        :type: list[str]
        """

        self._allowed_bastion_urls = allowed_bastion_urls

    @property
    def legacy_signing_alg(self):
        """Gets the legacy_signing_alg of this BastionGlobalConf.  # noqa: E501


        :return: The legacy_signing_alg of this BastionGlobalConf.  # noqa: E501
        :rtype: bool
        """
        return self._legacy_signing_alg

    @legacy_signing_alg.setter
    def legacy_signing_alg(self, legacy_signing_alg):
        """Sets the legacy_signing_alg of this BastionGlobalConf.


        :param legacy_signing_alg: The legacy_signing_alg of this BastionGlobalConf.  # noqa: E501
        :type: bool
        """

        self._legacy_signing_alg = legacy_signing_alg

    @property
    def rdp_username_sub_claim(self):
        """Gets the rdp_username_sub_claim of this BastionGlobalConf.  # noqa: E501


        :return: The rdp_username_sub_claim of this BastionGlobalConf.  # noqa: E501
        :rtype: str
        """
        return self._rdp_username_sub_claim

    @rdp_username_sub_claim.setter
    def rdp_username_sub_claim(self, rdp_username_sub_claim):
        """Sets the rdp_username_sub_claim of this BastionGlobalConf.


        :param rdp_username_sub_claim: The rdp_username_sub_claim of this BastionGlobalConf.  # noqa: E501
        :type: str
        """

        self._rdp_username_sub_claim = rdp_username_sub_claim

    @property
    def ssh_username_sub_claim(self):
        """Gets the ssh_username_sub_claim of this BastionGlobalConf.  # noqa: E501


        :return: The ssh_username_sub_claim of this BastionGlobalConf.  # noqa: E501
        :rtype: str
        """
        return self._ssh_username_sub_claim

    @ssh_username_sub_claim.setter
    def ssh_username_sub_claim(self, ssh_username_sub_claim):
        """Sets the ssh_username_sub_claim of this BastionGlobalConf.


        :param ssh_username_sub_claim: The ssh_username_sub_claim of this BastionGlobalConf.  # noqa: E501
        :type: str
        """

        self._ssh_username_sub_claim = ssh_username_sub_claim

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BastionGlobalConf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BastionGlobalConf):
            return True

        return self.to_dict() != other.to_dict()
