# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class ListSRASessions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'json': 'bool',
        'resource_type': 'list[str]',
        'status_type': 'list[str]',
        'token': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'json': 'json',
        'resource_type': 'resource-type',
        'status_type': 'status-type',
        'token': 'token',
        'uid_token': 'uid-token'
    }

    def __init__(self, json=False, resource_type=None, status_type=None, token=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """ListSRASessions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._json = None
        self._resource_type = None
        self._status_type = None
        self._token = None
        self._uid_token = None
        self.discriminator = None

        if json is not None:
            self.json = json
        if resource_type is not None:
            self.resource_type = resource_type
        if status_type is not None:
            self.status_type = status_type
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def json(self):
        """Gets the json of this ListSRASessions.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this ListSRASessions.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this ListSRASessions.

        Set output format to JSON  # noqa: E501

        :param json: The json of this ListSRASessions.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def resource_type(self):
        """Gets the resource_type of this ListSRASessions.  # noqa: E501

        session resource type. In case it is empty, all resources type will be returned. options: [mysql, k8s, ssh, mongodb, mssql, postgres, aws, eks, gke, rdp]  # noqa: E501

        :return: The resource_type of this ListSRASessions.  # noqa: E501
        :rtype: list[str]
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ListSRASessions.

        session resource type. In case it is empty, all resources type will be returned. options: [mysql, k8s, ssh, mongodb, mssql, postgres, aws, eks, gke, rdp]  # noqa: E501

        :param resource_type: The resource_type of this ListSRASessions.  # noqa: E501
        :type: list[str]
        """

        self._resource_type = resource_type

    @property
    def status_type(self):
        """Gets the status_type of this ListSRASessions.  # noqa: E501

        session status type. In case it is empty, only active sessions will be returned. options: [connecting, connected, failed, completed, terminated]  # noqa: E501

        :return: The status_type of this ListSRASessions.  # noqa: E501
        :rtype: list[str]
        """
        return self._status_type

    @status_type.setter
    def status_type(self, status_type):
        """Sets the status_type of this ListSRASessions.

        session status type. In case it is empty, only active sessions will be returned. options: [connecting, connected, failed, completed, terminated]  # noqa: E501

        :param status_type: The status_type of this ListSRASessions.  # noqa: E501
        :type: list[str]
        """

        self._status_type = status_type

    @property
    def token(self):
        """Gets the token of this ListSRASessions.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this ListSRASessions.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ListSRASessions.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this ListSRASessions.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this ListSRASessions.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this ListSRASessions.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this ListSRASessions.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this ListSRASessions.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListSRASessions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ListSRASessions):
            return True

        return self.to_dict() != other.to_dict()
