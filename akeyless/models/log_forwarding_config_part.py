# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.aws_s3_log_forwarding_config import AwsS3LogForwardingConfig
from akeyless.models.azure_log_analytics_forwarding_config import AzureLogAnalyticsForwardingConfig
from akeyless.models.datadog_forwarding_config import DatadogForwardingConfig
from akeyless.models.elasticsearch_log_forwarding_config import ElasticsearchLogForwardingConfig
from akeyless.models.google_chronicle_forwarding_config import GoogleChronicleForwardingConfig
from akeyless.models.logstash_log_forwarding_config import LogstashLogForwardingConfig
from akeyless.models.logz_io_log_forwarding_config import LogzIoLogForwardingConfig
from akeyless.models.splunk_log_forwarding_config import SplunkLogForwardingConfig
from akeyless.models.sumologic_log_forwarding_config import SumologicLogForwardingConfig
from akeyless.models.syslog_log_forwarding_config import SyslogLogForwardingConfig
from typing import Optional, Set
from typing_extensions import Self

class LogForwardingConfigPart(BaseModel):
    """
    LogForwardingConfigPart
    """ # noqa: E501
    aws_s3_config: Optional[AwsS3LogForwardingConfig] = None
    azure_analytics_config: Optional[AzureLogAnalyticsForwardingConfig] = None
    datadog_config: Optional[DatadogForwardingConfig] = None
    elasticsearch_config: Optional[ElasticsearchLogForwardingConfig] = None
    google_chronicle_config: Optional[GoogleChronicleForwardingConfig] = None
    json_output: Optional[StrictBool] = None
    logan_enable: Optional[StrictBool] = None
    logan_url: Optional[StrictStr] = None
    logstash_config: Optional[LogstashLogForwardingConfig] = None
    logz_io_config: Optional[LogzIoLogForwardingConfig] = None
    pull_interval_sec: Optional[StrictStr] = None
    splunk_config: Optional[SplunkLogForwardingConfig] = None
    sumo_logic_config: Optional[SumologicLogForwardingConfig] = None
    syslog_config: Optional[SyslogLogForwardingConfig] = None
    target_log_type: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["aws_s3_config", "azure_analytics_config", "datadog_config", "elasticsearch_config", "google_chronicle_config", "json_output", "logan_enable", "logan_url", "logstash_config", "logz_io_config", "pull_interval_sec", "splunk_config", "sumo_logic_config", "syslog_config", "target_log_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogForwardingConfigPart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aws_s3_config
        if self.aws_s3_config:
            _dict['aws_s3_config'] = self.aws_s3_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of azure_analytics_config
        if self.azure_analytics_config:
            _dict['azure_analytics_config'] = self.azure_analytics_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of datadog_config
        if self.datadog_config:
            _dict['datadog_config'] = self.datadog_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of elasticsearch_config
        if self.elasticsearch_config:
            _dict['elasticsearch_config'] = self.elasticsearch_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of google_chronicle_config
        if self.google_chronicle_config:
            _dict['google_chronicle_config'] = self.google_chronicle_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logstash_config
        if self.logstash_config:
            _dict['logstash_config'] = self.logstash_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of logz_io_config
        if self.logz_io_config:
            _dict['logz_io_config'] = self.logz_io_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of splunk_config
        if self.splunk_config:
            _dict['splunk_config'] = self.splunk_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sumo_logic_config
        if self.sumo_logic_config:
            _dict['sumo_logic_config'] = self.sumo_logic_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of syslog_config
        if self.syslog_config:
            _dict['syslog_config'] = self.syslog_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogForwardingConfigPart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aws_s3_config": AwsS3LogForwardingConfig.from_dict(obj["aws_s3_config"]) if obj.get("aws_s3_config") is not None else None,
            "azure_analytics_config": AzureLogAnalyticsForwardingConfig.from_dict(obj["azure_analytics_config"]) if obj.get("azure_analytics_config") is not None else None,
            "datadog_config": DatadogForwardingConfig.from_dict(obj["datadog_config"]) if obj.get("datadog_config") is not None else None,
            "elasticsearch_config": ElasticsearchLogForwardingConfig.from_dict(obj["elasticsearch_config"]) if obj.get("elasticsearch_config") is not None else None,
            "google_chronicle_config": GoogleChronicleForwardingConfig.from_dict(obj["google_chronicle_config"]) if obj.get("google_chronicle_config") is not None else None,
            "json_output": obj.get("json_output"),
            "logan_enable": obj.get("logan_enable"),
            "logan_url": obj.get("logan_url"),
            "logstash_config": LogstashLogForwardingConfig.from_dict(obj["logstash_config"]) if obj.get("logstash_config") is not None else None,
            "logz_io_config": LogzIoLogForwardingConfig.from_dict(obj["logz_io_config"]) if obj.get("logz_io_config") is not None else None,
            "pull_interval_sec": obj.get("pull_interval_sec"),
            "splunk_config": SplunkLogForwardingConfig.from_dict(obj["splunk_config"]) if obj.get("splunk_config") is not None else None,
            "sumo_logic_config": SumologicLogForwardingConfig.from_dict(obj["sumo_logic_config"]) if obj.get("sumo_logic_config") is not None else None,
            "syslog_config": SyslogLogForwardingConfig.from_dict(obj["syslog_config"]) if obj.get("syslog_config") is not None else None,
            "target_log_type": obj.get("target_log_type")
        })
        return _obj


