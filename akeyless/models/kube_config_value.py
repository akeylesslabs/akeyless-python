# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class KubeConfigValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_version': 'str',
        'clusters': 'list[KubeconfigNamedCluster]',
        'contexts': 'list[KubeconfigNamedContext]',
        'current_context': 'str',
        'kind': 'str',
        'users': 'list[KubeconfigUser]'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'clusters': 'clusters',
        'contexts': 'contexts',
        'current_context': 'current-context',
        'kind': 'kind',
        'users': 'users'
    }

    def __init__(self, api_version=None, clusters=None, contexts=None, current_context=None, kind=None, users=None, local_vars_configuration=None):  # noqa: E501
        """KubeConfigValue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_version = None
        self._clusters = None
        self._contexts = None
        self._current_context = None
        self._kind = None
        self._users = None
        self.discriminator = None

        if api_version is not None:
            self.api_version = api_version
        if clusters is not None:
            self.clusters = clusters
        if contexts is not None:
            self.contexts = contexts
        if current_context is not None:
            self.current_context = current_context
        if kind is not None:
            self.kind = kind
        if users is not None:
            self.users = users

    @property
    def api_version(self):
        """Gets the api_version of this KubeConfigValue.  # noqa: E501


        :return: The api_version of this KubeConfigValue.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this KubeConfigValue.


        :param api_version: The api_version of this KubeConfigValue.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def clusters(self):
        """Gets the clusters of this KubeConfigValue.  # noqa: E501


        :return: The clusters of this KubeConfigValue.  # noqa: E501
        :rtype: list[KubeconfigNamedCluster]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this KubeConfigValue.


        :param clusters: The clusters of this KubeConfigValue.  # noqa: E501
        :type: list[KubeconfigNamedCluster]
        """

        self._clusters = clusters

    @property
    def contexts(self):
        """Gets the contexts of this KubeConfigValue.  # noqa: E501


        :return: The contexts of this KubeConfigValue.  # noqa: E501
        :rtype: list[KubeconfigNamedContext]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this KubeConfigValue.


        :param contexts: The contexts of this KubeConfigValue.  # noqa: E501
        :type: list[KubeconfigNamedContext]
        """

        self._contexts = contexts

    @property
    def current_context(self):
        """Gets the current_context of this KubeConfigValue.  # noqa: E501


        :return: The current_context of this KubeConfigValue.  # noqa: E501
        :rtype: str
        """
        return self._current_context

    @current_context.setter
    def current_context(self, current_context):
        """Sets the current_context of this KubeConfigValue.


        :param current_context: The current_context of this KubeConfigValue.  # noqa: E501
        :type: str
        """

        self._current_context = current_context

    @property
    def kind(self):
        """Gets the kind of this KubeConfigValue.  # noqa: E501


        :return: The kind of this KubeConfigValue.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this KubeConfigValue.


        :param kind: The kind of this KubeConfigValue.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def users(self):
        """Gets the users of this KubeConfigValue.  # noqa: E501


        :return: The users of this KubeConfigValue.  # noqa: E501
        :rtype: list[KubeconfigUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this KubeConfigValue.


        :param users: The users of this KubeConfigValue.  # noqa: E501
        :type: list[KubeconfigUser]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubeConfigValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubeConfigValue):
            return True

        return self.to_dict() != other.to_dict()
