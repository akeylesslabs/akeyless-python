# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.kubeconfig_named_cluster import KubeconfigNamedCluster
from akeyless.models.kubeconfig_named_context import KubeconfigNamedContext
from akeyless.models.kubeconfig_user import KubeconfigUser
from typing import Optional, Set
from typing_extensions import Self

class KubeConfigValue(BaseModel):
    """
    KubeConfigValue
    """ # noqa: E501
    api_version: Optional[StrictStr] = Field(default=None, alias="apiVersion")
    clusters: Optional[List[KubeconfigNamedCluster]] = None
    contexts: Optional[List[KubeconfigNamedContext]] = None
    current_context: Optional[StrictStr] = Field(default=None, alias="current-context")
    kind: Optional[StrictStr] = None
    users: Optional[List[KubeconfigUser]] = None
    __properties: ClassVar[List[str]] = ["apiVersion", "clusters", "contexts", "current-context", "kind", "users"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KubeConfigValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in clusters (list)
        _items = []
        if self.clusters:
            for _item_clusters in self.clusters:
                if _item_clusters:
                    _items.append(_item_clusters.to_dict())
            _dict['clusters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in contexts (list)
        _items = []
        if self.contexts:
            for _item_contexts in self.contexts:
                if _item_contexts:
                    _items.append(_item_contexts.to_dict())
            _dict['contexts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in users (list)
        _items = []
        if self.users:
            for _item_users in self.users:
                if _item_users:
                    _items.append(_item_users.to_dict())
            _dict['users'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KubeConfigValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "apiVersion": obj.get("apiVersion"),
            "clusters": [KubeconfigNamedCluster.from_dict(_item) for _item in obj["clusters"]] if obj.get("clusters") is not None else None,
            "contexts": [KubeconfigNamedContext.from_dict(_item) for _item in obj["contexts"]] if obj.get("contexts") is not None else None,
            "current-context": obj.get("current-context"),
            "kind": obj.get("kind"),
            "users": [KubeconfigUser.from_dict(_item) for _item in obj["users"]] if obj.get("users") is not None else None
        })
        return _obj


