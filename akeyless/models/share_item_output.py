# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class ShareItemOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email_error': 'dict(str, str)',
        'items_error': 'list[ResponseStopShareItem]',
        's_token': 'str',
        'shared_users': 'list[str]',
        'shared_users_full_info': 'list[SharingItemFullInfo]',
        'sharing_url': 'str'
    }

    attribute_map = {
        'email_error': 'email_error',
        'items_error': 'items_error',
        's_token': 's_token',
        'shared_users': 'shared_users',
        'shared_users_full_info': 'shared_users_full_info',
        'sharing_url': 'sharing_url'
    }

    def __init__(self, email_error=None, items_error=None, s_token=None, shared_users=None, shared_users_full_info=None, sharing_url=None, local_vars_configuration=None):  # noqa: E501
        """ShareItemOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email_error = None
        self._items_error = None
        self._s_token = None
        self._shared_users = None
        self._shared_users_full_info = None
        self._sharing_url = None
        self.discriminator = None

        if email_error is not None:
            self.email_error = email_error
        if items_error is not None:
            self.items_error = items_error
        if s_token is not None:
            self.s_token = s_token
        if shared_users is not None:
            self.shared_users = shared_users
        if shared_users_full_info is not None:
            self.shared_users_full_info = shared_users_full_info
        if sharing_url is not None:
            self.sharing_url = sharing_url

    @property
    def email_error(self):
        """Gets the email_error of this ShareItemOutput.  # noqa: E501


        :return: The email_error of this ShareItemOutput.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._email_error

    @email_error.setter
    def email_error(self, email_error):
        """Sets the email_error of this ShareItemOutput.


        :param email_error: The email_error of this ShareItemOutput.  # noqa: E501
        :type: dict(str, str)
        """

        self._email_error = email_error

    @property
    def items_error(self):
        """Gets the items_error of this ShareItemOutput.  # noqa: E501


        :return: The items_error of this ShareItemOutput.  # noqa: E501
        :rtype: list[ResponseStopShareItem]
        """
        return self._items_error

    @items_error.setter
    def items_error(self, items_error):
        """Sets the items_error of this ShareItemOutput.


        :param items_error: The items_error of this ShareItemOutput.  # noqa: E501
        :type: list[ResponseStopShareItem]
        """

        self._items_error = items_error

    @property
    def s_token(self):
        """Gets the s_token of this ShareItemOutput.  # noqa: E501


        :return: The s_token of this ShareItemOutput.  # noqa: E501
        :rtype: str
        """
        return self._s_token

    @s_token.setter
    def s_token(self, s_token):
        """Sets the s_token of this ShareItemOutput.


        :param s_token: The s_token of this ShareItemOutput.  # noqa: E501
        :type: str
        """

        self._s_token = s_token

    @property
    def shared_users(self):
        """Gets the shared_users of this ShareItemOutput.  # noqa: E501


        :return: The shared_users of this ShareItemOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._shared_users

    @shared_users.setter
    def shared_users(self, shared_users):
        """Sets the shared_users of this ShareItemOutput.


        :param shared_users: The shared_users of this ShareItemOutput.  # noqa: E501
        :type: list[str]
        """

        self._shared_users = shared_users

    @property
    def shared_users_full_info(self):
        """Gets the shared_users_full_info of this ShareItemOutput.  # noqa: E501


        :return: The shared_users_full_info of this ShareItemOutput.  # noqa: E501
        :rtype: list[SharingItemFullInfo]
        """
        return self._shared_users_full_info

    @shared_users_full_info.setter
    def shared_users_full_info(self, shared_users_full_info):
        """Sets the shared_users_full_info of this ShareItemOutput.


        :param shared_users_full_info: The shared_users_full_info of this ShareItemOutput.  # noqa: E501
        :type: list[SharingItemFullInfo]
        """

        self._shared_users_full_info = shared_users_full_info

    @property
    def sharing_url(self):
        """Gets the sharing_url of this ShareItemOutput.  # noqa: E501


        :return: The sharing_url of this ShareItemOutput.  # noqa: E501
        :rtype: str
        """
        return self._sharing_url

    @sharing_url.setter
    def sharing_url(self, sharing_url):
        """Sets the sharing_url of this ShareItemOutput.


        :param sharing_url: The sharing_url of this ShareItemOutput.  # noqa: E501
        :type: str
        """

        self._sharing_url = sharing_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ShareItemOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ShareItemOutput):
            return True

        return self.to_dict() != other.to_dict()
