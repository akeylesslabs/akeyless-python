# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GatewayUpdateProducerRdp(BaseModel):
    """
    gatewayUpdateProducerRdp is a command that updates rdp producer [Deprecated: Use dynamic-secret-update-rdp command]
    """ # noqa: E501
    allow_user_extend_session: Optional[StrictInt] = Field(default=None, description="AllowUserExtendSession", alias="allow-user-extend-session")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    fixed_user_claim_keyname: Optional[StrictStr] = Field(default='ext_username', description="For externally provided users, denotes the key-name of IdP claim to extract the username from (relevant only for fixed-user-only=true)", alias="fixed-user-claim-keyname")
    fixed_user_only: Optional[StrictStr] = Field(default='false', description="Allow access using externally (IdP) provided username [true/false]", alias="fixed-user-only")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    name: StrictStr = Field(description="Dynamic secret name")
    new_name: Optional[StrictStr] = Field(default=None, description="Dynamic secret name", alias="new-name")
    password_length: Optional[StrictStr] = Field(default=None, description="The length of the password to be generated", alias="password-length")
    producer_encryption_key_name: Optional[StrictStr] = Field(default=None, description="Dynamic producer encryption key", alias="producer-encryption-key-name")
    rdp_admin_name: Optional[StrictStr] = Field(default=None, description="RDP Admin Name", alias="rdp-admin-name")
    rdp_admin_pwd: Optional[StrictStr] = Field(default=None, description="RDP Admin password", alias="rdp-admin-pwd")
    rdp_host_name: Optional[StrictStr] = Field(default=None, description="Hostname", alias="rdp-host-name")
    rdp_host_port: Optional[StrictStr] = Field(default='22', description="Port", alias="rdp-host-port")
    rdp_user_groups: Optional[StrictStr] = Field(default=None, description="Groups", alias="rdp-user-groups")
    secure_access_allow_external_user: Optional[StrictBool] = Field(default=False, description="Allow providing external user for a domain users", alias="secure-access-allow-external-user")
    secure_access_delay: Optional[StrictInt] = Field(default=None, description="The delay duration, in seconds, to wait after generating just-in-time credentials. Accepted range: 0-120 seconds", alias="secure-access-delay")
    secure_access_enable: Optional[StrictStr] = Field(default=None, description="Enable/Disable secure remote access [true/false]", alias="secure-access-enable")
    secure_access_host: Optional[List[StrictStr]] = Field(default=None, description="Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)", alias="secure-access-host")
    secure_access_rd_gateway_server: Optional[StrictStr] = Field(default=None, description="RD Gateway server", alias="secure-access-rd-gateway-server")
    secure_access_rdp_domain: Optional[StrictStr] = Field(default=None, description="Required when the Dynamic Secret is used for a domain user", alias="secure-access-rdp-domain")
    secure_access_rdp_user: Optional[StrictStr] = Field(default=None, description="Override the RDP Domain username", alias="secure-access-rdp-user")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Add tags attached to this object")
    target_name: Optional[StrictStr] = Field(default=None, description="Target name", alias="target-name")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    user_ttl: Optional[StrictStr] = Field(default='60m', description="User TTL", alias="user-ttl")
    warn_user_before_expiration: Optional[StrictInt] = Field(default=None, description="WarnBeforeUserExpiration", alias="warn-user-before-expiration")
    __properties: ClassVar[List[str]] = ["allow-user-extend-session", "delete_protection", "fixed-user-claim-keyname", "fixed-user-only", "json", "name", "new-name", "password-length", "producer-encryption-key-name", "rdp-admin-name", "rdp-admin-pwd", "rdp-host-name", "rdp-host-port", "rdp-user-groups", "secure-access-allow-external-user", "secure-access-delay", "secure-access-enable", "secure-access-host", "secure-access-rd-gateway-server", "secure-access-rdp-domain", "secure-access-rdp-user", "tags", "target-name", "token", "uid-token", "user-ttl", "warn-user-before-expiration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GatewayUpdateProducerRdp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GatewayUpdateProducerRdp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow-user-extend-session": obj.get("allow-user-extend-session"),
            "delete_protection": obj.get("delete_protection"),
            "fixed-user-claim-keyname": obj.get("fixed-user-claim-keyname") if obj.get("fixed-user-claim-keyname") is not None else 'ext_username',
            "fixed-user-only": obj.get("fixed-user-only") if obj.get("fixed-user-only") is not None else 'false',
            "json": obj.get("json") if obj.get("json") is not None else False,
            "name": obj.get("name"),
            "new-name": obj.get("new-name"),
            "password-length": obj.get("password-length"),
            "producer-encryption-key-name": obj.get("producer-encryption-key-name"),
            "rdp-admin-name": obj.get("rdp-admin-name"),
            "rdp-admin-pwd": obj.get("rdp-admin-pwd"),
            "rdp-host-name": obj.get("rdp-host-name"),
            "rdp-host-port": obj.get("rdp-host-port") if obj.get("rdp-host-port") is not None else '22',
            "rdp-user-groups": obj.get("rdp-user-groups"),
            "secure-access-allow-external-user": obj.get("secure-access-allow-external-user") if obj.get("secure-access-allow-external-user") is not None else False,
            "secure-access-delay": obj.get("secure-access-delay"),
            "secure-access-enable": obj.get("secure-access-enable"),
            "secure-access-host": obj.get("secure-access-host"),
            "secure-access-rd-gateway-server": obj.get("secure-access-rd-gateway-server"),
            "secure-access-rdp-domain": obj.get("secure-access-rdp-domain"),
            "secure-access-rdp-user": obj.get("secure-access-rdp-user"),
            "tags": obj.get("tags"),
            "target-name": obj.get("target-name"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "user-ttl": obj.get("user-ttl") if obj.get("user-ttl") is not None else '60m',
            "warn-user-before-expiration": obj.get("warn-user-before-expiration")
        })
        return _obj


