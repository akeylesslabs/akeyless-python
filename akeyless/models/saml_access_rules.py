# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.saml_attribute import SAMLAttribute
from typing import Optional, Set
from typing_extensions import Self

class SAMLAccessRules(BaseModel):
    """
    SAMLAccessRules
    """ # noqa: E501
    allowed_redirect_uris: Optional[List[StrictStr]] = Field(default=None, description="Allowed redirect URIs after the authentication", alias="allowed_redirect_URIs")
    bound_attributes: Optional[List[SAMLAttribute]] = Field(default=None, description="The attributes that login is restricted to.")
    idp_metadata_url: Optional[StrictStr] = Field(default=None, description="IDP metadata url")
    idp_metadata_xml: Optional[StrictStr] = Field(default=None, description="IDP metadata XML")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="A unique identifier to distinguish different users")
    __properties: ClassVar[List[str]] = ["allowed_redirect_URIs", "bound_attributes", "idp_metadata_url", "idp_metadata_xml", "unique_identifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SAMLAccessRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bound_attributes (list)
        _items = []
        if self.bound_attributes:
            for _item_bound_attributes in self.bound_attributes:
                if _item_bound_attributes:
                    _items.append(_item_bound_attributes.to_dict())
            _dict['bound_attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SAMLAccessRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed_redirect_URIs": obj.get("allowed_redirect_URIs"),
            "bound_attributes": [SAMLAttribute.from_dict(_item) for _item in obj["bound_attributes"]] if obj.get("bound_attributes") is not None else None,
            "idp_metadata_url": obj.get("idp_metadata_url"),
            "idp_metadata_xml": obj.get("idp_metadata_xml"),
            "unique_identifier": obj.get("unique_identifier")
        })
        return _obj


