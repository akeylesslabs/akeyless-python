# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SSHCertificateIssueDetails(BaseModel):
    """
    SSHCertificateIssueDetails
    """ # noqa: E501
    allowed_domains: Optional[List[StrictStr]] = Field(default=None, description="Relevant for host certificate")
    allowed_user_key_lengths: Optional[Dict[str, StrictInt]] = None
    allowed_users: Optional[List[StrictStr]] = Field(default=None, description="Relevant for user certificate")
    cert_type: Optional[StrictInt] = None
    critical_options: Optional[Dict[str, StrictStr]] = None
    extensions: Optional[Dict[str, StrictStr]] = None
    externally_provided_user_sub_claim_key: Optional[StrictStr] = Field(default=None, description="ExternallyProvidedUserSubClaimKey is the claim key name where the user name should be taken from")
    is_externally_provided_user: Optional[StrictBool] = Field(default=None, description="IsExternallyProvidedUser is true if allow users should be taken from claims and not from AllowedUsers")
    principals: Optional[List[StrictStr]] = None
    static_key_id: Optional[StrictStr] = Field(default=None, description="In case it is empty, the key ID will be combination of user identifiers and a random string")
    __properties: ClassVar[List[str]] = ["allowed_domains", "allowed_user_key_lengths", "allowed_users", "cert_type", "critical_options", "extensions", "externally_provided_user_sub_claim_key", "is_externally_provided_user", "principals", "static_key_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SSHCertificateIssueDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SSHCertificateIssueDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowed_domains": obj.get("allowed_domains"),
            "allowed_user_key_lengths": obj.get("allowed_user_key_lengths"),
            "allowed_users": obj.get("allowed_users"),
            "cert_type": obj.get("cert_type"),
            "critical_options": obj.get("critical_options"),
            "extensions": obj.get("extensions"),
            "externally_provided_user_sub_claim_key": obj.get("externally_provided_user_sub_claim_key"),
            "is_externally_provided_user": obj.get("is_externally_provided_user"),
            "principals": obj.get("principals"),
            "static_key_id": obj.get("static_key_id")
        })
        return _obj


