# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateAuthMethodOAuth2(BaseModel):
    """
    createAuthMethodOAuth2 is a command that creates a new auth method that will be able to authenticate using Oauth2. [Deprecated: Use auth-method-create-oauth2 command]
    """ # noqa: E501
    access_expires: Optional[StrictInt] = Field(default=0, description="Access expiration date in Unix timestamp (select 0 for access without expiry date)", alias="access-expires")
    audience: Optional[StrictStr] = Field(default=None, description="The audience in the JWT")
    audit_logs_claims: Optional[List[StrictStr]] = Field(default=None, description="Subclaims to include in audit logs, e.g \"--audit-logs-claims email --audit-logs-claims username\"", alias="audit-logs-claims")
    bound_client_ids: Optional[List[StrictStr]] = Field(default=None, description="The clients ids that the access is restricted to", alias="bound-client-ids")
    bound_ips: Optional[List[StrictStr]] = Field(default=None, description="A CIDR whitelist with the IPs that the access is restricted to", alias="bound-ips")
    cert: Optional[StrictStr] = Field(default=None, description="CertificateFile Path to a file that contain the certificate in a PEM format.")
    cert_file_data: Optional[StrictStr] = Field(default=None, description="CertificateFileData PEM Certificate in a Base64 format.", alias="cert-file-data")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default=None, description="Auth Method description")
    expiration_event_in: Optional[List[StrictStr]] = Field(default=None, description="How many days before the expiration of the auth method would you like to be notified.", alias="expiration-event-in")
    force_sub_claims: Optional[StrictBool] = Field(default=None, description="if true: enforce role-association must include sub claims", alias="force-sub-claims")
    gateway_url: Optional[StrictStr] = Field(default=None, description="Akeyless Gateway URL (Configuration Management port). Relevant only when the jwks-uri is accessible only from the gateway.", alias="gateway-url")
    gw_bound_ips: Optional[List[StrictStr]] = Field(default=None, description="A CIDR whitelist with the GW IPs that the access is restricted to", alias="gw-bound-ips")
    issuer: Optional[StrictStr] = Field(default=None, description="Issuer URL")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    jwks_json_data: Optional[StrictStr] = Field(default=None, description="The JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server. base64 encoded string", alias="jwks-json-data")
    jwks_uri: Optional[StrictStr] = Field(default=None, description="The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.", alias="jwks-uri")
    jwt_ttl: Optional[StrictInt] = Field(default=0, description="Jwt TTL", alias="jwt-ttl")
    name: StrictStr = Field(description="Auth Method name")
    product_type: Optional[List[StrictStr]] = Field(default=None, description="Choose the relevant product type for the auth method [sm, sra, pm, dp, ca]", alias="product-type")
    subclaims_delimiters: Optional[List[StrictStr]] = Field(default=None, description="A list of additional sub claims delimiters (relevant only for SAML, OIDC, OAuth2/JWT)", alias="subclaims-delimiters")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    unique_identifier: StrictStr = Field(description="A unique identifier (ID) value should be configured for OAuth2, LDAP and SAML authentication method types and is usually a value such as the email, username, or upn for example. Whenever a user logs in with a token, these authentication types issue a \"sub claim\" that contains details uniquely identifying that user. This sub claim includes a key containing the ID value that you configured, and is used to distinguish between different users from within the same organization.", alias="unique-identifier")
    __properties: ClassVar[List[str]] = ["access-expires", "audience", "audit-logs-claims", "bound-client-ids", "bound-ips", "cert", "cert-file-data", "delete_protection", "description", "expiration-event-in", "force-sub-claims", "gateway-url", "gw-bound-ips", "issuer", "json", "jwks-json-data", "jwks-uri", "jwt-ttl", "name", "product-type", "subclaims-delimiters", "token", "uid-token", "unique-identifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateAuthMethodOAuth2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateAuthMethodOAuth2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access-expires": obj.get("access-expires") if obj.get("access-expires") is not None else 0,
            "audience": obj.get("audience"),
            "audit-logs-claims": obj.get("audit-logs-claims"),
            "bound-client-ids": obj.get("bound-client-ids"),
            "bound-ips": obj.get("bound-ips"),
            "cert": obj.get("cert"),
            "cert-file-data": obj.get("cert-file-data"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "expiration-event-in": obj.get("expiration-event-in"),
            "force-sub-claims": obj.get("force-sub-claims"),
            "gateway-url": obj.get("gateway-url"),
            "gw-bound-ips": obj.get("gw-bound-ips"),
            "issuer": obj.get("issuer"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "jwks-json-data": obj.get("jwks-json-data"),
            "jwks-uri": obj.get("jwks-uri"),
            "jwt-ttl": obj.get("jwt-ttl") if obj.get("jwt-ttl") is not None else 0,
            "name": obj.get("name"),
            "product-type": obj.get("product-type"),
            "subclaims-delimiters": obj.get("subclaims-delimiters"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "unique-identifier": obj.get("unique-identifier")
        })
        return _obj


