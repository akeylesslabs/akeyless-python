# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.admins_config_part import AdminsConfigPart
from akeyless.models.cache_config_part import CacheConfigPart
from akeyless.models.cf_config_part import CFConfigPart
from akeyless.models.default_config_part import DefaultConfigPart
from akeyless.models.gateway_message_queue_info import GatewayMessageQueueInfo
from akeyless.models.general_config_part import GeneralConfigPart
from akeyless.models.k8_s_auths_config_part import K8SAuthsConfigPart
from akeyless.models.kerberos_config_part import KerberosConfigPart
from akeyless.models.kmip_config_part import KMIPConfigPart
from akeyless.models.ldap_config_part import LdapConfigPart
from akeyless.models.leadership_config_part import LeadershipConfigPart
from akeyless.models.log_forwarding_config_part import LogForwardingConfigPart
from akeyless.models.migrations_config_part import MigrationsConfigPart
from akeyless.models.producers_config_part import ProducersConfigPart
from akeyless.models.rotators_config_part import RotatorsConfigPart
from typing import Optional, Set
from typing_extensions import Self

class AkeylessGatewayConfig(BaseModel):
    """
    AkeylessGatewayConfig
    """ # noqa: E501
    admins: Optional[AdminsConfigPart] = None
    cache: Optional[CacheConfigPart] = None
    cf: Optional[CFConfigPart] = None
    config_protection_key_name: Optional[StrictStr] = None
    general: Optional[GeneralConfigPart] = None
    k8s_auths: Optional[K8SAuthsConfigPart] = None
    kerberos: Optional[KerberosConfigPart] = None
    kmip_clients: Optional[KMIPConfigPart] = None
    ldap: Optional[LdapConfigPart] = None
    leadership: Optional[LeadershipConfigPart] = None
    log_forwarding: Optional[LogForwardingConfigPart] = None
    message_queue_info: Optional[GatewayMessageQueueInfo] = None
    migrations: Optional[MigrationsConfigPart] = None
    producers: Optional[ProducersConfigPart] = None
    rotators: Optional[RotatorsConfigPart] = None
    saml: Optional[DefaultConfigPart] = None
    version: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["admins", "cache", "cf", "config_protection_key_name", "general", "k8s_auths", "kerberos", "kmip_clients", "ldap", "leadership", "log_forwarding", "message_queue_info", "migrations", "producers", "rotators", "saml", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AkeylessGatewayConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of admins
        if self.admins:
            _dict['admins'] = self.admins.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cache
        if self.cache:
            _dict['cache'] = self.cache.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cf
        if self.cf:
            _dict['cf'] = self.cf.to_dict()
        # override the default output from pydantic by calling `to_dict()` of general
        if self.general:
            _dict['general'] = self.general.to_dict()
        # override the default output from pydantic by calling `to_dict()` of k8s_auths
        if self.k8s_auths:
            _dict['k8s_auths'] = self.k8s_auths.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kerberos
        if self.kerberos:
            _dict['kerberos'] = self.kerberos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kmip_clients
        if self.kmip_clients:
            _dict['kmip_clients'] = self.kmip_clients.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ldap
        if self.ldap:
            _dict['ldap'] = self.ldap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leadership
        if self.leadership:
            _dict['leadership'] = self.leadership.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log_forwarding
        if self.log_forwarding:
            _dict['log_forwarding'] = self.log_forwarding.to_dict()
        # override the default output from pydantic by calling `to_dict()` of message_queue_info
        if self.message_queue_info:
            _dict['message_queue_info'] = self.message_queue_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of migrations
        if self.migrations:
            _dict['migrations'] = self.migrations.to_dict()
        # override the default output from pydantic by calling `to_dict()` of producers
        if self.producers:
            _dict['producers'] = self.producers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rotators
        if self.rotators:
            _dict['rotators'] = self.rotators.to_dict()
        # override the default output from pydantic by calling `to_dict()` of saml
        if self.saml:
            _dict['saml'] = self.saml.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AkeylessGatewayConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "admins": AdminsConfigPart.from_dict(obj["admins"]) if obj.get("admins") is not None else None,
            "cache": CacheConfigPart.from_dict(obj["cache"]) if obj.get("cache") is not None else None,
            "cf": CFConfigPart.from_dict(obj["cf"]) if obj.get("cf") is not None else None,
            "config_protection_key_name": obj.get("config_protection_key_name"),
            "general": GeneralConfigPart.from_dict(obj["general"]) if obj.get("general") is not None else None,
            "k8s_auths": K8SAuthsConfigPart.from_dict(obj["k8s_auths"]) if obj.get("k8s_auths") is not None else None,
            "kerberos": KerberosConfigPart.from_dict(obj["kerberos"]) if obj.get("kerberos") is not None else None,
            "kmip_clients": KMIPConfigPart.from_dict(obj["kmip_clients"]) if obj.get("kmip_clients") is not None else None,
            "ldap": LdapConfigPart.from_dict(obj["ldap"]) if obj.get("ldap") is not None else None,
            "leadership": LeadershipConfigPart.from_dict(obj["leadership"]) if obj.get("leadership") is not None else None,
            "log_forwarding": LogForwardingConfigPart.from_dict(obj["log_forwarding"]) if obj.get("log_forwarding") is not None else None,
            "message_queue_info": GatewayMessageQueueInfo.from_dict(obj["message_queue_info"]) if obj.get("message_queue_info") is not None else None,
            "migrations": MigrationsConfigPart.from_dict(obj["migrations"]) if obj.get("migrations") is not None else None,
            "producers": ProducersConfigPart.from_dict(obj["producers"]) if obj.get("producers") is not None else None,
            "rotators": RotatorsConfigPart.from_dict(obj["rotators"]) if obj.get("rotators") is not None else None,
            "saml": DefaultConfigPart.from_dict(obj["saml"]) if obj.get("saml") is not None else None,
            "version": obj.get("version")
        })
        return _obj


