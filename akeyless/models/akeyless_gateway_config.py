# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class AkeylessGatewayConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'admins': 'AdminsConfigPart',
        'cache': 'CacheConfigPart',
        'cf': 'CFConfigPart',
        'config_protection_key_name': 'str',
        'general': 'GeneralConfigPart',
        'ldap': 'LdapConfigPart',
        'leadership': 'LeadershipConfigPart',
        'log_forwarding': 'LogForwardingConfigPart',
        'migrations': 'MigrationsConfigPart',
        'producers': 'ProducersConfigPart',
        'rotators': 'RotatorsConfigPart',
        'saml': 'DefaultConfigPart',
        'uidentity': 'UIdentityConfigPart',
        'version': 'int'
    }

    attribute_map = {
        'admins': 'admins',
        'cache': 'cache',
        'cf': 'cf',
        'config_protection_key_name': 'config_protection_key_name',
        'general': 'general',
        'ldap': 'ldap',
        'leadership': 'leadership',
        'log_forwarding': 'log_forwarding',
        'migrations': 'migrations',
        'producers': 'producers',
        'rotators': 'rotators',
        'saml': 'saml',
        'uidentity': 'uidentity',
        'version': 'version'
    }

    def __init__(self, admins=None, cache=None, cf=None, config_protection_key_name=None, general=None, ldap=None, leadership=None, log_forwarding=None, migrations=None, producers=None, rotators=None, saml=None, uidentity=None, version=None, local_vars_configuration=None):  # noqa: E501
        """AkeylessGatewayConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._admins = None
        self._cache = None
        self._cf = None
        self._config_protection_key_name = None
        self._general = None
        self._ldap = None
        self._leadership = None
        self._log_forwarding = None
        self._migrations = None
        self._producers = None
        self._rotators = None
        self._saml = None
        self._uidentity = None
        self._version = None
        self.discriminator = None

        if admins is not None:
            self.admins = admins
        if cache is not None:
            self.cache = cache
        if cf is not None:
            self.cf = cf
        if config_protection_key_name is not None:
            self.config_protection_key_name = config_protection_key_name
        if general is not None:
            self.general = general
        if ldap is not None:
            self.ldap = ldap
        if leadership is not None:
            self.leadership = leadership
        if log_forwarding is not None:
            self.log_forwarding = log_forwarding
        if migrations is not None:
            self.migrations = migrations
        if producers is not None:
            self.producers = producers
        if rotators is not None:
            self.rotators = rotators
        if saml is not None:
            self.saml = saml
        if uidentity is not None:
            self.uidentity = uidentity
        if version is not None:
            self.version = version

    @property
    def admins(self):
        """Gets the admins of this AkeylessGatewayConfig.  # noqa: E501


        :return: The admins of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: AdminsConfigPart
        """
        return self._admins

    @admins.setter
    def admins(self, admins):
        """Sets the admins of this AkeylessGatewayConfig.


        :param admins: The admins of this AkeylessGatewayConfig.  # noqa: E501
        :type: AdminsConfigPart
        """

        self._admins = admins

    @property
    def cache(self):
        """Gets the cache of this AkeylessGatewayConfig.  # noqa: E501


        :return: The cache of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: CacheConfigPart
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this AkeylessGatewayConfig.


        :param cache: The cache of this AkeylessGatewayConfig.  # noqa: E501
        :type: CacheConfigPart
        """

        self._cache = cache

    @property
    def cf(self):
        """Gets the cf of this AkeylessGatewayConfig.  # noqa: E501


        :return: The cf of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: CFConfigPart
        """
        return self._cf

    @cf.setter
    def cf(self, cf):
        """Sets the cf of this AkeylessGatewayConfig.


        :param cf: The cf of this AkeylessGatewayConfig.  # noqa: E501
        :type: CFConfigPart
        """

        self._cf = cf

    @property
    def config_protection_key_name(self):
        """Gets the config_protection_key_name of this AkeylessGatewayConfig.  # noqa: E501


        :return: The config_protection_key_name of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: str
        """
        return self._config_protection_key_name

    @config_protection_key_name.setter
    def config_protection_key_name(self, config_protection_key_name):
        """Sets the config_protection_key_name of this AkeylessGatewayConfig.


        :param config_protection_key_name: The config_protection_key_name of this AkeylessGatewayConfig.  # noqa: E501
        :type: str
        """

        self._config_protection_key_name = config_protection_key_name

    @property
    def general(self):
        """Gets the general of this AkeylessGatewayConfig.  # noqa: E501


        :return: The general of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: GeneralConfigPart
        """
        return self._general

    @general.setter
    def general(self, general):
        """Sets the general of this AkeylessGatewayConfig.


        :param general: The general of this AkeylessGatewayConfig.  # noqa: E501
        :type: GeneralConfigPart
        """

        self._general = general

    @property
    def ldap(self):
        """Gets the ldap of this AkeylessGatewayConfig.  # noqa: E501


        :return: The ldap of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: LdapConfigPart
        """
        return self._ldap

    @ldap.setter
    def ldap(self, ldap):
        """Sets the ldap of this AkeylessGatewayConfig.


        :param ldap: The ldap of this AkeylessGatewayConfig.  # noqa: E501
        :type: LdapConfigPart
        """

        self._ldap = ldap

    @property
    def leadership(self):
        """Gets the leadership of this AkeylessGatewayConfig.  # noqa: E501


        :return: The leadership of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: LeadershipConfigPart
        """
        return self._leadership

    @leadership.setter
    def leadership(self, leadership):
        """Sets the leadership of this AkeylessGatewayConfig.


        :param leadership: The leadership of this AkeylessGatewayConfig.  # noqa: E501
        :type: LeadershipConfigPart
        """

        self._leadership = leadership

    @property
    def log_forwarding(self):
        """Gets the log_forwarding of this AkeylessGatewayConfig.  # noqa: E501


        :return: The log_forwarding of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: LogForwardingConfigPart
        """
        return self._log_forwarding

    @log_forwarding.setter
    def log_forwarding(self, log_forwarding):
        """Sets the log_forwarding of this AkeylessGatewayConfig.


        :param log_forwarding: The log_forwarding of this AkeylessGatewayConfig.  # noqa: E501
        :type: LogForwardingConfigPart
        """

        self._log_forwarding = log_forwarding

    @property
    def migrations(self):
        """Gets the migrations of this AkeylessGatewayConfig.  # noqa: E501


        :return: The migrations of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: MigrationsConfigPart
        """
        return self._migrations

    @migrations.setter
    def migrations(self, migrations):
        """Sets the migrations of this AkeylessGatewayConfig.


        :param migrations: The migrations of this AkeylessGatewayConfig.  # noqa: E501
        :type: MigrationsConfigPart
        """

        self._migrations = migrations

    @property
    def producers(self):
        """Gets the producers of this AkeylessGatewayConfig.  # noqa: E501


        :return: The producers of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: ProducersConfigPart
        """
        return self._producers

    @producers.setter
    def producers(self, producers):
        """Sets the producers of this AkeylessGatewayConfig.


        :param producers: The producers of this AkeylessGatewayConfig.  # noqa: E501
        :type: ProducersConfigPart
        """

        self._producers = producers

    @property
    def rotators(self):
        """Gets the rotators of this AkeylessGatewayConfig.  # noqa: E501


        :return: The rotators of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: RotatorsConfigPart
        """
        return self._rotators

    @rotators.setter
    def rotators(self, rotators):
        """Sets the rotators of this AkeylessGatewayConfig.


        :param rotators: The rotators of this AkeylessGatewayConfig.  # noqa: E501
        :type: RotatorsConfigPart
        """

        self._rotators = rotators

    @property
    def saml(self):
        """Gets the saml of this AkeylessGatewayConfig.  # noqa: E501


        :return: The saml of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: DefaultConfigPart
        """
        return self._saml

    @saml.setter
    def saml(self, saml):
        """Sets the saml of this AkeylessGatewayConfig.


        :param saml: The saml of this AkeylessGatewayConfig.  # noqa: E501
        :type: DefaultConfigPart
        """

        self._saml = saml

    @property
    def uidentity(self):
        """Gets the uidentity of this AkeylessGatewayConfig.  # noqa: E501


        :return: The uidentity of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: UIdentityConfigPart
        """
        return self._uidentity

    @uidentity.setter
    def uidentity(self, uidentity):
        """Sets the uidentity of this AkeylessGatewayConfig.


        :param uidentity: The uidentity of this AkeylessGatewayConfig.  # noqa: E501
        :type: UIdentityConfigPart
        """

        self._uidentity = uidentity

    @property
    def version(self):
        """Gets the version of this AkeylessGatewayConfig.  # noqa: E501


        :return: The version of this AkeylessGatewayConfig.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AkeylessGatewayConfig.


        :param version: The version of this AkeylessGatewayConfig.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AkeylessGatewayConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AkeylessGatewayConfig):
            return True

        return self.to_dict() != other.to_dict()
