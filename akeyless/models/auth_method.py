# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.auth_expiration_event import AuthExpirationEvent
from akeyless.models.auth_method_access_info import AuthMethodAccessInfo
from akeyless.models.auth_method_additional_data import AuthMethodAdditionalData
from akeyless.models.auth_method_role_association import AuthMethodRoleAssociation
from typing import Optional, Set
from typing_extensions import Self

class AuthMethod(BaseModel):
    """
    AuthMethod
    """ # noqa: E501
    access_date: Optional[datetime] = None
    access_date_display: Optional[StrictStr] = None
    access_info: Optional[AuthMethodAccessInfo] = None
    account_id: Optional[StrictStr] = None
    associated_gw_ids: Optional[List[StrictInt]] = None
    auth_method_access_id: Optional[StrictStr] = None
    auth_method_additional_data: Optional[AuthMethodAdditionalData] = None
    auth_method_id: Optional[StrictInt] = None
    auth_method_name: Optional[StrictStr] = None
    auth_method_roles_assoc: Optional[List[AuthMethodRoleAssociation]] = None
    client_permissions: Optional[List[StrictStr]] = None
    creation_date: Optional[datetime] = None
    delete_protection: Optional[StrictBool] = None
    description: Optional[StrictStr] = None
    expiration_events: Optional[List[AuthExpirationEvent]] = None
    is_approved: Optional[StrictBool] = None
    modification_date: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["access_date", "access_date_display", "access_info", "account_id", "associated_gw_ids", "auth_method_access_id", "auth_method_additional_data", "auth_method_id", "auth_method_name", "auth_method_roles_assoc", "client_permissions", "creation_date", "delete_protection", "description", "expiration_events", "is_approved", "modification_date"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of access_info
        if self.access_info:
            _dict['access_info'] = self.access_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of auth_method_additional_data
        if self.auth_method_additional_data:
            _dict['auth_method_additional_data'] = self.auth_method_additional_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in auth_method_roles_assoc (list)
        _items = []
        if self.auth_method_roles_assoc:
            for _item_auth_method_roles_assoc in self.auth_method_roles_assoc:
                if _item_auth_method_roles_assoc:
                    _items.append(_item_auth_method_roles_assoc.to_dict())
            _dict['auth_method_roles_assoc'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in expiration_events (list)
        _items = []
        if self.expiration_events:
            for _item_expiration_events in self.expiration_events:
                if _item_expiration_events:
                    _items.append(_item_expiration_events.to_dict())
            _dict['expiration_events'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_date": obj.get("access_date"),
            "access_date_display": obj.get("access_date_display"),
            "access_info": AuthMethodAccessInfo.from_dict(obj["access_info"]) if obj.get("access_info") is not None else None,
            "account_id": obj.get("account_id"),
            "associated_gw_ids": obj.get("associated_gw_ids"),
            "auth_method_access_id": obj.get("auth_method_access_id"),
            "auth_method_additional_data": AuthMethodAdditionalData.from_dict(obj["auth_method_additional_data"]) if obj.get("auth_method_additional_data") is not None else None,
            "auth_method_id": obj.get("auth_method_id"),
            "auth_method_name": obj.get("auth_method_name"),
            "auth_method_roles_assoc": [AuthMethodRoleAssociation.from_dict(_item) for _item in obj["auth_method_roles_assoc"]] if obj.get("auth_method_roles_assoc") is not None else None,
            "client_permissions": obj.get("client_permissions"),
            "creation_date": obj.get("creation_date"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "expiration_events": [AuthExpirationEvent.from_dict(_item) for _item in obj["expiration_events"]] if obj.get("expiration_events") is not None else None,
            "is_approved": obj.get("is_approved"),
            "modification_date": obj.get("modification_date")
        })
        return _obj


