# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class GetGroupOutput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_id': 'str',
        'creation_date': 'datetime',
        'description': 'str',
        'group_alias': 'str',
        'group_id': 'str',
        'group_name': 'str',
        'modification_date': 'datetime',
        'user_assignments': 'list[AccessPermissionAssignment]'
    }

    attribute_map = {
        'account_id': 'account_id',
        'creation_date': 'creation_date',
        'description': 'description',
        'group_alias': 'group_alias',
        'group_id': 'group_id',
        'group_name': 'group_name',
        'modification_date': 'modification_date',
        'user_assignments': 'user_assignments'
    }

    def __init__(self, account_id=None, creation_date=None, description=None, group_alias=None, group_id=None, group_name=None, modification_date=None, user_assignments=None, local_vars_configuration=None):  # noqa: E501
        """GetGroupOutput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_id = None
        self._creation_date = None
        self._description = None
        self._group_alias = None
        self._group_id = None
        self._group_name = None
        self._modification_date = None
        self._user_assignments = None
        self.discriminator = None

        if account_id is not None:
            self.account_id = account_id
        if creation_date is not None:
            self.creation_date = creation_date
        if description is not None:
            self.description = description
        if group_alias is not None:
            self.group_alias = group_alias
        if group_id is not None:
            self.group_id = group_id
        if group_name is not None:
            self.group_name = group_name
        if modification_date is not None:
            self.modification_date = modification_date
        if user_assignments is not None:
            self.user_assignments = user_assignments

    @property
    def account_id(self):
        """Gets the account_id of this GetGroupOutput.  # noqa: E501


        :return: The account_id of this GetGroupOutput.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetGroupOutput.


        :param account_id: The account_id of this GetGroupOutput.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def creation_date(self):
        """Gets the creation_date of this GetGroupOutput.  # noqa: E501


        :return: The creation_date of this GetGroupOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this GetGroupOutput.


        :param creation_date: The creation_date of this GetGroupOutput.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this GetGroupOutput.  # noqa: E501


        :return: The description of this GetGroupOutput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetGroupOutput.


        :param description: The description of this GetGroupOutput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def group_alias(self):
        """Gets the group_alias of this GetGroupOutput.  # noqa: E501


        :return: The group_alias of this GetGroupOutput.  # noqa: E501
        :rtype: str
        """
        return self._group_alias

    @group_alias.setter
    def group_alias(self, group_alias):
        """Sets the group_alias of this GetGroupOutput.


        :param group_alias: The group_alias of this GetGroupOutput.  # noqa: E501
        :type: str
        """

        self._group_alias = group_alias

    @property
    def group_id(self):
        """Gets the group_id of this GetGroupOutput.  # noqa: E501


        :return: The group_id of this GetGroupOutput.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GetGroupOutput.


        :param group_id: The group_id of this GetGroupOutput.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def group_name(self):
        """Gets the group_name of this GetGroupOutput.  # noqa: E501


        :return: The group_name of this GetGroupOutput.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GetGroupOutput.


        :param group_name: The group_name of this GetGroupOutput.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def modification_date(self):
        """Gets the modification_date of this GetGroupOutput.  # noqa: E501


        :return: The modification_date of this GetGroupOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._modification_date

    @modification_date.setter
    def modification_date(self, modification_date):
        """Sets the modification_date of this GetGroupOutput.


        :param modification_date: The modification_date of this GetGroupOutput.  # noqa: E501
        :type: datetime
        """

        self._modification_date = modification_date

    @property
    def user_assignments(self):
        """Gets the user_assignments of this GetGroupOutput.  # noqa: E501


        :return: The user_assignments of this GetGroupOutput.  # noqa: E501
        :rtype: list[AccessPermissionAssignment]
        """
        return self._user_assignments

    @user_assignments.setter
    def user_assignments(self, user_assignments):
        """Sets the user_assignments of this GetGroupOutput.


        :param user_assignments: The user_assignments of this GetGroupOutput.  # noqa: E501
        :type: list[AccessPermissionAssignment]
        """

        self._user_assignments = user_assignments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetGroupOutput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GetGroupOutput):
            return True

        return self.to_dict() != other.to_dict()
