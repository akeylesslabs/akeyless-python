# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class K8SAuthsConfigLastChange(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'changed_k8s_auths_ids': 'list[str]',
        'created_k8s_auths_ids': 'list[str]',
        'deleted_k8s_auths_ids': 'list[str]'
    }

    attribute_map = {
        'changed_k8s_auths_ids': 'changed_k8s_auths_ids',
        'created_k8s_auths_ids': 'created_k8s_auths_ids',
        'deleted_k8s_auths_ids': 'deleted_k8s_auths_ids'
    }

    def __init__(self, changed_k8s_auths_ids=None, created_k8s_auths_ids=None, deleted_k8s_auths_ids=None, local_vars_configuration=None):  # noqa: E501
        """K8SAuthsConfigLastChange - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._changed_k8s_auths_ids = None
        self._created_k8s_auths_ids = None
        self._deleted_k8s_auths_ids = None
        self.discriminator = None

        if changed_k8s_auths_ids is not None:
            self.changed_k8s_auths_ids = changed_k8s_auths_ids
        if created_k8s_auths_ids is not None:
            self.created_k8s_auths_ids = created_k8s_auths_ids
        if deleted_k8s_auths_ids is not None:
            self.deleted_k8s_auths_ids = deleted_k8s_auths_ids

    @property
    def changed_k8s_auths_ids(self):
        """Gets the changed_k8s_auths_ids of this K8SAuthsConfigLastChange.  # noqa: E501


        :return: The changed_k8s_auths_ids of this K8SAuthsConfigLastChange.  # noqa: E501
        :rtype: list[str]
        """
        return self._changed_k8s_auths_ids

    @changed_k8s_auths_ids.setter
    def changed_k8s_auths_ids(self, changed_k8s_auths_ids):
        """Sets the changed_k8s_auths_ids of this K8SAuthsConfigLastChange.


        :param changed_k8s_auths_ids: The changed_k8s_auths_ids of this K8SAuthsConfigLastChange.  # noqa: E501
        :type: list[str]
        """

        self._changed_k8s_auths_ids = changed_k8s_auths_ids

    @property
    def created_k8s_auths_ids(self):
        """Gets the created_k8s_auths_ids of this K8SAuthsConfigLastChange.  # noqa: E501


        :return: The created_k8s_auths_ids of this K8SAuthsConfigLastChange.  # noqa: E501
        :rtype: list[str]
        """
        return self._created_k8s_auths_ids

    @created_k8s_auths_ids.setter
    def created_k8s_auths_ids(self, created_k8s_auths_ids):
        """Sets the created_k8s_auths_ids of this K8SAuthsConfigLastChange.


        :param created_k8s_auths_ids: The created_k8s_auths_ids of this K8SAuthsConfigLastChange.  # noqa: E501
        :type: list[str]
        """

        self._created_k8s_auths_ids = created_k8s_auths_ids

    @property
    def deleted_k8s_auths_ids(self):
        """Gets the deleted_k8s_auths_ids of this K8SAuthsConfigLastChange.  # noqa: E501


        :return: The deleted_k8s_auths_ids of this K8SAuthsConfigLastChange.  # noqa: E501
        :rtype: list[str]
        """
        return self._deleted_k8s_auths_ids

    @deleted_k8s_auths_ids.setter
    def deleted_k8s_auths_ids(self, deleted_k8s_auths_ids):
        """Sets the deleted_k8s_auths_ids of this K8SAuthsConfigLastChange.


        :param deleted_k8s_auths_ids: The deleted_k8s_auths_ids of this K8SAuthsConfigLastChange.  # noqa: E501
        :type: list[str]
        """

        self._deleted_k8s_auths_ids = deleted_k8s_auths_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, K8SAuthsConfigLastChange):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, K8SAuthsConfigLastChange):
            return True

        return self.to_dict() != other.to_dict()
