# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.certificate_analytic_aggregation import CertificateAnalyticAggregation
from akeyless.models.clients_usage_report import ClientsUsageReport
from akeyless.models.usage_report_summary import UsageReportSummary
from typing import Optional, Set
from typing_extensions import Self

class AllAnalyticsData(BaseModel):
    """
    AllAnalyticsData
    """ # noqa: E501
    analytics_data: Optional[Dict[str, List[List[StrictStr]]]] = None
    certificates_expiry_data: Optional[CertificateAnalyticAggregation] = None
    clients_usage_reports: Optional[Dict[str, ClientsUsageReport]] = None
    date_updated: Optional[StrictInt] = None
    usage_reports: Optional[Dict[str, UsageReportSummary]] = None
    __properties: ClassVar[List[str]] = ["analytics_data", "certificates_expiry_data", "clients_usage_reports", "date_updated", "usage_reports"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AllAnalyticsData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of certificates_expiry_data
        if self.certificates_expiry_data:
            _dict['certificates_expiry_data'] = self.certificates_expiry_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in clients_usage_reports (dict)
        _field_dict = {}
        if self.clients_usage_reports:
            for _key_clients_usage_reports in self.clients_usage_reports:
                if self.clients_usage_reports[_key_clients_usage_reports]:
                    _field_dict[_key_clients_usage_reports] = self.clients_usage_reports[_key_clients_usage_reports].to_dict()
            _dict['clients_usage_reports'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in usage_reports (dict)
        _field_dict = {}
        if self.usage_reports:
            for _key_usage_reports in self.usage_reports:
                if self.usage_reports[_key_usage_reports]:
                    _field_dict[_key_usage_reports] = self.usage_reports[_key_usage_reports].to_dict()
            _dict['usage_reports'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AllAnalyticsData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "analytics_data": obj.get("analytics_data"),
            "certificates_expiry_data": CertificateAnalyticAggregation.from_dict(obj["certificates_expiry_data"]) if obj.get("certificates_expiry_data") is not None else None,
            "clients_usage_reports": dict(
                (_k, ClientsUsageReport.from_dict(_v))
                for _k, _v in obj["clients_usage_reports"].items()
            )
            if obj.get("clients_usage_reports") is not None
            else None,
            "date_updated": obj.get("date_updated"),
            "usage_reports": dict(
                (_k, UsageReportSummary.from_dict(_v))
                for _k, _v in obj["usage_reports"].items()
            )
            if obj.get("usage_reports") is not None
            else None
        })
        return _obj


