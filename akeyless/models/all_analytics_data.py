# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class AllAnalyticsData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'analytics_data': 'dict(str, list[list[str]])',
        'certificates_expiry_data': 'CertificateAnalyticAggregation',
        'clients_usage_reports': 'dict(str, ClientsUsageReport)',
        'date_updated': 'int',
        'usage_reports': 'dict(str, UsageReportSummary)'
    }

    attribute_map = {
        'analytics_data': 'analytics_data',
        'certificates_expiry_data': 'certificates_expiry_data',
        'clients_usage_reports': 'clients_usage_reports',
        'date_updated': 'date_updated',
        'usage_reports': 'usage_reports'
    }

    def __init__(self, analytics_data=None, certificates_expiry_data=None, clients_usage_reports=None, date_updated=None, usage_reports=None, local_vars_configuration=None):  # noqa: E501
        """AllAnalyticsData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._analytics_data = None
        self._certificates_expiry_data = None
        self._clients_usage_reports = None
        self._date_updated = None
        self._usage_reports = None
        self.discriminator = None

        if analytics_data is not None:
            self.analytics_data = analytics_data
        if certificates_expiry_data is not None:
            self.certificates_expiry_data = certificates_expiry_data
        if clients_usage_reports is not None:
            self.clients_usage_reports = clients_usage_reports
        if date_updated is not None:
            self.date_updated = date_updated
        if usage_reports is not None:
            self.usage_reports = usage_reports

    @property
    def analytics_data(self):
        """Gets the analytics_data of this AllAnalyticsData.  # noqa: E501


        :return: The analytics_data of this AllAnalyticsData.  # noqa: E501
        :rtype: dict(str, list[list[str]])
        """
        return self._analytics_data

    @analytics_data.setter
    def analytics_data(self, analytics_data):
        """Sets the analytics_data of this AllAnalyticsData.


        :param analytics_data: The analytics_data of this AllAnalyticsData.  # noqa: E501
        :type: dict(str, list[list[str]])
        """

        self._analytics_data = analytics_data

    @property
    def certificates_expiry_data(self):
        """Gets the certificates_expiry_data of this AllAnalyticsData.  # noqa: E501


        :return: The certificates_expiry_data of this AllAnalyticsData.  # noqa: E501
        :rtype: CertificateAnalyticAggregation
        """
        return self._certificates_expiry_data

    @certificates_expiry_data.setter
    def certificates_expiry_data(self, certificates_expiry_data):
        """Sets the certificates_expiry_data of this AllAnalyticsData.


        :param certificates_expiry_data: The certificates_expiry_data of this AllAnalyticsData.  # noqa: E501
        :type: CertificateAnalyticAggregation
        """

        self._certificates_expiry_data = certificates_expiry_data

    @property
    def clients_usage_reports(self):
        """Gets the clients_usage_reports of this AllAnalyticsData.  # noqa: E501


        :return: The clients_usage_reports of this AllAnalyticsData.  # noqa: E501
        :rtype: dict(str, ClientsUsageReport)
        """
        return self._clients_usage_reports

    @clients_usage_reports.setter
    def clients_usage_reports(self, clients_usage_reports):
        """Sets the clients_usage_reports of this AllAnalyticsData.


        :param clients_usage_reports: The clients_usage_reports of this AllAnalyticsData.  # noqa: E501
        :type: dict(str, ClientsUsageReport)
        """

        self._clients_usage_reports = clients_usage_reports

    @property
    def date_updated(self):
        """Gets the date_updated of this AllAnalyticsData.  # noqa: E501


        :return: The date_updated of this AllAnalyticsData.  # noqa: E501
        :rtype: int
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this AllAnalyticsData.


        :param date_updated: The date_updated of this AllAnalyticsData.  # noqa: E501
        :type: int
        """

        self._date_updated = date_updated

    @property
    def usage_reports(self):
        """Gets the usage_reports of this AllAnalyticsData.  # noqa: E501


        :return: The usage_reports of this AllAnalyticsData.  # noqa: E501
        :rtype: dict(str, UsageReportSummary)
        """
        return self._usage_reports

    @usage_reports.setter
    def usage_reports(self, usage_reports):
        """Sets the usage_reports of this AllAnalyticsData.


        :param usage_reports: The usage_reports of this AllAnalyticsData.  # noqa: E501
        :type: dict(str, UsageReportSummary)
        """

        self._usage_reports = usage_reports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllAnalyticsData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AllAnalyticsData):
            return True

        return self.to_dict() != other.to_dict()
