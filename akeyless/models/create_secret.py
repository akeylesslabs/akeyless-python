# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CreateSecret(BaseModel):
    """
    CreateSecret
    """ # noqa: E501
    accessibility: Optional[StrictStr] = Field(default='regular', description="for personal password manager")
    change_event: Optional[StrictStr] = Field(default=None, description="Trigger an event when a secret value changed [true/false] (Relevant only for Static Secret)", alias="change-event")
    custom_field: Optional[Dict[str, StrictStr]] = Field(default=None, description="For Password Management use, additional fields", alias="custom-field")
    delete_protection: Optional[StrictStr] = Field(default=None, description="Protection from accidental deletion of this object [true/false]")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    format: Optional[StrictStr] = Field(default='text', description="Secret format [text/json/key-value] (relevant only for type 'generic')")
    inject_url: Optional[List[StrictStr]] = Field(default=None, description="For Password Management use, reflect the website context", alias="inject-url")
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    max_versions: Optional[StrictStr] = Field(default=None, description="Set the maximum number of versions, limited by the account settings defaults.", alias="max-versions")
    metadata: Optional[StrictStr] = Field(default=None, description="Deprecated - use description")
    multiline_value: Optional[StrictBool] = Field(default=None, description="The provided value is a multiline value (separated by '\\n')")
    name: StrictStr = Field(description="Secret name")
    password: Optional[StrictStr] = Field(default=None, description="For Password Management use, additional fields")
    protection_key: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)")
    secure_access_bastion_issuer: Optional[StrictStr] = Field(default=None, description="Deprecated. use secure-access-certificate-issuer", alias="secure-access-bastion-issuer")
    secure_access_certificate_issuer: Optional[StrictStr] = Field(default=None, description="Path to the SSH Certificate Issuer for your Akeyless Secure Access", alias="secure-access-certificate-issuer")
    secure_access_enable: Optional[StrictStr] = Field(default=None, description="Enable/Disable secure remote access [true/false]", alias="secure-access-enable")
    secure_access_gateway: Optional[StrictStr] = Field(default=None, alias="secure-access-gateway")
    secure_access_host: Optional[List[StrictStr]] = Field(default=None, description="Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)", alias="secure-access-host")
    secure_access_rdp_user: Optional[StrictStr] = Field(default=None, description="Remote Desktop Username", alias="secure-access-rdp-user")
    secure_access_ssh_creds: Optional[StrictStr] = Field(default=None, description="Static-Secret values contains SSH Credentials, either Private Key or Password [password/private-key]", alias="secure-access-ssh-creds")
    secure_access_ssh_user: Optional[StrictStr] = Field(default=None, description="Override the SSH username as indicated in SSH Certificate Issuer", alias="secure-access-ssh-user")
    secure_access_url: Optional[StrictStr] = Field(default=None, description="Destination URL to inject secrets", alias="secure-access-url")
    secure_access_web_browsing: Optional[StrictBool] = Field(default=False, description="Secure browser via Akeyless's Secure Remote Access (SRA)", alias="secure-access-web-browsing")
    secure_access_web_proxy: Optional[StrictBool] = Field(default=False, description="Web-Proxy via Akeyless's Secure Remote Access (SRA)", alias="secure-access-web-proxy")
    tags: Optional[List[StrictStr]] = Field(default=None, description="Add tags attached to this object")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    type: Optional[StrictStr] = Field(default='generic', description="The secret sub type [generic/password]")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    username: Optional[StrictStr] = Field(default=None, description="For Password Management use")
    value: StrictStr = Field(description="The secret value (relevant only for type 'generic')")
    __properties: ClassVar[List[str]] = ["accessibility", "change-event", "custom-field", "delete_protection", "description", "format", "inject-url", "json", "max-versions", "metadata", "multiline_value", "name", "password", "protection_key", "secure-access-bastion-issuer", "secure-access-certificate-issuer", "secure-access-enable", "secure-access-gateway", "secure-access-host", "secure-access-rdp-user", "secure-access-ssh-creds", "secure-access-ssh-user", "secure-access-url", "secure-access-web-browsing", "secure-access-web-proxy", "tags", "token", "type", "uid-token", "username", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSecret from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSecret from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessibility": obj.get("accessibility") if obj.get("accessibility") is not None else 'regular',
            "change-event": obj.get("change-event"),
            "custom-field": obj.get("custom-field"),
            "delete_protection": obj.get("delete_protection"),
            "description": obj.get("description"),
            "format": obj.get("format") if obj.get("format") is not None else 'text',
            "inject-url": obj.get("inject-url"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "max-versions": obj.get("max-versions"),
            "metadata": obj.get("metadata"),
            "multiline_value": obj.get("multiline_value"),
            "name": obj.get("name"),
            "password": obj.get("password"),
            "protection_key": obj.get("protection_key"),
            "secure-access-bastion-issuer": obj.get("secure-access-bastion-issuer"),
            "secure-access-certificate-issuer": obj.get("secure-access-certificate-issuer"),
            "secure-access-enable": obj.get("secure-access-enable"),
            "secure-access-gateway": obj.get("secure-access-gateway"),
            "secure-access-host": obj.get("secure-access-host"),
            "secure-access-rdp-user": obj.get("secure-access-rdp-user"),
            "secure-access-ssh-creds": obj.get("secure-access-ssh-creds"),
            "secure-access-ssh-user": obj.get("secure-access-ssh-user"),
            "secure-access-url": obj.get("secure-access-url"),
            "secure-access-web-browsing": obj.get("secure-access-web-browsing") if obj.get("secure-access-web-browsing") is not None else False,
            "secure-access-web-proxy": obj.get("secure-access-web-proxy") if obj.get("secure-access-web-proxy") is not None else False,
            "tags": obj.get("tags"),
            "token": obj.get("token"),
            "type": obj.get("type") if obj.get("type") is not None else 'generic',
            "uid-token": obj.get("uid-token"),
            "username": obj.get("username"),
            "value": obj.get("value")
        })
        return _obj


