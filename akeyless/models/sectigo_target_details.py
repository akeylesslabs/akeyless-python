# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class SectigoTargetDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'certificate_profile_id': 'int',
        'customer_uri': 'str',
        'external_requester': 'str',
        'org_id': 'int',
        'password': 'str',
        'timeout': 'int',
        'username': 'str'
    }

    attribute_map = {
        'certificate_profile_id': 'certificate_profile_id',
        'customer_uri': 'customer_uri',
        'external_requester': 'external_requester',
        'org_id': 'org_id',
        'password': 'password',
        'timeout': 'timeout',
        'username': 'username'
    }

    def __init__(self, certificate_profile_id=None, customer_uri=None, external_requester=None, org_id=None, password=None, timeout=None, username=None, local_vars_configuration=None):  # noqa: E501
        """SectigoTargetDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._certificate_profile_id = None
        self._customer_uri = None
        self._external_requester = None
        self._org_id = None
        self._password = None
        self._timeout = None
        self._username = None
        self.discriminator = None

        if certificate_profile_id is not None:
            self.certificate_profile_id = certificate_profile_id
        if customer_uri is not None:
            self.customer_uri = customer_uri
        if external_requester is not None:
            self.external_requester = external_requester
        if org_id is not None:
            self.org_id = org_id
        if password is not None:
            self.password = password
        if timeout is not None:
            self.timeout = timeout
        if username is not None:
            self.username = username

    @property
    def certificate_profile_id(self):
        """Gets the certificate_profile_id of this SectigoTargetDetails.  # noqa: E501


        :return: The certificate_profile_id of this SectigoTargetDetails.  # noqa: E501
        :rtype: int
        """
        return self._certificate_profile_id

    @certificate_profile_id.setter
    def certificate_profile_id(self, certificate_profile_id):
        """Sets the certificate_profile_id of this SectigoTargetDetails.


        :param certificate_profile_id: The certificate_profile_id of this SectigoTargetDetails.  # noqa: E501
        :type: int
        """

        self._certificate_profile_id = certificate_profile_id

    @property
    def customer_uri(self):
        """Gets the customer_uri of this SectigoTargetDetails.  # noqa: E501


        :return: The customer_uri of this SectigoTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._customer_uri

    @customer_uri.setter
    def customer_uri(self, customer_uri):
        """Sets the customer_uri of this SectigoTargetDetails.


        :param customer_uri: The customer_uri of this SectigoTargetDetails.  # noqa: E501
        :type: str
        """

        self._customer_uri = customer_uri

    @property
    def external_requester(self):
        """Gets the external_requester of this SectigoTargetDetails.  # noqa: E501


        :return: The external_requester of this SectigoTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._external_requester

    @external_requester.setter
    def external_requester(self, external_requester):
        """Sets the external_requester of this SectigoTargetDetails.


        :param external_requester: The external_requester of this SectigoTargetDetails.  # noqa: E501
        :type: str
        """

        self._external_requester = external_requester

    @property
    def org_id(self):
        """Gets the org_id of this SectigoTargetDetails.  # noqa: E501


        :return: The org_id of this SectigoTargetDetails.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this SectigoTargetDetails.


        :param org_id: The org_id of this SectigoTargetDetails.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def password(self):
        """Gets the password of this SectigoTargetDetails.  # noqa: E501


        :return: The password of this SectigoTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SectigoTargetDetails.


        :param password: The password of this SectigoTargetDetails.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def timeout(self):
        """Gets the timeout of this SectigoTargetDetails.  # noqa: E501

        A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.  # noqa: E501

        :return: The timeout of this SectigoTargetDetails.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this SectigoTargetDetails.

        A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.  # noqa: E501

        :param timeout: The timeout of this SectigoTargetDetails.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def username(self):
        """Gets the username of this SectigoTargetDetails.  # noqa: E501


        :return: The username of this SectigoTargetDetails.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this SectigoTargetDetails.


        :param username: The username of this SectigoTargetDetails.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SectigoTargetDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SectigoTargetDetails):
            return True

        return self.to_dict() != other.to_dict()
