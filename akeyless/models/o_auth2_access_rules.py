# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from akeyless.models.o_auth2_custom_claim import OAuth2CustomClaim
from typing import Optional, Set
from typing_extensions import Self

class OAuth2AccessRules(BaseModel):
    """
    OAuth2AccessRules contains access rules specific to OAuth2 authentication method.
    """ # noqa: E501
    audience: Optional[StrictStr] = Field(default=None, description="The audience in the JWT.")
    authorized_gw_cluster_name: Optional[StrictStr] = Field(default=None, description="The gateway cluster name that is authorized to access JWKeySetURL")
    bound_claims: Optional[List[OAuth2CustomClaim]] = Field(default=None, description="The claims that login is restricted to.")
    bound_clients_id: Optional[List[StrictStr]] = Field(default=None, description="The clients ids that login is restricted to.")
    certificate: Optional[StrictStr] = Field(default=None, description="Certificate to use when calling jwks_uri from the gateway. in PEM format")
    issuer: Optional[StrictStr] = Field(default=None, description="Issuer URL")
    jwks_json_data: Optional[StrictStr] = Field(default=None, description="The JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server. base64 encoded string")
    jwks_uri: Optional[StrictStr] = Field(default=None, description="The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.")
    unique_identifier: Optional[StrictStr] = Field(default=None, description="A unique identifier to distinguish different users")
    __properties: ClassVar[List[str]] = ["audience", "authorized_gw_cluster_name", "bound_claims", "bound_clients_id", "certificate", "issuer", "jwks_json_data", "jwks_uri", "unique_identifier"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OAuth2AccessRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in bound_claims (list)
        _items = []
        if self.bound_claims:
            for _item_bound_claims in self.bound_claims:
                if _item_bound_claims:
                    _items.append(_item_bound_claims.to_dict())
            _dict['bound_claims'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OAuth2AccessRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "audience": obj.get("audience"),
            "authorized_gw_cluster_name": obj.get("authorized_gw_cluster_name"),
            "bound_claims": [OAuth2CustomClaim.from_dict(_item) for _item in obj["bound_claims"]] if obj.get("bound_claims") is not None else None,
            "bound_clients_id": obj.get("bound_clients_id"),
            "certificate": obj.get("certificate"),
            "issuer": obj.get("issuer"),
            "jwks_json_data": obj.get("jwks_json_data"),
            "jwks_uri": obj.get("jwks_uri"),
            "unique_identifier": obj.get("unique_identifier")
        })
        return _obj


