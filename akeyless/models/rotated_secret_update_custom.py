# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class RotatedSecretUpdateCustom(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'add_tag': 'list[str]',
        'authentication_credentials': 'str',
        'auto_rotate': 'str',
        'custom_payload': 'str',
        'delete_protection': 'str',
        'description': 'str',
        'json': 'bool',
        'keep_prev_version': 'str',
        'key': 'str',
        'name': 'str',
        'new_name': 'str',
        'password_length': 'str',
        'rm_tag': 'list[str]',
        'rotate_after_disconnect': 'str',
        'rotation_hour': 'int',
        'rotation_interval': 'str',
        'secure_access_allow_external_user': 'bool',
        'secure_access_bastion_issuer': 'str',
        'secure_access_enable': 'str',
        'secure_access_host': 'list[str]',
        'secure_access_rdp_domain': 'str',
        'secure_access_rdp_user': 'str',
        'secure_access_ssh_user': 'str',
        'secure_access_url': 'str',
        'secure_access_web': 'bool',
        'secure_access_web_browsing': 'bool',
        'secure_access_web_proxy': 'bool',
        'token': 'str',
        'uid_token': 'str'
    }

    attribute_map = {
        'add_tag': 'add-tag',
        'authentication_credentials': 'authentication-credentials',
        'auto_rotate': 'auto-rotate',
        'custom_payload': 'custom-payload',
        'delete_protection': 'delete_protection',
        'description': 'description',
        'json': 'json',
        'keep_prev_version': 'keep-prev-version',
        'key': 'key',
        'name': 'name',
        'new_name': 'new-name',
        'password_length': 'password-length',
        'rm_tag': 'rm-tag',
        'rotate_after_disconnect': 'rotate-after-disconnect',
        'rotation_hour': 'rotation-hour',
        'rotation_interval': 'rotation-interval',
        'secure_access_allow_external_user': 'secure-access-allow-external-user',
        'secure_access_bastion_issuer': 'secure-access-bastion-issuer',
        'secure_access_enable': 'secure-access-enable',
        'secure_access_host': 'secure-access-host',
        'secure_access_rdp_domain': 'secure-access-rdp-domain',
        'secure_access_rdp_user': 'secure-access-rdp-user',
        'secure_access_ssh_user': 'secure-access-ssh-user',
        'secure_access_url': 'secure-access-url',
        'secure_access_web': 'secure-access-web',
        'secure_access_web_browsing': 'secure-access-web-browsing',
        'secure_access_web_proxy': 'secure-access-web-proxy',
        'token': 'token',
        'uid_token': 'uid-token'
    }

    def __init__(self, add_tag=None, authentication_credentials='use-user-creds', auto_rotate=None, custom_payload=None, delete_protection=None, description='default_metadata', json=False, keep_prev_version=None, key=None, name=None, new_name=None, password_length=None, rm_tag=None, rotate_after_disconnect='false', rotation_hour=None, rotation_interval=None, secure_access_allow_external_user=False, secure_access_bastion_issuer=None, secure_access_enable=None, secure_access_host=None, secure_access_rdp_domain=None, secure_access_rdp_user=None, secure_access_ssh_user=None, secure_access_url=None, secure_access_web=False, secure_access_web_browsing=False, secure_access_web_proxy=False, token=None, uid_token=None, local_vars_configuration=None):  # noqa: E501
        """RotatedSecretUpdateCustom - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._add_tag = None
        self._authentication_credentials = None
        self._auto_rotate = None
        self._custom_payload = None
        self._delete_protection = None
        self._description = None
        self._json = None
        self._keep_prev_version = None
        self._key = None
        self._name = None
        self._new_name = None
        self._password_length = None
        self._rm_tag = None
        self._rotate_after_disconnect = None
        self._rotation_hour = None
        self._rotation_interval = None
        self._secure_access_allow_external_user = None
        self._secure_access_bastion_issuer = None
        self._secure_access_enable = None
        self._secure_access_host = None
        self._secure_access_rdp_domain = None
        self._secure_access_rdp_user = None
        self._secure_access_ssh_user = None
        self._secure_access_url = None
        self._secure_access_web = None
        self._secure_access_web_browsing = None
        self._secure_access_web_proxy = None
        self._token = None
        self._uid_token = None
        self.discriminator = None

        if add_tag is not None:
            self.add_tag = add_tag
        if authentication_credentials is not None:
            self.authentication_credentials = authentication_credentials
        if auto_rotate is not None:
            self.auto_rotate = auto_rotate
        if custom_payload is not None:
            self.custom_payload = custom_payload
        if delete_protection is not None:
            self.delete_protection = delete_protection
        if description is not None:
            self.description = description
        if json is not None:
            self.json = json
        if keep_prev_version is not None:
            self.keep_prev_version = keep_prev_version
        if key is not None:
            self.key = key
        self.name = name
        if new_name is not None:
            self.new_name = new_name
        if password_length is not None:
            self.password_length = password_length
        if rm_tag is not None:
            self.rm_tag = rm_tag
        if rotate_after_disconnect is not None:
            self.rotate_after_disconnect = rotate_after_disconnect
        if rotation_hour is not None:
            self.rotation_hour = rotation_hour
        if rotation_interval is not None:
            self.rotation_interval = rotation_interval
        if secure_access_allow_external_user is not None:
            self.secure_access_allow_external_user = secure_access_allow_external_user
        if secure_access_bastion_issuer is not None:
            self.secure_access_bastion_issuer = secure_access_bastion_issuer
        if secure_access_enable is not None:
            self.secure_access_enable = secure_access_enable
        if secure_access_host is not None:
            self.secure_access_host = secure_access_host
        if secure_access_rdp_domain is not None:
            self.secure_access_rdp_domain = secure_access_rdp_domain
        if secure_access_rdp_user is not None:
            self.secure_access_rdp_user = secure_access_rdp_user
        if secure_access_ssh_user is not None:
            self.secure_access_ssh_user = secure_access_ssh_user
        if secure_access_url is not None:
            self.secure_access_url = secure_access_url
        if secure_access_web is not None:
            self.secure_access_web = secure_access_web
        if secure_access_web_browsing is not None:
            self.secure_access_web_browsing = secure_access_web_browsing
        if secure_access_web_proxy is not None:
            self.secure_access_web_proxy = secure_access_web_proxy
        if token is not None:
            self.token = token
        if uid_token is not None:
            self.uid_token = uid_token

    @property
    def add_tag(self):
        """Gets the add_tag of this RotatedSecretUpdateCustom.  # noqa: E501

        List of the new tags that will be attached to this item  # noqa: E501

        :return: The add_tag of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: list[str]
        """
        return self._add_tag

    @add_tag.setter
    def add_tag(self, add_tag):
        """Sets the add_tag of this RotatedSecretUpdateCustom.

        List of the new tags that will be attached to this item  # noqa: E501

        :param add_tag: The add_tag of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: list[str]
        """

        self._add_tag = add_tag

    @property
    def authentication_credentials(self):
        """Gets the authentication_credentials of this RotatedSecretUpdateCustom.  # noqa: E501

        The credentials to connect with use-user-creds/use-target-creds  # noqa: E501

        :return: The authentication_credentials of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._authentication_credentials

    @authentication_credentials.setter
    def authentication_credentials(self, authentication_credentials):
        """Sets the authentication_credentials of this RotatedSecretUpdateCustom.

        The credentials to connect with use-user-creds/use-target-creds  # noqa: E501

        :param authentication_credentials: The authentication_credentials of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._authentication_credentials = authentication_credentials

    @property
    def auto_rotate(self):
        """Gets the auto_rotate of this RotatedSecretUpdateCustom.  # noqa: E501

        Whether to automatically rotate every --rotation-interval days, or disable existing automatic rotation [true/false]  # noqa: E501

        :return: The auto_rotate of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._auto_rotate

    @auto_rotate.setter
    def auto_rotate(self, auto_rotate):
        """Sets the auto_rotate of this RotatedSecretUpdateCustom.

        Whether to automatically rotate every --rotation-interval days, or disable existing automatic rotation [true/false]  # noqa: E501

        :param auto_rotate: The auto_rotate of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._auto_rotate = auto_rotate

    @property
    def custom_payload(self):
        """Gets the custom_payload of this RotatedSecretUpdateCustom.  # noqa: E501

        Secret payload to be sent with rotation request  # noqa: E501

        :return: The custom_payload of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._custom_payload

    @custom_payload.setter
    def custom_payload(self, custom_payload):
        """Sets the custom_payload of this RotatedSecretUpdateCustom.

        Secret payload to be sent with rotation request  # noqa: E501

        :param custom_payload: The custom_payload of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._custom_payload = custom_payload

    @property
    def delete_protection(self):
        """Gets the delete_protection of this RotatedSecretUpdateCustom.  # noqa: E501

        Protection from accidental deletion of this item [true/false]  # noqa: E501

        :return: The delete_protection of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._delete_protection

    @delete_protection.setter
    def delete_protection(self, delete_protection):
        """Sets the delete_protection of this RotatedSecretUpdateCustom.

        Protection from accidental deletion of this item [true/false]  # noqa: E501

        :param delete_protection: The delete_protection of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._delete_protection = delete_protection

    @property
    def description(self):
        """Gets the description of this RotatedSecretUpdateCustom.  # noqa: E501

        Description of the object  # noqa: E501

        :return: The description of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RotatedSecretUpdateCustom.

        Description of the object  # noqa: E501

        :param description: The description of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def json(self):
        """Gets the json of this RotatedSecretUpdateCustom.  # noqa: E501

        Set output format to JSON  # noqa: E501

        :return: The json of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: bool
        """
        return self._json

    @json.setter
    def json(self, json):
        """Sets the json of this RotatedSecretUpdateCustom.

        Set output format to JSON  # noqa: E501

        :param json: The json of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: bool
        """

        self._json = json

    @property
    def keep_prev_version(self):
        """Gets the keep_prev_version of this RotatedSecretUpdateCustom.  # noqa: E501

        Whether to keep previous version [true/false]. If not set, use default according to account settings  # noqa: E501

        :return: The keep_prev_version of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._keep_prev_version

    @keep_prev_version.setter
    def keep_prev_version(self, keep_prev_version):
        """Sets the keep_prev_version of this RotatedSecretUpdateCustom.

        Whether to keep previous version [true/false]. If not set, use default according to account settings  # noqa: E501

        :param keep_prev_version: The keep_prev_version of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._keep_prev_version = keep_prev_version

    @property
    def key(self):
        """Gets the key of this RotatedSecretUpdateCustom.  # noqa: E501

        The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)  # noqa: E501

        :return: The key of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this RotatedSecretUpdateCustom.

        The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)  # noqa: E501

        :param key: The key of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this RotatedSecretUpdateCustom.  # noqa: E501

        Rotated secret name  # noqa: E501

        :return: The name of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RotatedSecretUpdateCustom.

        Rotated secret name  # noqa: E501

        :param name: The name of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def new_name(self):
        """Gets the new_name of this RotatedSecretUpdateCustom.  # noqa: E501

        New item name  # noqa: E501

        :return: The new_name of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._new_name

    @new_name.setter
    def new_name(self, new_name):
        """Sets the new_name of this RotatedSecretUpdateCustom.

        New item name  # noqa: E501

        :param new_name: The new_name of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._new_name = new_name

    @property
    def password_length(self):
        """Gets the password_length of this RotatedSecretUpdateCustom.  # noqa: E501

        The length of the password to be generated  # noqa: E501

        :return: The password_length of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._password_length

    @password_length.setter
    def password_length(self, password_length):
        """Sets the password_length of this RotatedSecretUpdateCustom.

        The length of the password to be generated  # noqa: E501

        :param password_length: The password_length of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._password_length = password_length

    @property
    def rm_tag(self):
        """Gets the rm_tag of this RotatedSecretUpdateCustom.  # noqa: E501

        List of the existent tags that will be removed from this item  # noqa: E501

        :return: The rm_tag of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: list[str]
        """
        return self._rm_tag

    @rm_tag.setter
    def rm_tag(self, rm_tag):
        """Sets the rm_tag of this RotatedSecretUpdateCustom.

        List of the existent tags that will be removed from this item  # noqa: E501

        :param rm_tag: The rm_tag of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: list[str]
        """

        self._rm_tag = rm_tag

    @property
    def rotate_after_disconnect(self):
        """Gets the rotate_after_disconnect of this RotatedSecretUpdateCustom.  # noqa: E501

        Rotate the value of the secret after SRA session ends [true/false]  # noqa: E501

        :return: The rotate_after_disconnect of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._rotate_after_disconnect

    @rotate_after_disconnect.setter
    def rotate_after_disconnect(self, rotate_after_disconnect):
        """Sets the rotate_after_disconnect of this RotatedSecretUpdateCustom.

        Rotate the value of the secret after SRA session ends [true/false]  # noqa: E501

        :param rotate_after_disconnect: The rotate_after_disconnect of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._rotate_after_disconnect = rotate_after_disconnect

    @property
    def rotation_hour(self):
        """Gets the rotation_hour of this RotatedSecretUpdateCustom.  # noqa: E501

        The Hour of the rotation in UTC  # noqa: E501

        :return: The rotation_hour of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: int
        """
        return self._rotation_hour

    @rotation_hour.setter
    def rotation_hour(self, rotation_hour):
        """Sets the rotation_hour of this RotatedSecretUpdateCustom.

        The Hour of the rotation in UTC  # noqa: E501

        :param rotation_hour: The rotation_hour of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: int
        """

        self._rotation_hour = rotation_hour

    @property
    def rotation_interval(self):
        """Gets the rotation_interval of this RotatedSecretUpdateCustom.  # noqa: E501

        The number of days to wait between every automatic key rotation (1-365)  # noqa: E501

        :return: The rotation_interval of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._rotation_interval

    @rotation_interval.setter
    def rotation_interval(self, rotation_interval):
        """Sets the rotation_interval of this RotatedSecretUpdateCustom.

        The number of days to wait between every automatic key rotation (1-365)  # noqa: E501

        :param rotation_interval: The rotation_interval of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._rotation_interval = rotation_interval

    @property
    def secure_access_allow_external_user(self):
        """Gets the secure_access_allow_external_user of this RotatedSecretUpdateCustom.  # noqa: E501

        Allow providing external user for a domain users  # noqa: E501

        :return: The secure_access_allow_external_user of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_allow_external_user

    @secure_access_allow_external_user.setter
    def secure_access_allow_external_user(self, secure_access_allow_external_user):
        """Sets the secure_access_allow_external_user of this RotatedSecretUpdateCustom.

        Allow providing external user for a domain users  # noqa: E501

        :param secure_access_allow_external_user: The secure_access_allow_external_user of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: bool
        """

        self._secure_access_allow_external_user = secure_access_allow_external_user

    @property
    def secure_access_bastion_issuer(self):
        """Gets the secure_access_bastion_issuer of this RotatedSecretUpdateCustom.  # noqa: E501

        Path to the SSH Certificate Issuer for your Akeyless Bastion  # noqa: E501

        :return: The secure_access_bastion_issuer of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_bastion_issuer

    @secure_access_bastion_issuer.setter
    def secure_access_bastion_issuer(self, secure_access_bastion_issuer):
        """Sets the secure_access_bastion_issuer of this RotatedSecretUpdateCustom.

        Path to the SSH Certificate Issuer for your Akeyless Bastion  # noqa: E501

        :param secure_access_bastion_issuer: The secure_access_bastion_issuer of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._secure_access_bastion_issuer = secure_access_bastion_issuer

    @property
    def secure_access_enable(self):
        """Gets the secure_access_enable of this RotatedSecretUpdateCustom.  # noqa: E501

        Enable/Disable secure remote access [true/false]  # noqa: E501

        :return: The secure_access_enable of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_enable

    @secure_access_enable.setter
    def secure_access_enable(self, secure_access_enable):
        """Sets the secure_access_enable of this RotatedSecretUpdateCustom.

        Enable/Disable secure remote access [true/false]  # noqa: E501

        :param secure_access_enable: The secure_access_enable of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._secure_access_enable = secure_access_enable

    @property
    def secure_access_host(self):
        """Gets the secure_access_host of this RotatedSecretUpdateCustom.  # noqa: E501

        Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)  # noqa: E501

        :return: The secure_access_host of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: list[str]
        """
        return self._secure_access_host

    @secure_access_host.setter
    def secure_access_host(self, secure_access_host):
        """Sets the secure_access_host of this RotatedSecretUpdateCustom.

        Target servers for connections (In case of Linked Target association, host(s) will inherit Linked Target hosts - Relevant only for Dynamic Secrets/producers)  # noqa: E501

        :param secure_access_host: The secure_access_host of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: list[str]
        """

        self._secure_access_host = secure_access_host

    @property
    def secure_access_rdp_domain(self):
        """Gets the secure_access_rdp_domain of this RotatedSecretUpdateCustom.  # noqa: E501

        Required when the Dynamic Secret is used for a domain user  # noqa: E501

        :return: The secure_access_rdp_domain of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_rdp_domain

    @secure_access_rdp_domain.setter
    def secure_access_rdp_domain(self, secure_access_rdp_domain):
        """Sets the secure_access_rdp_domain of this RotatedSecretUpdateCustom.

        Required when the Dynamic Secret is used for a domain user  # noqa: E501

        :param secure_access_rdp_domain: The secure_access_rdp_domain of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._secure_access_rdp_domain = secure_access_rdp_domain

    @property
    def secure_access_rdp_user(self):
        """Gets the secure_access_rdp_user of this RotatedSecretUpdateCustom.  # noqa: E501

        Override the RDP Domain username  # noqa: E501

        :return: The secure_access_rdp_user of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_rdp_user

    @secure_access_rdp_user.setter
    def secure_access_rdp_user(self, secure_access_rdp_user):
        """Sets the secure_access_rdp_user of this RotatedSecretUpdateCustom.

        Override the RDP Domain username  # noqa: E501

        :param secure_access_rdp_user: The secure_access_rdp_user of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._secure_access_rdp_user = secure_access_rdp_user

    @property
    def secure_access_ssh_user(self):
        """Gets the secure_access_ssh_user of this RotatedSecretUpdateCustom.  # noqa: E501

        Override the SSH username as indicated in SSH Certificate Issuer  # noqa: E501

        :return: The secure_access_ssh_user of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_ssh_user

    @secure_access_ssh_user.setter
    def secure_access_ssh_user(self, secure_access_ssh_user):
        """Sets the secure_access_ssh_user of this RotatedSecretUpdateCustom.

        Override the SSH username as indicated in SSH Certificate Issuer  # noqa: E501

        :param secure_access_ssh_user: The secure_access_ssh_user of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._secure_access_ssh_user = secure_access_ssh_user

    @property
    def secure_access_url(self):
        """Gets the secure_access_url of this RotatedSecretUpdateCustom.  # noqa: E501

        Destination URL to inject secrets  # noqa: E501

        :return: The secure_access_url of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._secure_access_url

    @secure_access_url.setter
    def secure_access_url(self, secure_access_url):
        """Sets the secure_access_url of this RotatedSecretUpdateCustom.

        Destination URL to inject secrets  # noqa: E501

        :param secure_access_url: The secure_access_url of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._secure_access_url = secure_access_url

    @property
    def secure_access_web(self):
        """Gets the secure_access_web of this RotatedSecretUpdateCustom.  # noqa: E501

        Enable Web Secure Remote Access  # noqa: E501

        :return: The secure_access_web of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_web

    @secure_access_web.setter
    def secure_access_web(self, secure_access_web):
        """Sets the secure_access_web of this RotatedSecretUpdateCustom.

        Enable Web Secure Remote Access  # noqa: E501

        :param secure_access_web: The secure_access_web of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: bool
        """

        self._secure_access_web = secure_access_web

    @property
    def secure_access_web_browsing(self):
        """Gets the secure_access_web_browsing of this RotatedSecretUpdateCustom.  # noqa: E501

        Secure browser via Akeyless Web Access Bastion  # noqa: E501

        :return: The secure_access_web_browsing of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_web_browsing

    @secure_access_web_browsing.setter
    def secure_access_web_browsing(self, secure_access_web_browsing):
        """Sets the secure_access_web_browsing of this RotatedSecretUpdateCustom.

        Secure browser via Akeyless Web Access Bastion  # noqa: E501

        :param secure_access_web_browsing: The secure_access_web_browsing of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: bool
        """

        self._secure_access_web_browsing = secure_access_web_browsing

    @property
    def secure_access_web_proxy(self):
        """Gets the secure_access_web_proxy of this RotatedSecretUpdateCustom.  # noqa: E501

        Web-Proxy via Akeyless Web Access Bastion  # noqa: E501

        :return: The secure_access_web_proxy of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: bool
        """
        return self._secure_access_web_proxy

    @secure_access_web_proxy.setter
    def secure_access_web_proxy(self, secure_access_web_proxy):
        """Sets the secure_access_web_proxy of this RotatedSecretUpdateCustom.

        Web-Proxy via Akeyless Web Access Bastion  # noqa: E501

        :param secure_access_web_proxy: The secure_access_web_proxy of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: bool
        """

        self._secure_access_web_proxy = secure_access_web_proxy

    @property
    def token(self):
        """Gets the token of this RotatedSecretUpdateCustom.  # noqa: E501

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :return: The token of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this RotatedSecretUpdateCustom.

        Authentication token (see `/auth` and `/configure`)  # noqa: E501

        :param token: The token of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def uid_token(self):
        """Gets the uid_token of this RotatedSecretUpdateCustom.  # noqa: E501

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :return: The uid_token of this RotatedSecretUpdateCustom.  # noqa: E501
        :rtype: str
        """
        return self._uid_token

    @uid_token.setter
    def uid_token(self, uid_token):
        """Sets the uid_token of this RotatedSecretUpdateCustom.

        The universal identity token, Required only for universal_identity authentication  # noqa: E501

        :param uid_token: The uid_token of this RotatedSecretUpdateCustom.  # noqa: E501
        :type: str
        """

        self._uid_token = uid_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RotatedSecretUpdateCustom):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RotatedSecretUpdateCustom):
            return True

        return self.to_dict() != other.to_dict()
