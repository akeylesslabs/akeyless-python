# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 3.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TargetUpdateDB(BaseModel):
    """
    TargetUpdateDB
    """ # noqa: E501
    db_defined_connection_type: Optional[StrictStr] = Field(default=None, alias="DBDefinedConnectionType")
    azure_client_id: Optional[StrictStr] = Field(default=None, description="(Optional) Client id (relevant for \"cloud-service-provider\" only)", alias="azure-client-id")
    azure_client_secret: Optional[StrictStr] = Field(default=None, description="(Optional) Client secret (relevant for \"cloud-service-provider\" only)", alias="azure-client-secret")
    azure_tenant_id: Optional[StrictStr] = Field(default=None, description="(Optional) Tenant id (relevant for \"cloud-service-provider\" only)", alias="azure-tenant-id")
    cloud_service_provider: Optional[StrictStr] = Field(default=None, description="(Optional) Cloud service provider (currently only supports Azure)", alias="cloud-service-provider")
    cluster_mode: Optional[StrictBool] = Field(default=None, description="Cluster Mode", alias="cluster-mode")
    comment: Optional[StrictStr] = Field(default=None, description="Deprecated - use description")
    connection_type: StrictStr = Field(description="Type of connection to mssql/oracle database [credentials/cloud-identity/wallet]", alias="connection-type")
    db_name: Optional[StrictStr] = Field(default=None, alias="db-name")
    db_server_certificates: Optional[StrictStr] = Field(default=None, description="(Optional) DB server certificates", alias="db-server-certificates")
    db_server_name: Optional[StrictStr] = Field(default=None, description="(Optional) Server name for certificate verification", alias="db-server-name")
    db_type: StrictStr = Field(alias="db-type")
    description: Optional[StrictStr] = Field(default=None, description="Description of the object")
    host: Optional[StrictStr] = None
    var_json: Optional[StrictBool] = Field(default=False, description="Set output format to JSON", alias="json")
    keep_prev_version: Optional[StrictStr] = Field(default=None, description="Whether to keep previous version [true/false]. If not set, use default according to account settings", alias="keep-prev-version")
    key: Optional[StrictStr] = Field(default=None, description="The name of a key that used to encrypt the target secret value (if empty, the account default protectionKey key will be used)")
    max_versions: Optional[StrictStr] = Field(default=None, description="Set the maximum number of versions, limited by the account settings defaults.", alias="max-versions")
    mongodb_atlas: Optional[StrictBool] = Field(default=None, alias="mongodb-atlas")
    mongodb_atlas_api_private_key: Optional[StrictStr] = Field(default=None, description="MongoDB Atlas private key", alias="mongodb-atlas-api-private-key")
    mongodb_atlas_api_public_key: Optional[StrictStr] = Field(default=None, description="MongoDB Atlas public key", alias="mongodb-atlas-api-public-key")
    mongodb_atlas_project_id: Optional[StrictStr] = Field(default=None, description="MongoDB Atlas project ID", alias="mongodb-atlas-project-id")
    mongodb_default_auth_db: Optional[StrictStr] = Field(default=None, description="MongoDB server default authentication database", alias="mongodb-default-auth-db")
    mongodb_uri_options: Optional[StrictStr] = Field(default=None, description="MongoDB server URI options", alias="mongodb-uri-options")
    name: StrictStr = Field(description="Target name")
    new_name: Optional[StrictStr] = Field(default=None, description="New target name", alias="new-name")
    oracle_service_name: Optional[StrictStr] = Field(default=None, description="Oracle db service name", alias="oracle-service-name")
    oracle_wallet_login_type: Optional[StrictStr] = Field(default=None, description="Oracle Wallet login type (password/mtls)", alias="oracle-wallet-login-type")
    oracle_wallet_p12_file_data: Optional[StrictStr] = Field(default=None, description="Oracle wallet p12 file data in base64", alias="oracle-wallet-p12-file-data")
    oracle_wallet_sso_file_data: Optional[StrictStr] = Field(default=None, description="Oracle wallet sso file data in base64", alias="oracle-wallet-sso-file-data")
    port: Optional[StrictStr] = None
    pwd: Optional[StrictStr] = None
    snowflake_account: Optional[StrictStr] = Field(default=None, alias="snowflake-account")
    snowflake_api_private_key: Optional[StrictStr] = Field(default=None, description="RSA Private key (base64 encoded)", alias="snowflake-api-private-key")
    snowflake_api_private_key_password: Optional[StrictStr] = Field(default=None, description="The Private key passphrase", alias="snowflake-api-private-key-password")
    ssl: Optional[StrictBool] = Field(default=False, description="Enable/Disable SSL [true/false]")
    ssl_certificate: Optional[StrictStr] = Field(default=None, description="SSL connection certificate", alias="ssl-certificate")
    token: Optional[StrictStr] = Field(default=None, description="Authentication token (see `/auth` and `/configure`)")
    uid_token: Optional[StrictStr] = Field(default=None, description="The universal identity token, Required only for universal_identity authentication", alias="uid-token")
    user_name: Optional[StrictStr] = Field(default=None, alias="user-name")
    __properties: ClassVar[List[str]] = ["DBDefinedConnectionType", "azure-client-id", "azure-client-secret", "azure-tenant-id", "cloud-service-provider", "cluster-mode", "comment", "connection-type", "db-name", "db-server-certificates", "db-server-name", "db-type", "description", "host", "json", "keep-prev-version", "key", "max-versions", "mongodb-atlas", "mongodb-atlas-api-private-key", "mongodb-atlas-api-public-key", "mongodb-atlas-project-id", "mongodb-default-auth-db", "mongodb-uri-options", "name", "new-name", "oracle-service-name", "oracle-wallet-login-type", "oracle-wallet-p12-file-data", "oracle-wallet-sso-file-data", "port", "pwd", "snowflake-account", "snowflake-api-private-key", "snowflake-api-private-key-password", "ssl", "ssl-certificate", "token", "uid-token", "user-name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetUpdateDB from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetUpdateDB from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "DBDefinedConnectionType": obj.get("DBDefinedConnectionType"),
            "azure-client-id": obj.get("azure-client-id"),
            "azure-client-secret": obj.get("azure-client-secret"),
            "azure-tenant-id": obj.get("azure-tenant-id"),
            "cloud-service-provider": obj.get("cloud-service-provider"),
            "cluster-mode": obj.get("cluster-mode"),
            "comment": obj.get("comment"),
            "connection-type": obj.get("connection-type") if obj.get("connection-type") is not None else 'credentials',
            "db-name": obj.get("db-name"),
            "db-server-certificates": obj.get("db-server-certificates"),
            "db-server-name": obj.get("db-server-name"),
            "db-type": obj.get("db-type"),
            "description": obj.get("description"),
            "host": obj.get("host"),
            "json": obj.get("json") if obj.get("json") is not None else False,
            "keep-prev-version": obj.get("keep-prev-version"),
            "key": obj.get("key"),
            "max-versions": obj.get("max-versions"),
            "mongodb-atlas": obj.get("mongodb-atlas"),
            "mongodb-atlas-api-private-key": obj.get("mongodb-atlas-api-private-key"),
            "mongodb-atlas-api-public-key": obj.get("mongodb-atlas-api-public-key"),
            "mongodb-atlas-project-id": obj.get("mongodb-atlas-project-id"),
            "mongodb-default-auth-db": obj.get("mongodb-default-auth-db"),
            "mongodb-uri-options": obj.get("mongodb-uri-options"),
            "name": obj.get("name"),
            "new-name": obj.get("new-name"),
            "oracle-service-name": obj.get("oracle-service-name"),
            "oracle-wallet-login-type": obj.get("oracle-wallet-login-type"),
            "oracle-wallet-p12-file-data": obj.get("oracle-wallet-p12-file-data"),
            "oracle-wallet-sso-file-data": obj.get("oracle-wallet-sso-file-data"),
            "port": obj.get("port"),
            "pwd": obj.get("pwd"),
            "snowflake-account": obj.get("snowflake-account"),
            "snowflake-api-private-key": obj.get("snowflake-api-private-key"),
            "snowflake-api-private-key-password": obj.get("snowflake-api-private-key-password"),
            "ssl": obj.get("ssl") if obj.get("ssl") is not None else False,
            "ssl-certificate": obj.get("ssl-certificate"),
            "token": obj.get("token"),
            "uid-token": obj.get("uid-token"),
            "user-name": obj.get("user-name")
        })
        return _obj


