# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from akeyless.configuration import Configuration


class HuaweiAccessRules(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auth_endpoint': 'str',
        'domain_id': 'list[str]',
        'domain_name': 'list[str]',
        'tenant_id': 'list[str]',
        'tenant_name': 'list[str]',
        'user_id': 'list[str]',
        'user_name': 'list[str]'
    }

    attribute_map = {
        'auth_endpoint': 'auth_endpoint',
        'domain_id': 'domain_id',
        'domain_name': 'domain_name',
        'tenant_id': 'tenant_id',
        'tenant_name': 'tenant_name',
        'user_id': 'user_id',
        'user_name': 'user_name'
    }

    def __init__(self, auth_endpoint=None, domain_id=None, domain_name=None, tenant_id=None, tenant_name=None, user_id=None, user_name=None, local_vars_configuration=None):  # noqa: E501
        """HuaweiAccessRules - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auth_endpoint = None
        self._domain_id = None
        self._domain_name = None
        self._tenant_id = None
        self._tenant_name = None
        self._user_id = None
        self._user_name = None
        self.discriminator = None

        if auth_endpoint is not None:
            self.auth_endpoint = auth_endpoint
        if domain_id is not None:
            self.domain_id = domain_id
        if domain_name is not None:
            self.domain_name = domain_name
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if tenant_name is not None:
            self.tenant_name = tenant_name
        if user_id is not None:
            self.user_id = user_id
        if user_name is not None:
            self.user_name = user_name

    @property
    def auth_endpoint(self):
        """Gets the auth_endpoint of this HuaweiAccessRules.  # noqa: E501

        The auth URL.  # noqa: E501

        :return: The auth_endpoint of this HuaweiAccessRules.  # noqa: E501
        :rtype: str
        """
        return self._auth_endpoint

    @auth_endpoint.setter
    def auth_endpoint(self, auth_endpoint):
        """Sets the auth_endpoint of this HuaweiAccessRules.

        The auth URL.  # noqa: E501

        :param auth_endpoint: The auth_endpoint of this HuaweiAccessRules.  # noqa: E501
        :type: str
        """

        self._auth_endpoint = auth_endpoint

    @property
    def domain_id(self):
        """Gets the domain_id of this HuaweiAccessRules.  # noqa: E501

        The list of domain ids that the login is restricted to.  # noqa: E501

        :return: The domain_id of this HuaweiAccessRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._domain_id

    @domain_id.setter
    def domain_id(self, domain_id):
        """Sets the domain_id of this HuaweiAccessRules.

        The list of domain ids that the login is restricted to.  # noqa: E501

        :param domain_id: The domain_id of this HuaweiAccessRules.  # noqa: E501
        :type: list[str]
        """

        self._domain_id = domain_id

    @property
    def domain_name(self):
        """Gets the domain_name of this HuaweiAccessRules.  # noqa: E501

        The list of domainNames that the login is restricted to.  # noqa: E501

        :return: The domain_name of this HuaweiAccessRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this HuaweiAccessRules.

        The list of domainNames that the login is restricted to.  # noqa: E501

        :param domain_name: The domain_name of this HuaweiAccessRules.  # noqa: E501
        :type: list[str]
        """

        self._domain_name = domain_name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this HuaweiAccessRules.  # noqa: E501

        The list of tenantIDs  that the login is restricted to.  # noqa: E501

        :return: The tenant_id of this HuaweiAccessRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this HuaweiAccessRules.

        The list of tenantIDs  that the login is restricted to.  # noqa: E501

        :param tenant_id: The tenant_id of this HuaweiAccessRules.  # noqa: E501
        :type: list[str]
        """

        self._tenant_id = tenant_id

    @property
    def tenant_name(self):
        """Gets the tenant_name of this HuaweiAccessRules.  # noqa: E501

        The list of tenantNames  that the login is restricted to.  # noqa: E501

        :return: The tenant_name of this HuaweiAccessRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this HuaweiAccessRules.

        The list of tenantNames  that the login is restricted to.  # noqa: E501

        :param tenant_name: The tenant_name of this HuaweiAccessRules.  # noqa: E501
        :type: list[str]
        """

        self._tenant_name = tenant_name

    @property
    def user_id(self):
        """Gets the user_id of this HuaweiAccessRules.  # noqa: E501

        The list of user ids that the login is restricted to.  # noqa: E501

        :return: The user_id of this HuaweiAccessRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this HuaweiAccessRules.

        The list of user ids that the login is restricted to.  # noqa: E501

        :param user_id: The user_id of this HuaweiAccessRules.  # noqa: E501
        :type: list[str]
        """

        self._user_id = user_id

    @property
    def user_name(self):
        """Gets the user_name of this HuaweiAccessRules.  # noqa: E501

        The list of user names that the login is restricted to.  # noqa: E501

        :return: The user_name of this HuaweiAccessRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this HuaweiAccessRules.

        The list of user names that the login is restricted to.  # noqa: E501

        :param user_name: The user_name of this HuaweiAccessRules.  # noqa: E501
        :type: list[str]
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HuaweiAccessRules):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HuaweiAccessRules):
            return True

        return self.to_dict() != other.to_dict()
