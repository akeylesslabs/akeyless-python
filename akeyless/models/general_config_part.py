# coding: utf-8

"""
    Akeyless API

    The purpose of this application is to provide access to Akeyless API.

    The version of the OpenAPI document: 2.0
    Contact: support@akeyless.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GeneralConfigPart(BaseModel):
    """
    GeneralConfigPart
    """ # noqa: E501
    akeyless_url: Optional[StrictStr] = Field(default=None, description="AkeylessUrl is here for BC only. Gator will still return it if it exists in the configuration, but new clients (>=2.34.0) will ignore it and override it with what exists in their local file. It will no longer be sent to Gator for update, so new clusters will only have the default value saved in the DB.")
    api_token_ttl: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = None
    enable_sni_proxy: Optional[StrictBool] = None
    enable_tls: Optional[StrictBool] = None
    enable_tls_configure: Optional[StrictBool] = None
    enable_tls_curl: Optional[StrictBool] = None
    enable_tls_hvp: Optional[StrictBool] = None
    gw_cluster_url: Optional[StrictStr] = None
    hvp_route_version: Optional[StrictInt] = None
    notify_on_status_change: Optional[StrictBool] = None
    tcp_port: Optional[StrictStr] = None
    tls_cert: Optional[StrictStr] = None
    tls_key: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["akeyless_url", "api_token_ttl", "display_name", "enable_sni_proxy", "enable_tls", "enable_tls_configure", "enable_tls_curl", "enable_tls_hvp", "gw_cluster_url", "hvp_route_version", "notify_on_status_change", "tcp_port", "tls_cert", "tls_key"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GeneralConfigPart from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GeneralConfigPart from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "akeyless_url": obj.get("akeyless_url"),
            "api_token_ttl": obj.get("api_token_ttl"),
            "display_name": obj.get("display_name"),
            "enable_sni_proxy": obj.get("enable_sni_proxy"),
            "enable_tls": obj.get("enable_tls"),
            "enable_tls_configure": obj.get("enable_tls_configure"),
            "enable_tls_curl": obj.get("enable_tls_curl"),
            "enable_tls_hvp": obj.get("enable_tls_hvp"),
            "gw_cluster_url": obj.get("gw_cluster_url"),
            "hvp_route_version": obj.get("hvp_route_version"),
            "notify_on_status_change": obj.get("notify_on_status_change"),
            "tcp_port": obj.get("tcp_port"),
            "tls_cert": obj.get("tls_cert"),
            "tls_key": obj.get("tls_key")
        })
        return _obj


